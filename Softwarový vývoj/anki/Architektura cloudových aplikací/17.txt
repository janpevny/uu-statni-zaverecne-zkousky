17. Práce s binárními daty - Upload a download binárních dat	"<div><strong>Upload a download binárních dat</strong></div><div><br></div><ul><li><strong>Multipart/form-data</strong> - standard pro upload souborů přes HTTP</li><li><strong>Base64 kódování</strong> - reprezentace binárních dat v textové podobě</li><li><strong>Streaming upload</strong> - postupné nahrávání velkých souborů</li><li><strong>Content-Type headers</strong> - specifikace typu binárních dat</li><li><strong>MIME typy</strong> - identifikace formátu souborů (image/jpeg, application/pdf)</li></ul><div><br></div><div><strong>Praktické příklady:</strong></div><ul><li>Express.js s multer middleware</li><li>Fetch API s FormData</li><li>Axios s blob/arrayBuffer</li></ul>"

17. Práce s binárními daty - Persistence binárních dat	"<div><strong>Persistence binárních dat</strong></div><div><br></div><ul><li><strong>Buffer objekty</strong> - Node.js reprezentace binárních dat v paměti</li><li><strong>ArrayBuffer a TypedArrays</strong> - nízkoúrovňová práce s binárními daty</li><li><strong>Blob API</strong> - webový standard pro práci s binárními objekty</li><li><strong>Database storage</strong> - ukládání jako BLOB/BYTEA typy</li><li><strong>File system storage</strong> - ukládání do souborů na disk</li></ul><div><br></div><div><strong>Úložiště:</strong></div><ul><li>PostgreSQL BYTEA</li><li>MySQL BLOB</li><li>MongoDB GridFS</li><li>Cloud storage (AWS S3, Google Cloud)</li></ul>"

17. Práce s binárními daty - Node.js fs modul	"<div><strong>Node.js fs modul</strong></div><div><br></div><ul><li><strong>fs.readFile/writeFile</strong> - čtení a zápis celých souborů</li><li><strong>fs.createReadStream/WriteStream</strong> - streamování velkých souborů</li><li><strong>fs.stat</strong> - získání metadata souboru (velikost, datum)</li><li><strong>fs.access</strong> - kontrola existence a oprávnění</li><li><strong>fs.mkdir/rmdir</strong> - správa adresářů</li></ul><div><br></div><div><strong>Synchronní vs Asynchronní:</strong></div><ul><li>fs.readFileSync() - blokující</li><li>fs.readFile() - callback-based</li><li>fs.promises.readFile() - Promise-based</li></ul>"

17. Práce s binárními daty - Node.js stream modul	"<div><strong>Node.js stream modul</strong></div><div><br></div><ul><li><strong>Readable streams</strong> - čtení dat po částech</li><li><strong>Writable streams</strong> - zápis dat po částech</li><li><strong>Transform streams</strong> - transformace dat za běhu</li><li><strong>Pipeline</strong> - propojení streamů s error handlingem</li><li><strong>Backpressure</strong> - řízení toku dat při rozdílných rychlostech</li></ul><div><br></div><div><strong>Výhody streamů:</strong></div><ul><li>Nízká spotřeba paměti</li><li>Rychlejší zpracování velkých souborů</li><li>Možnost paralelního zpracování</li></ul>"

17. Práce s binárními daty - Async/await základy	"<div><strong>Async/await základy</strong></div><div><br></div><ul><li><strong>async function</strong> - deklarace asynchronní funkce</li><li><strong>await klíčové slovo</strong> - čekání na Promise</li><li><strong>Error handling</strong> - try/catch bloky pro async kód</li><li><strong>Return values</strong> - async funkce vždy vrací Promise</li><li><strong>Paralelní execution</strong> - Promise.all() pro současné operace</li></ul><div><br></div><div><strong>Příklad:</strong></div><ul><li>async function readFile() { try { const data = await fs.promises.readFile('file.txt'); } catch(err) { console.error(err); } }</li></ul>"

17. Práce s binárními daty - Promise API	"<div><strong>Promise API</strong></div><div><br></div><ul><li><strong>Promise konstruktor</strong> - new Promise((resolve, reject) => {})</li><li><strong>then/catch/finally</strong> - chainování Promise operací</li><li><strong>Promise.all()</strong> - čekání na všechny Promise</li><li><strong>Promise.race()</strong> - první dokončený Promise</li><li><strong>Promise.allSettled()</strong> - čekání na všechny bez ohledu na chyby</li></ul><div><br></div><div><strong>Stavy Promise:</strong></div><ol><li><strong>Pending</strong> - čeká na dokončení</li><li><strong>Fulfilled</strong> - úspěšně dokončen</li><li><strong>Rejected</strong> - dokončen s chybou</li></ol>"

17. Práce s binárními daty - JSON parsing a stringifikace	"<div><strong>JSON parsing a stringifikace</strong></div><div><br></div><ul><li><strong>JSON.parse()</strong> - převod JSON stringu na objekt</li><li><strong>JSON.stringify()</strong> - převod objektu na JSON string</li><li><strong>Reviver function</strong> - custom transformace při parsingu</li><li><strong>Replacer function</strong> - custom transformace při stringifikaci</li><li><strong>Space parameter</strong> - formátování výstupu s odsazením</li></ul><div><br></div><div><strong>Error handling:</strong></div><ul><li>SyntaxError při nevalidním JSON</li><li>try/catch bloky pro bezpečný parsing</li><li>Validace před zpracováním</li></ul>"

17. Práce s binárními daty - Pokročilé JSON operace	"<div><strong>Pokročilé JSON operace</strong></div><div><br></div><ul><li><strong>JSON Schema validation</strong> - validace struktury dat</li><li><strong>JSON Patch</strong> - atomické změny v JSON dokumentech</li><li><strong>JSON Pointer</strong> - adresování částí JSON dokumentu</li><li><strong>Streaming JSON parsing</strong> - zpracování velkých JSON souborů</li><li><strong>Custom serialization</strong> - toJSON() metoda pro objekty</li></ul><div><br></div><div><strong>Knihovny:</strong></div><ul><li>Ajv - JSON schema validator</li><li>fast-json-stringify - rychlá serialization</li><li>JSONStream - streaming parser</li></ul>"