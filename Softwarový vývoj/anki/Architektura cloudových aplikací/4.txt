4. Persistence dat - Typy a terminologie	"<div><strong>Typy persistence a základní terminologie</strong></div><div><br></div><div><strong>Typy persistence:</strong></div><ul><li><strong>Dočasná (Session)</strong> - data existují pouze během běhu aplikace</li><li><strong>Trvalá (Persistent)</strong> - data přežívají restart aplikace</li><li><strong>Cache</strong> - dočasné uložení pro rychlejší přístup</li><li><strong>In-memory</strong> - data v operační paměti (Redis, Memcached)</li></ul><div><br></div><div><strong>Základní terminologie:</strong></div><ul><li><strong>CRUD operace</strong> - Create, Read, Update, Delete</li><li><strong>Transakce</strong> - skupina operací provedených jako celek</li><li><strong>ACID vlastnosti</strong> - Atomicity, Consistency, Isolation, Durability</li><li><strong>CAP teorém</strong> - Consistency, Availability, Partition tolerance (možné pouze 2 ze 3)</li><li><strong>Schema</strong> - struktura a organizace dat</li><li><strong>ORM/ODM</strong> - Object-Relational/Document Mapping</li></ul><div><br></div><div><strong>Praktické příklady:</strong></div><ul><li>Session storage - košík v e-shopu</li><li>Cache - uložené výsledky API volání</li><li>Persistent - záznamy uživatelů v databázi</li></ul>"

4. Persistence dat - ACID vs BASE principy	"<div><strong>ACID vs BASE principy databází</strong></div><div><br></div><div><strong>ACID vlastnosti (SQL databáze):</strong></div><ul><li><strong>Atomicity</strong> - transakce je nedělitelná, buď proběhne celá nebo vůbec</li><li><strong>Consistency</strong> - databáze je vždy v konzistentním stavu</li><li><strong>Isolation</strong> - transakce jsou izolovány od sebe navzájem</li><li><strong>Durability</strong> - potvrzené změny jsou trvalé i při výpadku</li></ul><div><br></div><div><strong>BASE model (NoSQL databáze):</strong></div><ul><li><strong>Basically Available</strong> - systém garantuje dostupnost</li><li><strong>Soft state</strong> - stav systému se může měnit i bez vstupů</li><li><strong>Eventual consistency</strong> - systém bude konzistentní časem</li></ul><div><br></div><div><strong>Kdy použít:</strong></div><ul><li><strong>ACID</strong> - bankovnictví, e-commerce platby, ERP systémy</li><li><strong>BASE</strong> - sociální sítě, real-time aplikace, Big Data</li></ul><div><br></div><div><strong>Kompromis:</strong> CAP teorém - můžete mít pouze 2 ze 3: Konzistence, Dostupnost, Odolnost vůči rozdělení</div>"

4. Persistence dat - SQL databáze charakteristiky	"<div><strong>SQL databáze - charakteristiky a použití</strong></div><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li><strong>Strukturovaná data</strong> - pevně definované schema</li><li><strong>Relační model</strong> - tabulky propojené cizími klíči</li><li><strong>SQL jazyk</strong> - standardizovaný dotazovací jazyk</li><li><strong>ACID compliance</strong> - silné garance konzistence</li><li><strong>Vertikální škálování</strong> - výkonnější hardware</li></ul><div><br></div><div><strong>Populární SQL databáze:</strong></div><ul><li><strong>MySQL/MariaDB</strong> - open-source, populární pro web</li><li><strong>PostgreSQL</strong> - pokročilé features, JSON podpora</li><li><strong>Oracle</strong> - enterprise řešení</li><li><strong>MS SQL Server</strong> - integrace s Microsoft stack</li><li><strong>SQLite</strong> - embedded databáze, serverless</li></ul><div><br></div><div><strong>Ideální použití:</strong></div><ul><li>E-commerce - objednávky, produkty, zákazníci</li><li>Bankovnictví - transakce vyžadující ACID</li><li>ERP systémy - komplexní relace mezi entitami</li><li>CRM aplikace - strukturovaná data o zákaznících</li></ul>"

4. Persistence dat - NoSQL databáze typy	"<div><strong>NoSQL databáze - typy a charakteristiky</strong></div><div><br></div><div><strong>Document stores:</strong></div><ul><li><strong>MongoDB</strong> - BSON dokumenty, flexibilní schema</li><li><strong>CouchDB</strong> - JSON dokumenty, HTTP API</li><li><strong>Firestore</strong> - Google Cloud, real-time sync</li><li>Vhodné pro: CMS, product catalogy, user profiles</li></ul><div><br></div><div><strong>Key-Value stores:</strong></div><ul><li><strong>Redis</strong> - in-memory, rychlý cache</li><li><strong>DynamoDB</strong> - AWS managed service</li><li>Použití: session storage, cache, real-time data</li></ul><div><br></div><div><strong>Column-family stores:</strong></div><ul><li><strong>Cassandra</strong> - distribuovaná, vysoká dostupnost</li><li><strong>HBase</strong> - Hadoop ecosystem</li><li>Vhodné pro: time-series data, logging, analytics</li></ul><div><br></div><div><strong>Graph databases:</strong></div><ul><li><strong>Neo4j</strong> - Cypher query language</li><li><strong>Amazon Neptune</strong> - managed graph DB</li><li>Použití: sociální sítě, doporučovací systémy, fraud detection</li></ul>"

4. Persistence dat - SQL vs NoSQL srovnání	"<div><strong>SQL vs NoSQL - kdy použít</strong></div><div><br></div><div><strong>Kdy použít SQL:</strong></div><ul><li>Komplexní relace mezi entitami</li><li>ACID transakce jsou kritické</li><li>Strukturovaná data s pevným schématem</li><li>Komplexní dotazy s JOIN operacemi</li><li>Reporting a analytics s agregacemi</li></ul><div><br></div><div><strong>Kdy použít NoSQL:</strong></div><ul><li>Flexibilní schema - časté změny struktury</li><li>Velké objemy dat - Big Data aplikace</li><li>Vysoká rychlost - real-time aplikace</li><li>Geografická distribuce - globální aplikace</li><li>Jednoduché dotazy - klíč-hodnota přístup</li></ul><div><br></div><div><strong>Hybridní přístup:</strong></div><ul><li><strong>Polyglot persistence</strong> - různé databáze pro různé účely</li><li><strong>SQL s JSON</strong> - PostgreSQL, MySQL JSON columns</li><li><strong>Multi-model databáze</strong> - ArangoDB, OrientDB</li></ul><div><br></div><div><strong>Příklad hybridní architektury:</strong></div><div>PostgreSQL (transakce) + Redis (cache) + Elasticsearch (search) + MongoDB (content)</div>"

4. Persistence dat - DAO pattern a Repository	"<div><strong>DAO pattern a Repository pattern</strong></div><div><br></div><div><strong>DAO (Data Access Object) koncept:</strong></div><ul><li><strong>Abstrakce</strong> přístupu k datům</li><li><strong>Oddělení</strong> business logiky od persistence</li><li><strong>Jednotné rozhraní</strong> pro různé datové zdroje</li><li><strong>Testovatelnost</strong> - snadné mockování</li></ul><div><br></div><div><strong>Struktura DAO:</strong></div><ul><li><strong>DAO Interface</strong> - definuje operace (findById, save, update, delete)</li><li><strong>Konkrétní implementace</strong> - SQL DAO, MongoDB DAO, File DAO</li><li><strong>Entity/Model</strong> - datové objekty</li><li><strong>Factory pattern</strong> - vytváření správné implementace</li></ul><div><br></div><div><strong>Repository pattern:</strong></div><ul><li>Moderní varianta DAO</li><li>Domain-Driven Design koncept</li><li>Agregáty místo jednotlivých entit</li><li>Integrace s ORM frameworky</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Loose coupling mezi vrstvami</li><li>Snadná změna datového zdroje</li><li>Unit testing s mock objekty</li><li>Centralizovaná logika přístupu k datům</li></ul>"

4. Persistence dat - Databázové indexy	"<div><strong>Databázové indexy - typy a strategie</strong></div><div><br></div><div><strong>Typy indexů:</strong></div><ul><li><strong>Primary index</strong> - automaticky na primary key</li><li><strong>Unique index</strong> - zajišťuje unikátnost hodnot</li><li><strong>Composite index</strong> - více sloupců dohromady</li><li><strong>Full-text index</strong> - pro textové vyhledávání</li><li><strong>Spatial index</strong> - pro geografická data</li></ul><div><br></div><div><strong>B-Tree vs Hash indexy:</strong></div><ul><li><strong>B-Tree</strong> - O(log n), vhodné pro range queries, sorting</li><li><strong>Hash</strong> - O(1) pro přesné shody, pouze equality porovnání</li></ul><div><br></div><div><strong>Strategie indexování:</strong></div><ul><li>Indexovat sloupce v WHERE, JOIN, ORDER BY</li><li>Composite indexy - pořadí sloupců je důležité</li><li>Covering index - obsahuje všechny potřebné sloupce</li><li>Index selectivity - unikátnost hodnot</li></ul><div><br></div><div><strong>Nevýhody indexů:</strong></div><ul><li>Zpomalení INSERT/UPDATE/DELETE operací</li><li>Dodatečné místo na disku</li><li>Maintenance overhead</li><li>Může zhoršit výkon při špatném návrhu</li></ul>"

4. Persistence dat - Praktické příklady architektury	"<div><strong>Praktické příklady persistence architektury</strong></div><div><br></div><div><strong>E-shop architektura:</strong></div><ul><li><strong>PostgreSQL</strong> - produkty, objednávky, platby</li><li><strong>Redis</strong> - session storage, košík</li><li><strong>Elasticsearch</strong> - full-text search</li><li><strong>MongoDB</strong> - recenze, user-generated content</li></ul><div><br></div><div><strong>Sociální síť:</strong></div><ul><li><strong>Neo4j</strong> - grafy vztahů mezi uživateli</li><li><strong>Cassandra</strong> - timeline, activity feed</li><li><strong>Redis</strong> - real-time notifications</li><li><strong>PostgreSQL</strong> - user accounts</li></ul><div><br></div><div><strong>IoT aplikace:</strong></div><ul><li><strong>InfluxDB</strong> - time-series data ze senzorů</li><li><strong>Cassandra</strong> - distribuované ukládání</li><li><strong>Redis</strong> - real-time dashboard</li><li><strong>PostgreSQL</strong> - metadata zařízení</li></ul><div><br></div><div><strong>Mikroslužby přístup:</strong></div><ul><li>Service-specific databáze</li><li>Event sourcing s Kafka</li><li>CQRS pattern pro read/write</li><li>Saga pattern pro distribuované transakce</li></ul>"