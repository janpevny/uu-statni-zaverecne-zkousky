7. Životní cyklus návrhu a vývoje cloudové aplikace - Fáze zadání	"<div><strong>Fáze zadání cloudové aplikace</strong></div><div><br></div><div><strong>Klíčové aktivity:</strong></div><ul><li><strong>Definice požadavků</strong> - funkční a nefunkční požadavky</li><li><strong>Identifikace stakeholderů</strong> - uživatelé, správci, obchodní uživatelé</li><li><strong>Analýza domény</strong> - understanding business rules</li><li><strong>Cloud strategy</strong> - výběr cloudového modelu (IaaS/PaaS/SaaS)</li></ul><div><br></div><div><strong>Cloud-specifické požadavky:</strong></div><ul><li>Škálovatelnost a elasticita</li><li>Dostupnost (SLA requirements)</li><li>Bezpečnost a compliance</li><li>Performance a latence</li><li>Multi-region requirements</li></ul><div><br></div><div><strong>Výstupy:</strong></div><ul><li>Requirements specification</li><li>User stories/Use cases</li><li>Non-functional requirements</li><li>Cloud deployment strategy</li></ul><div><br></div><div><strong>Nástroje:</strong></div><div>Confluence, JIRA, Azure DevOps, Figma pro wireframing</div></div>"

7. Životní cyklus návrhu a vývoje cloudové aplikace - High Level Design	"<div><strong>High Level Design (HLD)</strong></div><div><br></div><div><strong>Cíl:</strong></div><div>Definovat celkovou architekturu systému a jeho hlavní komponenty</div><div><br></div><div><strong>Klíčové elementy:</strong></div><ul><li><strong>System architecture diagram</strong> - overall system view</li><li><strong>Component identification</strong> - hlavní aplikační komponenty</li><li><strong>Technology stack</strong> - výběr technologií</li><li><strong>Integration points</strong> - externí systémy a API</li></ul><div><br></div><div><strong>Cloud architektura:</strong></div><ul><li>Multi-tier architecture design</li><li>Load balancing strategy</li><li>Database design (SQL/NoSQL)</li><li>Caching strategy</li><li>Security model</li></ul><div><br></div><div><strong>Výstupy:</strong></div><ul><li>Architecture diagrams</li><li>Technology selection document</li><li>Capacity planning</li><li>Security design</li><li>Integration design</li></ul><div><br></div><div><strong>Nástroje:</strong></div><div>Draw.io, Lucidchart, AWS Architecture Center, Azure Architecture Center</div></div>"

7. Životní cyklus návrhu a vývoje cloudové aplikace - Detailní design	"<div><strong>Detailní design</strong></div><div><br></div><div><strong>Cíl:</strong></div><div>Specifikovat detailní implementaci jednotlivých komponent</div><div><br></div><div><strong>Klíčové oblasti:</strong></div><ul><li><strong>Database design</strong> - tabulky, vztahy, indexy</li><li><strong>API design</strong> - REST endpoints, request/response</li><li><strong>Class diagrams</strong> - objektový model</li><li><strong>Sequence diagrams</strong> - interakce mezi komponenty</li></ul><div><br></div><div><strong>Cloud-specific design:</strong></div><ul><li>Microservices breakdown</li><li>Container architecture</li><li>CI/CD pipeline design</li><li>Monitoring and logging strategy</li><li>Disaster recovery design</li></ul><div><br></div><div><strong>Výstupy:</strong></div><ul><li>Low-level design documents</li><li>Database schema</li><li>API specifications (OpenAPI/Swagger)</li><li>Component interfaces</li><li>Deployment architecture</li></ul><div><br></div><div><strong>Nástroje:</strong></div><div>UML tools, ERD tools, Swagger/OpenAPI, PlantUML</div></div>"

7. Životní cyklus návrhu a vývoje cloudové aplikace - Implementace	"<div><strong>Implementace cloudové aplikace</strong></div><div><br></div><div><strong>Fáze implementace:</strong></div><ol><li><strong>Development environment setup</strong> - local + cloud dev envs</li><li><strong>Code development</strong> - aplikační logika</li><li><strong>Unit testing</strong> - testování jednotlivých komponent</li><li><strong>Integration testing</strong> - testování mezi službami</li></ol><div><br></div><div><strong>Cloud-native praktiky:</strong></div><ul><li><strong>Containerization</strong> - Docker containers</li><li><strong>Infrastructure as Code</strong> - Terraform, CloudFormation</li><li><strong>CI/CD pipelines</strong> - automatizované buildy a testy</li><li><strong>Feature flags</strong> - graduální rollout funkcionalit</li></ul><div><br></div><div><strong>Vývojové nástroje:</strong></div><ul><li>IDE s cloud extensions</li><li>Local development tools</li><li>API testing tools (Postman)</li><li>Version control (Git)</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Code reviews</li><li>Automated testing</li><li>Configuration management</li><li>Security scanning</li></ul></div>"

7. Životní cyklus návrhu a vývoje cloudové aplikace - Nasazení (Deployment)	"<div><strong>Nasazení cloudové aplikace</strong></div><div><br></div><div><strong>Deployment strategie:</strong></div><ul><li><strong>Blue-Green deployment</strong> - paralelní produkční prostředí</li><li><strong>Canary deployment</strong> - postupné nasazení na subset uživatelů</li><li><strong>Rolling deployment</strong> - postupná výměna instancí</li><li><strong>A/B testing</strong> - srovnání různých verzí</li></ul><div><br></div><div><strong>Cloud deployment nástroje:</strong></div><ul><li><strong>Container orchestration</strong> - Kubernetes, ECS</li><li><strong>Infrastructure provisioning</strong> - Terraform, Pulumi</li><li><strong>CI/CD platforms</strong> - Jenkins, GitHub Actions, Azure DevOps</li><li><strong>Configuration management</strong> - Ansible, Chef</li></ul><div><br></div><div><strong>Deployment pipeline:</strong></div><ol><li>Code commit → Build → Test</li><li>Package → Deploy to staging</li><li>Integration tests → Security scans</li><li>Deploy to production → Monitoring</li></ol><div><br></div><div><strong>Rollback strategie:</strong></div><ul><li>Automated rollback triggers</li><li>Database migration rollback</li><li>Traffic routing rollback</li></ul></div>"

7. Životní cyklus návrhu a vývoje cloudové aplikace - Provoz a údržba	"<div><strong>Provoz cloudové aplikace</strong></div><div><br></div><div><strong>Monitoring a observability:</strong></div><ul><li><strong>Application monitoring</strong> - performance metrics</li><li><strong>Infrastructure monitoring</strong> - server/cloud resources</li><li><strong>Log management</strong> - centralizované logování</li><li><strong>Distributed tracing</strong> - sledování requestů mezi službami</li></ul><div><br></div><div><strong>Operational procesy:</strong></div><ul><li><strong>Incident management</strong> - alerting, escalation</li><li><strong>Change management</strong> - řízené změny</li><li><strong>Capacity planning</strong> - předvídání potřeb zdrojů</li><li><strong>Security operations</strong> - security monitoring, patching</li></ul><div><br></div><div><strong>Cloud-specific operations:</strong></div><ul><li>Auto-scaling configuration</li><li>Cost optimization</li><li>Multi-region failover</li><li>Backup and disaster recovery</li></ul><div><br></div><div><strong>Nástroje:</strong></div><ul><li><strong>Monitoring:</strong> CloudWatch, Prometheus, Grafana</li><li><strong>Logging:</strong> ELK Stack, Splunk</li><li><strong>Alerting:</strong> PagerDuty, OpsGenie</li><li><strong>APM:</strong> New Relic, AppDynamics</li></ul></div>"

7. Životní cyklus návrhu a vývoje cloudové aplikace - Kontinuální zlepšování	"<div><strong>Kontinuální zlepšování</strong></div><div><br></div><div><strong>Feedback loops:</strong></div><ul><li><strong>User feedback</strong> - analytics, surveys, support tickets</li><li><strong>Performance metrics</strong> - aplikační a infrastrukturní metriky</li><li><strong>Business metrics</strong> - conversion rates, user engagement</li><li><strong>Operational metrics</strong> - uptime, response times, error rates</li></ul><div><br></div><div><strong>Continuous improvement procesy:</strong></div><ul><li><strong>Regular retrospectives</strong> - co fungovalo/nefungovalo</li><li><strong>Performance optimization</strong> - code i infrastructure tuning</li><li><strong>Security updates</strong> - pravidelné security patches</li><li><strong>Feature iteration</strong> - based on user feedback</li></ul><div><br></div><div><strong>Cloud optimization:</strong></div><ul><li>Cost optimization (rightsizing instances)</li><li>Performance tuning</li><li>Security posture improvements</li><li>Architecture evolution (microservices migration)</li></ul><div><br></div><div><strong>Nástroje pro zlepšování:</strong></div><ul><li>Analytics platforms (Google Analytics)</li><li>A/B testing platforms</li><li>Cost management tools</li><li>Performance profiling tools</li></ul></div>"

7. Životní cyklus návrhu a vývoje cloudové aplikace - DevOps a automatizace	"<div><strong>DevOps a automatizace</strong></div><div><br></div><div><strong>DevOps principy:</strong></div><ul><li><strong>Collaboration</strong> - dev a ops týmy spolupracují</li><li><strong>Automation</strong> - automatizace repetitivních úkolů</li><li><strong>Continuous integration/delivery</strong> - rychlé a spolehlivé nasazení</li><li><strong>Monitoring a feedback</strong> - rychlá detekce problémů</li></ul><div><br></div><div><strong>Automatizace v cloudu:</strong></div><ul><li><strong>Infrastructure as Code</strong> - Terraform, CloudFormation</li><li><strong>Configuration management</strong> - Ansible, Puppet</li><li><strong>Container orchestration</strong> - Kubernetes, Docker Swarm</li><li><strong>CI/CD pipelines</strong> - Jenkins, GitLab CI, GitHub Actions</li></ul><div><br></div><div><strong>Klíčové metriky:</strong></div><ul><li>Deployment frequency</li><li>Lead time for changes</li><li>Mean time to recovery (MTTR)</li><li>Change failure rate</li></ul><div><br></div><div><strong>Nástroje:</strong></div><ul><li><strong>Source control:</strong> Git, GitHub, GitLab</li><li><strong>Build tools:</strong> Maven, Gradle, npm</li><li><strong>Testing:</strong> Jest, JUnit, Selenium</li><li><strong>Deployment:</strong> Spinnaker, ArgoCD</li></ul></div>"