16. Modulárnost aplikace - CommonJS (require/module.exports)	"<div><strong>CommonJS modul systém</strong></div><div><br></div><div><strong>Základní syntaxe:</strong></div><ul><li><strong>Export:</strong> <code>module.exports = {...}</code> nebo <code>exports.nazev = hodnota</code></li><li><strong>Import:</strong> <code>const modul = require('./cesta/k/modulu')</code></li><li><strong>Destrukturing:</strong> <code>const {funkce, promenna} = require('./modul')</code></li></ul><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li>Synchronní načítání modulů</li><li>Každý soubor je vlastní modul</li><li>Privátní scope pro každý modul</li><li>Především pro Node.js environment</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Jednoduchost syntaxe</li><li>Široká podpora v Node.js</li><li>Zpětná kompatibilita</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Pouze pro server-side prostředí</li><li>Synchronní načítání (blocking)</li><li>Limitovaná podpora v prohlížečích</li></ul><div><br></div><div><strong>Příklad:</strong></div><div>math.js: <code>module.exports = {add: (a,b) => a+b}</code></div><div>main.js: <code>const {add} = require('./math')</code></div>"

16. Modulárnost aplikace - ES6 Modules (import/export)	"<div><strong>ES6 Modules (ESM)</strong></div><div><br></div><div><strong>Základní syntaxe:</strong></div><ul><li><strong>Named export:</strong> <code>export const funkce = () => {}</code></li><li><strong>Default export:</strong> <code>export default class {...}</code></li><li><strong>Import:</strong> <code>import {funkce} from './modul.js'</code></li><li><strong>Default import:</strong> <code>import MojeTrida from './modul.js'</code></li></ul><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li>Asynchronní načítání modulů</li><li>Statická analýza (tree-shaking)</li><li>Nativní podpora v moderních prohlížečích</li><li>ECMAScript standard</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Tree-shaking support</li><li>Lepší performance</li><li>Statická analýza</li><li>Standardizované řešení</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Omezená podpora ve starších prostředích</li><li>Asynchronní povaha může komplikovat kód</li><li>Nutnost transpilace pro starší prohlížeče</li></ul><div><br></div><div><strong>Příklad:</strong></div><div>math.js: <code>export const add = (a,b) => a+b</code></div><div>main.js: <code>import {add} from './math.js'</code></div>"

16. Modulárnost aplikace - Module scope a viditelnost	"<div><strong>Module scope a viditelnost proměnných</strong></div><div><br></div><div><strong>Principy modulové viditelnosti:</strong></div><ul><li><strong>Private scope</strong> - proměnné jsou privátní uvnitř modulu</li><li><strong>Explicitní export</strong> - pouze exportované elementy jsou veřejné</li><li><strong>Global scope isolation</strong> - moduly nezanesí globální prostor</li><li><strong>Immutable bindings</strong> - importované binding jsou pouze pro čtení</li></ul><div><br></div><div><strong>Typy viditelnosti:</strong></div><ol><li><strong>Privátní</strong> - pouze uvnitř modulu</li><li><strong>Exportované</strong> - dostupné pro import</li><li><strong>Re-exportované</strong> - předávání exportů z jiných modulů</li></ol><div><br></div><div><strong>Výhody:</strong></div><ul><li>Encapsulation - skrytí implementačních detailů</li><li>Předcházení naming conflicts</li><li>Kontrola nad veřejným API</li><li>Lepší maintainability</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Export pouze to, co je potřeba</li><li>Použití konzistentních naming conventions</li><li>Dokumentace veřejného API</li><li>Minimalizace side effects</li></ul>"

16. Modulárnost aplikace - Rozdíly require vs import	"<div><strong>Porovnání require vs import</strong></div><div><br></div><div><strong>Require (CommonJS):</strong></div><ul><li><strong>Kdy:</strong> Runtime - dynamické načítání</li><li><strong>Kde:</strong> Kdekoliv v kódu (conditionally)</li><li><strong>Typ:</strong> Synchronní operace</li><li><strong>Hodnota:</strong> Obyčejná JavaScript hodnota</li></ul><div><br></div><div><strong>Import (ES6):</strong></div><ul><li><strong>Kdy:</strong> Compile-time - statická analýza</li><li><strong>Kde:</strong> Pouze na top-level modulu</li><li><strong>Typ:</strong> Asynchronní/lazy loading</li><li><strong>Hodnota:</strong> Live binding (referenční vazba)</li></ul><div><br></div><div><strong>Praktické rozdíly:</strong></div><div><strong>Dynamické importy:</strong></div><ul><li>require: <code>if (condition) { const mod = require('./module') }</code></li><li>import: <code>const mod = await import('./module')</code> (dynamic import)</li></ul><div><br></div><div><strong>Performance:</strong></div><ul><li>require: runtime overhead</li><li>import: možnost tree-shakingu, lepší optimalizace</li></ul><div><br></div><div><strong>Kompatibilita:</strong></div><ul><li>require: Node.js, webpack</li><li>import: moderní prohlížeče, transpilery</li></ul>"

16. Modulárnost aplikace - Bundling a build procesy	"<div><strong>Module bundling a build procesy</strong></div><div><br></div><div><strong>Účel bundlingu:</strong></div><ul><li>Spojení více modulů do jednoho/několika souborů</li><li>Optimalizace pro produkci</li><li>Transpilace moderní syntaxe</li><li>Tree-shaking (odstranění nepoužitého kódu)</li></ul><div><br></div><div><strong>Populární bundlery:</strong></div><ul><li><strong>Webpack</strong> - konfigurovatelný, plugin ekosystém</li><li><strong>Rollup</strong> - ES6 modules first, tree-shaking</li><li><strong>Parcel</strong> - zero-config approach</li><li><strong>Vite</strong> - rychlý development, ES modules</li><li><strong>esbuild</strong> - extrémně rychlý (Go-based)</li></ul><div><br></div><div><strong>Build proces zahrnuje:</strong></div><ol><li>Module resolution</li><li>Dependency analysis</li><li>Transpilation (Babel, TypeScript)</li><li>Minification</li><li>Code splitting</li><li>Asset optimization</li></ol><div><br></div><div><strong>Výhody:</strong></div><ul><li>Optimalizace performance</li><li>Kompatibilita s různými prostředími</li><li>Developer experience improvements</li></ul><div><br></div><div><strong>Výzvy:</strong></div><ul><li>Složitost konfigurace</li><li>Build time overhead</li><li>Debugging complexity</li></ul>"

16. Modulárnost aplikace - Module patterns a best practices	"<div><strong>Module patterns a best practices</strong></div><div><br></div><div><strong>Základní module patterns:</strong></div><ul><li><strong>Singleton pattern</strong> - jeden export pro celou aplikaci</li><li><strong>Factory pattern</strong> - export funkcí vytvářejících instance</li><li><strong>Namespace pattern</strong> - organizace related funkcí</li><li><strong>Facade pattern</strong> - zjednodušené API pro komplexní systém</li></ul><div><br></div><div><strong>Best practices:</strong></div><ol><li><strong>Single Responsibility</strong> - jeden modul, jedna odpovědnost</li><li><strong>Explicit dependencies</strong> - jasné import/export statements</li><li><strong>Avoid circular dependencies</strong> - prevence cyklických závislostí</li><li><strong>Consistent naming</strong> - konzistentní pojmenovávání</li></ol><div><br></div><div><strong>Organizace modulů:</strong></div><ul><li>Skupování podle funkcionality</li><li>Clear folder structure</li><li>Index files pro re-export</li><li>Barrel exports pattern</li></ul><div><br></div><div><strong>Error handling:</strong></div><ul><li>Graceful degradation při missing modules</li><li>Proper error propagation</li><li>Module validation</li></ul><div><br></div><div><strong>Performance considerations:</strong></div><ul><li>Lazy loading pro velké moduly</li><li>Code splitting strategies</li><li>Minimalizace side effects</li></ul>"

16. Modulárnost aplikace - Práce s externími knihovnami	"<div><strong>Práce s externími knihovnami a moduly</strong></div><div><br></div><div><strong>Package managery:</strong></div><ul><li><strong>npm</strong> - největší JavaScript registry</li><li><strong>yarn</strong> - rychlejší, deterministic installs</li><li><strong>pnpm</strong> - disk space efficient</li></ul><div><br></div><div><strong>Import strategií:</strong></div><ul><li><strong>Celá knihovna:</strong> <code>import _ from 'lodash'</code></li><li><strong>Specific imports:</strong> <code>import {map} from 'lodash'</code></li><li><strong>Dynamic imports:</strong> <code>const lib = await import('knihovna')</code></li><li><strong>CDN imports:</strong> ES modules z CDN (skypack, jspm)</li></ul><div><br></div><div><strong>Version management:</strong></div><ul><li>Semantic versioning (semver)</li><li>Package lock files</li><li>Dependency auditing</li><li>Security vulnerability scanning</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Audit dependencies pravidelně</li><li>Minimize dependency count</li><li>Use specific version ranges</li><li>Monitor bundle size impact</li></ul><div><br></div><div><strong>Výzvy:</strong></div><ul><li>Dependency hell</li><li>Security vulnerabilities</li><li>Breaking changes</li><li>Bundle size bloat</li><li>License compliance</li></ul>"

16. Modulárnost aplikace - Module federation a mikrofrontends	"<div><strong>Module federation a mikrofrontends</strong></div><div><br></div><div><strong>Module Federation (Webpack 5):</strong></div><ul><li>Sdílení modulů mezi různými aplikacemi</li><li>Runtime federation - dynamické načítání</li><li>Host a Remote aplikace</li><li>Shared dependencies</li></ul><div><br></div><div><strong>Mikrofrontends architektura:</strong></div><ul><li>Rozdělení frontend aplikace na menší, nezávislé části</li><li>Každý tým může použít různé technologie</li><li>Nezávislý deployment</li><li>Runtime kompozice</li></ul><div><br></div><div><strong>Implementační přístupy:</strong></div><ol><li><strong>Build-time integration</strong> - NPM packages</li><li><strong>Runtime integration</strong> - Module federation</li><li><strong>Server-side includes</strong> - Edge Side Includes</li><li><strong>Client-side routing</strong> - Single SPA</li></ol><div><br></div><div><strong>Výhody:</strong></div><ul><li>Technologická nezávislost</li><li>Nezávislé týmy a deployment</li><li>Škálovatelnost development</li></ul><div><br></div><div><strong>Výzvy:</strong></div><ul><li>Komplexita komunikace mezi moduly</li><li>Performance overhead</li><li>Consistent UX</li><li>Shared state management</li><li>Testing complexity</li></ul><div><br></div><div><strong>Nástroje:</strong> Webpack Module Federation, Single SPA, Bit, Piral</div>"