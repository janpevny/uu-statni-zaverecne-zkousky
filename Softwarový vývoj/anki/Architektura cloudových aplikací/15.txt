15. Objektově orientované programování - Třídy a konstruktory	"<div><strong>Třídy a konstruktory</strong></div><div><br></div><div><strong>Základní koncept:</strong></div><ul><li><strong>Třída</strong> - šablona/blueprint pro vytváření objektů, definuje vlastnosti a metody</li><li><strong>Konstruktor</strong> - speciální metoda pro inicializaci objektů při vytvoření</li></ul><div><br></div><div><strong>Klíčové vlastnosti tříd:</strong></div><ul><li><strong>Atributy</strong> - proměnné ukládající stav objektu</li><li><strong>Metody</strong> - funkce definující chování objektu</li><li><strong>Zapouzdření</strong> - skrývání vnitřních detailů implementace</li><li><strong>Modifikátory přístupu</strong> - private, protected, public</li></ul><div><br></div><div><strong>Typy konstruktorů:</strong></div><ul><li><strong>Výchozí konstruktor</strong> - bez parametrů</li><li><strong>Parametrické konstruktory</strong> - s parametry pro inicializaci</li><li><strong>Kopírovací konstruktor</strong> - vytváří kopii existujícího objektu</li></ul>"

15. Objektově orientované programování - Dědičnost	"<div><strong>Dědičnost (Inheritance)</strong></div><div><br></div><div><strong>Základní koncept:</strong></div><ul><li><strong>Dědičnost</strong> - mechanismus pro vytváření nových tříd na základě existujících</li><li><strong>Rodičovská třída</strong> - poskytuje základní funkcionalitet (superclass/base class)</li><li><strong>Potomek</strong> - dědí a rozšiřuje funkcionalitu rodiče (subclass/derived class)</li></ul><div><br></div><div><strong>Výhody dědičnosti:</strong></div><ul><li><strong>Znovupoužití kódu</strong> - eliminace duplicity</li><li><strong>Hierarchie</strong> - logické strukturování tříd</li><li><strong>Rozšiřitelnost</strong> - snadné přidání nových funkcí</li><li><strong>Údržba</strong> - změny v rodičovské třídě se propagují</li></ul><div><br></div><div><strong>Praktické příklady:</strong></div><ul><li><strong>Java/C#</strong> - extends/: keywords</li><li><strong>Python</strong> - class Child(Parent)</li><li><strong>JavaScript</strong> - prototypová dědičnost, ES6 classes</li></ul>"

15. Objektově orientované programování - Polymorfismus	"<div><strong>Polymorfismus</strong></div><div><br></div><div><strong>Základní koncept:</strong></div><ul><li><strong>Polymorfismus</strong> - schopnost objektů různých tříd reagovat na stejné zprávy různými způsoby</li><li><strong>\"Jeden interface, více implementací\"</strong> - stejné volání, různé chování</li></ul><div><br></div><div><strong>Typy polymorfismu:</strong></div><ul><li><strong>Statický polymorfismus</strong> - přetěžování metod (method overloading)</li><li><strong>Dynamický polymorfismus</strong> - přepisování metod (method overriding)</li><li><strong>Ad-hoc polymorfismus</strong> - generika/templates</li><li><strong>Parametrický polymorfismus</strong> - funkce pracující s různými typy</li></ul><div><br></div><div><strong>Mechanismy implementace:</strong></div><ul><li><strong>Virtual methods</strong> - dynamické určení metody za běhu</li><li><strong>Interface implementation</strong> - různé třídy implementují stejný kontrakt</li><li><strong>Duck typing</strong> - \"pokud to kváká jako kachna...\"</li></ul>"

15. Objektově orientované programování - Rozhraní (Interfaces)	"<div><strong>Rozhraní (Interfaces)</strong></div><div><br></div><div><strong>Základní koncept:</strong></div><ul><li><strong>Interface</strong> - kontrakt definující metody, které musí třída implementovat</li><li><strong>Abstrakce</strong> - definuje \"co\" ale ne \"jak\"</li><li><strong>Vícenásobná implementace</strong> - třída může implementovat více rozhraní</li></ul><div><br></div><div><strong>Výhody rozhraní:</strong></div><ul><li><strong>Oddělení kontraktu od implementace</strong> - loose coupling</li><li><strong>Testovatelnost</strong> - snadné vytváření mock objektů</li><li><strong>Flexibilita</strong> - výměna implementací za běhu</li><li><strong>Vícenásobná \"dědičnost\"</strong> - obchází omezení single inheritance</li></ul><div><br></div><div><strong>Praktické použití:</strong></div><ul><li><strong>Java</strong> - interface keyword, implementace přes implements</li><li><strong>C#</strong> - podobně jako Java, konvence I-prefix</li><li><strong>Python</strong> - ABC (Abstract Base Classes), Protocol (typing)</li><li><strong>TypeScript</strong> - interface pro typovou kontrolu</li></ul>"

15. Objektově orientované programování - Vícenásobná dědičnost	"<div><strong>Vícenásobná dědičnost</strong></div><div><br></div><div><strong>Základní koncept:</strong></div><ul><li><strong>Multiple inheritance</strong> - třída dědí od více rodičovských tříd současně</li><li><strong>Kombinace funkcionalit</strong> - slučování vlastností z různých zdrojů</li></ul><div><br></div><div><strong>Problémy vícenásobné dědičnosti:</strong></div><ul><li><strong>Diamond problem</strong> - nejednoznačnost při konfliktních metodách</li><li><strong>Komplexnost</strong> - obtížné pochopení hierarchie</li><li><strong>Name collisions</strong> - stejné názvy metod/atributů</li><li><strong>Maintenance overhead</strong> - složitější údržba kódu</li></ul><div><br></div><div><strong>Přístupy různých jazyků:</strong></div><ul><li><strong>Python</strong> - podporuje, Method Resolution Order (MRO)</li><li><strong>C++</strong> - podporuje, virtual inheritance</li><li><strong>Java/C#</strong> - nepodporuje, pouze single inheritance + interfaces</li><li><strong>Scala/Kotlin</strong> - mixins/traits jako alternativa</li></ul>"

15. Objektově orientované programování - Objekty a jejich životní cyklus	"<div><strong>Objekty a jejich životní cyklus</strong></div><div><br></div><div><strong>Základní koncept:</strong></div><ul><li><strong>Objekt</strong> - instance třídy, konkrétní realizace v paměti</li><li><strong>Identita</strong> - unikátní identifikace objektu v paměti</li><li><strong>Stav</strong> - aktuální hodnoty atributů objektu</li></ul><div><br></div><div><strong>Životní cyklus objektu:</strong></div><ol><li><strong>Vytvoření</strong> - alokace paměti, volání konstruktoru</li><li><strong>Inicializace</strong> - nastavení výchozích hodnot</li><li><strong>Používání</strong> - volání metod, změny stavu</li><li><strong>Finalizace</strong> - cleanup, volání destruktoru</li><li><strong>Uvolnění paměti</strong> - garbage collection nebo manuální</li></ol><div><br></div><div><strong>Správa paměti:</strong></div><ul><li><strong>Garbage Collection</strong> - Java, C#, Python (automatická)</li><li><strong>Reference counting</strong> - Python, Swift</li><li><strong>Manuální správa</strong> - C++, Rust (RAII pattern)</li></ul>"

15. Objektově orientované programování - Zapouzdření a modifikátory přístupu	"<div><strong>Zapouzdření a modifikátory přístupu</strong></div><div><br></div><div><strong>Základní koncept:</strong></div><ul><li><strong>Encapsulation</strong> - skrývání vnitřní implementace objektu</li><li><strong>Information hiding</strong> - kontrola přístupu k datům a metodám</li><li><strong>Data integrity</strong> - ochrana před nevalidními změnami</li></ul><div><br></div><div><strong>Modifikátory přístupu:</strong></div><ul><li><strong>Private</strong> - přístup pouze z téže třídy</li><li><strong>Protected</strong> - přístup z třídy a jejich potomků</li><li><strong>Public</strong> - přístup odkudkoliv</li><li><strong>Package/Internal</strong> - přístup v rámci balíčku/assembly</li></ul><div><br></div><div><strong>Implementace v různých jazycích:</strong></div><ul><li><strong>Java/C#</strong> - explicitní keywords (private, protected, public)</li><li><strong>Python</strong> - konvence (_private, __name_mangling)</li><li><strong>JavaScript</strong> - # pro private fields (ES2022)</li><li><strong>C++</strong> - private/protected/public sekce</li></ul>"

15. Objektově orientované programování - Abstraktní třídy a design patterns	"<div><strong>Abstraktní třídy a design patterns</strong></div><div><br></div><div><strong>Abstraktní třídy:</strong></div><ul><li><strong>Abstract class</strong> - nelze přímo instanciovat, pouze dědit</li><li><strong>Abstraktní metody</strong> - definice bez implementace</li><li><strong>Konkrétní metody</strong> - sdílená funkcionalita pro potomky</li><li><strong>Template method pattern</strong> - definuje kostru algoritmu</li></ul><div><br></div><div><strong>Klíčové OOP design patterns:</strong></div><ul><li><strong>Singleton</strong> - jediná instance třídy</li><li><strong>Factory</strong> - vytváření objektů bez specifikace třídy</li><li><strong>Observer</strong> - notifikace o změnách stavu</li><li><strong>Strategy</strong> - výměna algoritmů za běhu</li><li><strong>Decorator</strong> - dynamické rozšiřování funkcionalit</li></ul><div><br></div><div><strong>Praktické využití:</strong></div><ul><li><strong>Framework design</strong> - definice extension pointů</li><li><strong>Code reuse</strong> - sdílení společné logiky</li><li><strong>API design</strong> - konzistentní rozhraní</li></ul>"