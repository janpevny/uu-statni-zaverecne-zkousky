6. Nasazení aplikace - Základní principy nasazení	"<div><strong>Základní principy nasazení aplikace</strong></div><div><br></div><div><strong>Klíčové principy:</strong></div><ul><li><strong>Automatizace</strong> - minimalizace manuálních kroků</li><li><strong>Reprodukovatelnost</strong> - stejný výsledek v různých prostředích</li><li><strong>Rychlé rollback</strong> - možnost rychlého návratu k předchozí verzi</li><li><strong>Zero downtime deployment</strong> - nasazení bez výpadku</li></ul><div><br></div><div><strong>Deployment strategie:</strong></div><ul><li><strong>Blue-Green deployment</strong> - dva identické prostředí</li><li><strong>Rolling deployment</strong> - postupná výměna instancí</li><li><strong>Canary deployment</strong> - postupné nasazení na část uživatelů</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Snížení rizika chyb</li><li>Rychlejší time-to-market</li><li>Lepší spolehlivost</li><li>Konzistentní prostředí</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Počáteční složitost nastavení</li><li>Potřeba CI/CD pipeline</li><li>Náklady na infrastrukturu</li><li>Komplexnost koordinace</li></ul></div>"

6. Nasazení aplikace - Proces nasazení aplikace	"<div><strong>Proces nasazení aplikace</strong></div><div><br></div><div><strong>Fáze deployment procesu:</strong></div><ol><li><strong>Build</strong> - kompilace, bundling, optimalizace</li><li><strong>Test</strong> - unit, integration, end-to-end testy</li><li><strong>Package</strong> - vytvoření deployment artefaktů</li><li><strong>Deploy</strong> - nasazení do cílového prostředí</li><li><strong>Verify</strong> - smoke testy a health checks</li></ol><div><br></div><div><strong>CI/CD pipeline:</strong></div><ul><li><strong>Continuous Integration</strong> - automatické build a test</li><li><strong>Continuous Deployment</strong> - automatické nasazení</li><li><strong>Version control triggering</strong> - spuštění na commit/merge</li></ul><div><br></div><div><strong>Nástroje:</strong></div><ul><li>Jenkins, GitLab CI, GitHub Actions</li><li>Docker pro kontejnerizaci</li><li>Ansible, Terraform pro infrastructure as code</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Automatizovaný workflow</li><li>Rychlé zpětná vazba</li><li>Konzistentní kvalita</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Komplexní konfigurace</li><li>Závislost na nástrojích</li><li>Možné bottle necks v pipeline</li></ul></div>"

6. Nasazení aplikace - Produkční vs vývojové prostředí	"<div><strong>Produkční vs vývojové prostředí</strong></div><div><br></div><div><strong>Vývojové prostředí (Development):</strong></div><ul><li><strong>Účel</strong> - vývoj a testování funkcí</li><li><strong>Data</strong> - testovací, anonymizovaná data</li><li><strong>Performance</strong> - nižší priority</li><li><strong>Monitoring</strong> - základní logování</li><li><strong>Security</strong> - relaxovanější pravidla</li></ul><div><br></div><div><strong>Produkční prostředí (Production):</strong></div><ul><li><strong>Účel</strong> - live aplikace pro koncové uživatele</li><li><strong>Data</strong> - reálná data s vysokou ochranou</li><li><strong>Performance</strong> - optimalizováno pro rychlost</li><li><strong>Monitoring</strong> - 24/7 monitoring a alerting</li><li><strong>Security</strong> - maximální bezpečnostní opatření</li></ul><div><br></div><div><strong>Další prostředí:</strong></div><ul><li><strong>Staging</strong> - kopie produkce pro finální testování</li><li><strong>Testing/QA</strong> - automatizované testování</li><li><strong>Integration</strong> - testování integrace komponent</li></ul><div><br></div><div><strong>Parity principy:</strong></div><ul><li>Stejné technologie napříč prostředími</li><li>Automatizovaná konfigurace</li><li>Minimalizace rozdílů mezi prostředími</li></ul></div>"

6. Nasazení aplikace - PaaS platformy	"<div><strong>Platform as a Service (PaaS) platformy</strong></div><div><br></div><div><strong>Nejběžnější PaaS platformy:</strong></div><ul><li><strong>Heroku</strong> - jednoduchý deployment, Git-based</li><li><strong>AWS Elastic Beanstalk</strong> - managed service od AWS</li><li><strong>Google App Engine</strong> - serverless PaaS od Google</li><li><strong>Microsoft Azure App Service</strong> - PaaS pro .NET a další</li><li><strong>Vercel</strong> - optimalizováno pro frontend a JAMstack</li></ul><div><br></div><div><strong>Výhody PaaS:</strong></div><ul><li>Rychlé nasazení (git push deploy)</li><li>Automatické škálování</li><li>Managed infrastructure</li><li>Vestavěné monitoring a logging</li><li>Add-on ekosystém (databáze, cache)</li></ul><div><br></div><div><strong>Nevýhody PaaS:</strong></div><ul><li>Vendor lock-in</li><li>Omezená konfigurace</li><li>Potenciálně vyšší náklady</li><li>Dependence na platformě</li></ul><div><br></div><div><strong>Typický PaaS workflow:</strong></div><div>git add . → git commit → git push heroku main → automatické nasazení</div></div>"

6. Nasazení aplikace - Nástroje pro podporu nasazení	"<div><strong>Nástroje pro podporu nasazení</strong></div><div><br></div><div><strong>CI/CD nástroje:</strong></div><ul><li><strong>Jenkins</strong> - open-source automation server</li><li><strong>GitLab CI</strong> - integrované s GitLab</li><li><strong>GitHub Actions</strong> - native GitHub CI/CD</li><li><strong>Azure DevOps</strong> - Microsoft DevOps suite</li></ul><div><br></div><div><strong>Kontejnerizace:</strong></div><ul><li><strong>Docker</strong> - kontejnerizace aplikací</li><li><strong>Kubernetes</strong> - orchestrace kontejnerů</li><li><strong>Docker Compose</strong> - multi-container aplikace</li></ul><div><br></div><div><strong>Infrastructure as Code:</strong></div><ul><li><strong>Terraform</strong> - multi-cloud provisioning</li><li><strong>Ansible</strong> - configuration management</li><li><strong>CloudFormation</strong> - AWS native IaC</li></ul><div><br></div><div><strong>Monitoring a Logging:</strong></div><ul><li><strong>Prometheus + Grafana</strong> - metrics a dashboards</li><li><strong>ELK Stack</strong> - Elasticsearch, Logstash, Kibana</li><li><strong>New Relic, Datadog</strong> - APM nástroje</li></ul><div><br></div><div><strong>Package management:</strong></div><ul><li>Docker Registry, npm, Maven, NuGet</li></ul></div>"

6. Nasazení aplikace - Deployment strategie	"<div><strong>Deployment strategie</strong></div><div><br></div><div><strong>Blue-Green Deployment:</strong></div><ul><li>Dva identické prostředí (Blue a Green)</li><li>Nasazení do neaktivního prostředí</li><li>Okamžité přepnutí provozu</li><li>Rychlý rollback přepnutím zpět</li></ul><div><br></div><div><strong>Rolling Deployment:</strong></div><ul><li>Postupná výměna instancí aplikace</li><li>Část kapacity stále dostupná</li><li>Nižší nároky na infrastrukturu</li><li>Pomalejší rollback</li></ul><div><br></div><div><strong>Canary Deployment:</strong></div><ul><li>Nasazení na malou část uživatelů</li><li>Postupné zvyšování procentuálního rozdělení</li><li>A/B testing možnosti</li><li>Rychlé zastavení při problémech</li></ul><div><br></div><div><strong>Recreate Deployment:</strong></div><ul><li>Zastavení všech instancí a nasazení nových</li><li>Krátký downtime</li><li>Jednoduché na implementaci</li><li>Vhodné pro dev prostředí</li></ul><div><br></div><div><strong>Výběr strategie závisí na:</strong></div><ul><li>Tolerance downtime</li><li>Dostupné zdroje</li><li>Kritičnost aplikace</li><li>Komplexnost rollback</li></ul></div>"

6. Nasazení aplikace - DevOps a automatizace	"<div><strong>DevOps a automatizace nasazení</strong></div><div><br></div><div><strong>DevOps principy:</strong></div><ul><li><strong>Collaboration</strong> - spolupráce Dev a Ops týmů</li><li><strong>Automation</strong> - automatizace repetitivních úkolů</li><li><strong>Continuous Integration/Deployment</strong></li><li><strong>Infrastructure as Code</strong> - verzování infrastruktury</li></ul><div><br></div><div><strong>Automatizace benefits:</strong></div><ul><li>Snížení human error</li><li>Rychlejší deployment</li><li>Konzistentní prostředí</li><li>Lepší auditovatelnost</li><li>Škálovatelnost procesů</li></ul><div><br></div><div><strong>GitOps workflow:</strong></div><ul><li>Git jako single source of truth</li><li>Declarative configuration</li><li>Automated synchronization</li><li>Pull-based deployment</li></ul><div><br></div><div><strong>Monitoring a observability:</strong></div><ul><li><strong>Metrics</strong> - výkonnostní data</li><li><strong>Logs</strong> - application a system logy</li><li><strong>Traces</strong> - distributed tracing</li><li><strong>Alerts</strong> - proaktivní upozornění</li></ul><div><br></div><div><strong>Security v DevOps (DevSecOps):</strong></div><ul><li>Security scanning v CI/CD</li><li>Vulnerability management</li><li>Secret management</li><li>Compliance automation</li></ul></div>"

6. Nasazení aplikace - Containerizace a orchestrace	"<div><strong>Containerizace a orchestrace</strong></div><div><br></div><div><strong>Docker kontejnery:</strong></div><ul><li><strong>Isolation</strong> - izolované runtime prostředí</li><li><strong>Portability</strong> - běží všude stejně</li><li><strong>Lightweight</strong> - sdílejí OS kernel</li><li><strong>Dockerfile</strong> - deklarativní definice prostředí</li></ul><div><br></div><div><strong>Container orchestrace:</strong></div><ul><li><strong>Kubernetes</strong> - de facto standard</li><li><strong>Docker Swarm</strong> - jednodušší alternativa</li><li><strong>Amazon ECS</strong> - AWS managed orchestration</li><li><strong>Azure Container Instances</strong> - serverless containers</li></ul><div><br></div><div><strong>Kubernetes výhody:</strong></div><ul><li>Auto-scaling pods</li><li>Service discovery</li><li>Load balancing</li><li>Rolling updates</li><li>Self-healing (restart failed containers)</li></ul><div><br></div><div><strong>Deployment na Kubernetes:</strong></div><ul><li><strong>Pods</strong> - základní deployment unit</li><li><strong>Services</strong> - networking a load balancing</li><li><strong>Ingress</strong> - external access</li><li><strong>ConfigMaps/Secrets</strong> - konfigurace</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Komplexní learning curve</li><li>Resource overhead</li><li>Networking complexity</li><li>Troubleshooting difficulty</li></ul></div>"