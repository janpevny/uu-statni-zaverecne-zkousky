2. Komunikace aplikací - Základy REST	"<div><strong>REST (Representational State Transfer)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Architektonický styl pro návrh webových služeb založený na HTTP protokolu a bezstavové komunikaci</div><div><br></div><div><strong>Základní principy REST:</strong></div><ol><li><strong>Stateless</strong> - každý požadavek obsahuje vše potřebné</li><li><strong>Client-Server</strong> - oddělení klienta a serveru</li><li><strong>Cacheable</strong> - odpovědi mohou být cachovány</li><li><strong>Uniform Interface</strong> - jednotné rozhraní</li><li><strong>Layered System</strong> - vrstvená architektura</li><li><strong>Code on Demand</strong> (volitelný) - server může poslat kód</li></ol><div><br></div><div><strong>HTTP metody:</strong></div><ul><li><strong>GET</strong> - získání dat (idempotentní)</li><li><strong>POST</strong> - vytvoření nového zdroje</li><li><strong>PUT</strong> - aktualizace/vytvoření zdroje (idempotentní)</li><li><strong>DELETE</strong> - smazání zdroje (idempotentní)</li><li><strong>PATCH</strong> - částečná aktualizace</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Jednoduchost a srozumitelnost</li><li>Škálovatelnost</li><li>Cachování</li><li>Nezávislost na platformě</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Stateless může být neefektivní</li><li>Omezené na HTTP protokol</li><li>Overfetching/underfetching dat</li><li>Složitější pro komplexní operace</li></ul></div>"

2. Komunikace aplikací - JSON	"<div><strong>JSON (JavaScript Object Notation)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Lehký, textový formát pro výměnu dat, založený na JavaScript syntaxi, ale nezávislý na jazyce</div><div><br></div><div><strong>Struktura:</strong></div><ul><li><strong>Objekty</strong> - {} s key-value páry</li><li><strong>Pole</strong> - [] s hodnotami</li><li><strong>Hodnoty</strong> - string, number, boolean, null, object, array</li></ul><div><br></div><div><strong>Příklad:</strong></div><div><code>{<br>&nbsp;&nbsp;"name": "Jan Novák",<br>&nbsp;&nbsp;"age": 25,<br>&nbsp;&nbsp;"skills": ["Java", "Python"],<br>&nbsp;&nbsp;"active": true<br>}</code></div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Lehký a kompaktní</li><li>Snadné parsování</li><li>Široká podpora v programovacích jazycích</li><li>Čitelný pro člověka</li><li>Nativní podpora v JavaScriptu</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Omezené datové typy</li><li>Žádné komentáře</li><li>Žádná validace schématu (bez dodatečných nástrojů)</li><li>Bezpečnostní rizika při eval()</li><li>Větší než binární formáty</li></ul><div><br></div><div><strong>Použití:</strong> REST API, konfigurace, NoSQL databáze</div></div>"

2. Komunikace aplikací - XML	"<div><strong>XML (eXtensible Markup Language)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Markup jazyk pro strukturování a ukládání dat s vlastními definovanými tagy</div><div><br></div><div><strong>Struktura:</strong></div><ul><li><strong>Elementy</strong> - &lt;tag&gt;obsah&lt;/tag&gt;</li><li><strong>Atributy</strong> - &lt;tag attribute="value"&gt;</li><li><strong>Namespaces</strong> - předcházení konfliktům tagů</li><li><strong>Hierarchická struktura</strong> - vnořené elementy</li></ul><div><br></div><div><strong>Příklad:</strong></div><div><code>&lt;person&gt;<br>&nbsp;&nbsp;&lt;name&gt;Jan Novák&lt;/name&gt;<br>&nbsp;&nbsp;&lt;age&gt;25&lt;/age&gt;<br>&nbsp;&nbsp;&lt;skills&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;skill&gt;Java&lt;/skill&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;skill&gt;Python&lt;/skill&gt;<br>&nbsp;&nbsp;&lt;/skills&gt;<br>&lt;/person&gt;</code></div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Self-describing struktura</li><li>Schema validace (XSD, DTD)</li><li>Podpora namespaces</li><li>Množství nástrojů a standardů</li><li>Flexibilní struktura</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Verbose - více textu než dat</li><li>Pomalejší parsování</li><li>Větší velikost souborů</li><li>Složitější syntaxe</li><li>Méně lidsky čitelný</li></ul><div><br></div><div><strong>Použití:</strong> SOAP webové služby, konfigurace, dokumenty</div></div>"

2. Komunikace aplikací - CSV	"<div><strong>CSV (Comma-Separated Values)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Jednoduchý textový formát pro ukládání tabulkových dat, kde jsou hodnoty odděleny čárkami</div><div><br></div><div><strong>Struktura:</strong></div><ul><li><strong>Řádky</strong> - jednotlivé záznamy</li><li><strong>Sloupce</strong> - oddělené čárkami (nebo jiným oddělovačem)</li><li><strong>Header</strong> - první řádek s názvy sloupců</li><li><strong>Escape znaky</strong> - uvozovky pro hodnoty s čárkami</li></ul><div><br></div><div><strong>Příklad:</strong></div><div><code>name,age,city<br>Jan Novák,25,Praha<br>Marie Svobodová,30,Brno<br>"Petr Dvořák, Jr.",28,"Ostrava, Moravskoslezský"</code></div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Extrémně jednoduchý formát</li><li>Malá velikost souborů</li><li>Široká podpora (Excel, databáze)</li><li>Snadné parsování</li><li>Lidsky čitelný</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Pouze tabulková data</li><li>Žádné datové typy</li><li>Problémy s oddělovači v datech</li><li>Žádná hierarchická struktura</li><li>Žádná standardizace (různé dialekty)</li><li>Problematické encoding</li></ul><div><br></div><div><strong>Použití:</strong> Export/import dat, analýza dat, reporty</div></div>

2. Komunikace aplikací - Porovnání formátů	"<div><strong>Porovnání datových formátů</strong></div><div><br></div><div><strong>JSON vs XML:</strong></div><ul><li><strong>JSON</strong>: kompaktnější, rychlejší parsing, nativní JavaScript podpora</li><li><strong>XML</strong>: validace schématem, XSLT transformace, podpora atributů a namespaces</li></ul><div><br></div><div><strong>Kdy použít který formát:</strong></div><ul><li><strong>JSON</strong>: moderní REST API, webové aplikace, mobilní aplikace, NoSQL databáze</li><li><strong>XML</strong>: SOAP služby, konfigurace, dokumenty s komplexní strukturou, systémy vyžadující validaci</li><li><strong>CSV</strong>: jednoduché tabulkové exporty, datová analýza, migrace dat mezi systémy</li></ul><div><br></div><div><strong>Výkonnostní aspekty:</strong></div><ul><li><strong>Velikost</strong>: CSV &lt; JSON &lt; XML (typicky)</li><li><strong>Rychlost parsování</strong>: CSV nejrychlejší pro tabulková data, JSON rychlejší než XML</li><li><strong>Paměťová náročnost</strong>: závisí na implementaci parseru a struktuře dat</li></ul><div><br></div><div><strong>Výhody porovnání:</strong></div><ul><li>Pomáhá vybrat správný formát pro konkrétní použití</li><li>Optimalizace výkonu aplikace</li><li>Lepší kompatibilita se systémy</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Potřeba znalosti více formátů</li><li>Složitější rozhodování</li><li>Možné nekonzistence mezi formáty</li></ul></div>"

2. Komunikace aplikací - Praktické aspekty komunikace	"<div><strong>Praktické aspekty komunikace aplikací</strong></div><div><br></div><div><strong>Serializace a deserializace:</strong></div><ul><li>Převod objektů na přenositelný formát a zpět</li><li><strong>Knihovny</strong>: Jackson (Java), Newtonsoft.Json (.NET), json (Python)</li><li>Mapování mezi objekty a datovými formáty</li></ul><div><br></div><div><strong>Zabezpečení:</strong></div><ul><li><strong>Validace vstupů</strong> proti injection útokům</li><li><strong>HTTPS</strong> pro šifrovaný přenos</li><li><strong>Autentizace a autorizace</strong> (OAuth, JWT tokeny)</li><li>Omezení velikosti požadavků</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Konzistentní pojmenování (camelCase vs snake_case)</li><li>Verzování API pro zpětnou kompatibilitu</li><li>Proper error handling s informativními chybovými zprávami</li><li>Dokumentace API (OpenAPI/Swagger)</li><li>Implementace CORS pro webové aplikace</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Bezpečná a efektivní komunikace</li><li>Lepší maintainability kódu</li><li>Standardizované postupy</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Zvýšená komplexita implementace</li><li>Potřeba více znalostí a nástrojů</li><li>Vyšší nároky na testování</li></ul></div>"