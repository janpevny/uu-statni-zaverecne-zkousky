8. Objektově orientovaná analýza a návrh - Základní principy OOP	"<div><strong>Základní principy objektově orientovaného programování</strong></div><div><br></div><ul><li><strong>Zapouzdření</strong> - skrývání vnitřní implementace objektu, přístup pouze přes definované rozhraní</li><li><strong>Dědičnost</strong> - vytváření nových tříd na základě existujících, přebírání vlastností a metod</li><li><strong>Polymorfismus</strong> - schopnost objektů různých typů reagovat na stejné zprávy různým způsobem</li><li><strong>Abstrakce</strong> - zaměření na podstatné vlastnosti a ignorování nepodstatných detailů</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Opakovaná použitelnost kódu</li><li>Lepší organizace a struktura</li><li>Snadnější údržba a rozšíření</li></ul>"

8. Objektově orientovaná analýza a návrh - Základní terminologie	"<div><strong>Klíčové pojmy objektové orientace</strong></div><div><br></div><ul><li><strong>Objekt</strong> - instance třídy, konkrétní entita s daty a chováním</li><li><strong>Třída</strong> - šablona/vzor pro vytváření objektů, definuje atributy a metody</li><li><strong>Atribut</strong> - data objektu, vlastnosti charakterizující stav</li><li><strong>Metoda</strong> - funkce/operace, kterou objekt umí provést</li><li><strong>Rozhraní</strong> - kontrakt definující sadu metod bez implementace</li></ul><div><br></div><div><strong>Vztahy:</strong></div><ul><li><strong>Asociace</strong> - vztah mezi objekty</li><li><strong>Agregace/Kompozice</strong> - vztah část-celek</li><li><strong>Generalizace/Specializace</strong> - vztah obecné-specifické</li></ul>"

8. Objektově orientovaná analýza a návrh - UML diagramy struktur	"<div><strong>Strukturální UML diagramy</strong></div><div><br></div><ul><li><strong>Diagram tříd</strong> - zobrazuje třídy, atributy, metody a vztahy mezi třídami</li><li><strong>Diagram objektů</strong> - instance tříd v konkrétním čase</li><li><strong>Diagram komponent</strong> - organizace a závislosti mezi komponentami</li><li><strong>Diagram nasazení</strong> - fyzické rozmístění komponent na uzlech</li></ul><div><br></div><div><strong>Notace tříd:</strong></div><ul><li><strong>+</strong> public, <strong>-</strong> private, <strong>#</strong> protected</li><li><strong>Vztahy:</strong> asociace (čára), dědičnost (šipka), kompozice (plný kosočtverec)</li></ul>"

8. Objektově orientovaná analýza a návrh - UML diagramy chování	"<div><strong>Behaviorální UML diagramy</strong></div><div><br></div><ul><li><strong>Diagram případů užití</strong> - interakce mezi aktéry a systémem</li><li><strong>Sekvenční diagram</strong> - časový průběh komunikace mezi objekty</li><li><strong>Diagram aktivit</strong> - tok aktivit a rozhodování</li><li><strong>Stavový diagram</strong> - stavy objektu a přechody mezi nimi</li></ul><div><br></div><div><strong>Praktické využití:</strong></div><ul><li>Dokumentace návrhu</li><li>Komunikace v týmu</li><li>Generování kódu</li><li>Zpětné inženýrství</li></ul>"

8. Objektově orientovaná analýza a návrh - Analýza vs návrh	"<div><strong>Objektově orientovaná analýza (OOA)</strong></div><div><br></div><ul><li><strong>Co systém dělá</strong> - identifikace požadavků a funkcionality</li><li><strong>Doménový model</strong> - konceptuální třídy z problémové domény</li><li><strong>Případy užití</strong> - funkcionalita z pohledu uživatele</li></ul><div><br></div><div><strong>Objektově orientovaný návrh (OOD)</strong></div><div><br></div><ul><li><strong>Jak systém funguje</strong> - technické řešení implementace</li><li><strong>Návrhové třídy</strong> - softwarové třídy s implementačními detaily</li><li><strong>Architekttura</strong> - vzory, frameworks, technologie</li></ul>"

8. Objektově orientovaná analýza a návrh - FURPS+ kategorie	"<div><strong>FURPS+ kategorizace požadavků</strong></div><div><br></div><div><strong>Funkční požadavky (F):</strong></div><ul><li>Co systém umí dělat - features, capabilities, security</li></ul><div><br></div><div><strong>Nefunkční požadavky:</strong></div><ul><li><strong>Usability (U)</strong> - použitelnost, uživatelské rozhraní</li><li><strong>Reliability (R)</strong> - spolehlivost, dostupnost, odolnost proti chybám</li><li><strong>Performance (P)</strong> - výkon, rychlost odezvy, propustnost</li><li><strong>Supportability (S)</strong> - udržovatelnost, testovatelnost, konfigurovatelnost</li></ul><div><br></div><div><strong>Rozšíření (+):</strong></div><ul><li>Implementační, rozhraní, fyzické, licenční omezení</li></ul>"

8. Objektově orientovaná analýza a návrh - Návrhové vzory	"<div><strong>Návrhové vzory (Design Patterns)</strong></div><div><br></div><div><strong>Kreační vzory:</strong></div><ul><li><strong>Singleton</strong> - jedna instance třídy</li><li><strong>Factory Method</strong> - vytváření objektů přes rozhraní</li><li><strong>Builder</strong> - postupné vytváření složitých objektů</li></ul><div><br></div><div><strong>Strukturální vzory:</strong></div><ul><li><strong>Adapter</strong> - propojení nekompatibilních rozhraní</li><li><strong>Decorator</strong> - dynamické přidávání funkcionality</li></ul><div><br></div><div><strong>Behaviorální vzory:</strong></div><ul><li><strong>Observer</strong> - notifikace o změnách stavu</li><li><strong>Strategy</strong> - výměnné algoritmy</li></ul>"

8. Objektově orientovaná analýza a návrh - SOLID principy	"<div><strong>SOLID principy objektového návrhu</strong></div><div><br></div><ul><li><strong>S - Single Responsibility</strong> - jedna třída má jeden důvod ke změně</li><li><strong>O - Open/Closed</strong> - otevřené pro rozšíření, uzavřené pro modifikaci</li><li><strong>L - Liskov Substitution</strong> - objekty lze nahradit instancemi podtříd</li><li><strong>I - Interface Segregation</strong> - více specifických rozhraní než jedno obecné</li><li><strong>D - Dependency Inversion</strong> - závislost na abstrakcích, ne konkrétních třídách</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Lepší udržovatelnost kódu</li><li>Snazší testování</li><li>Flexibilnější architektura</li></ul>"