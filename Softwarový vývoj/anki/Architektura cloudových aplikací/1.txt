1. Architektura informačních systémů - Třívrstvá architektura	"<div><strong>Třívrstvá architektura (3-tier architecture)</strong></div><div><br></div><div><strong>Struktura:</strong></div><ol><li><strong>Prezentační vrstva</strong> (Presentation Layer) - uživatelské rozhraní, zobrazení dat</li><li><strong>Aplikační/logická vrstva</strong> (Business Logic Layer) - zpracování obchodní logiky</li><li><strong>Datová vrstva</strong> (Data Layer) - ukládání a správa dat</li></ol><div><br></div><div><strong>Výhody:</strong></div><ul><li>Oddělení zodpovědností</li><li>Snadnější údržba a testování</li><li>Možnost nezávislého vývoje jednotlivých vrstev</li><li>Lepší škálovatelnost</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Zvýšená latence při komunikaci mezi vrstvami</li><li>Složitější návrh pro malé aplikace</li><li>Možná redundance dat mezi vrstvami</li><li>Vyšší nároky na infrastrukturu</li></ul><div><br></div><div><strong>Příklad:</strong> Webová aplikace s HTML/CSS (prezentace), API server (logika), databáze (data)</div></div>"

1. Architektura informačních systémů - Architektura MVC	"<div><strong>Model-View-Controller (MVC)</strong></div><div><br></div><div><strong>Komponenty:</strong></div><ul><li><strong>Model</strong> - reprezentace dat a obchodní logika</li><li><strong>View</strong> - prezentace dat uživateli (UI)</li><li><strong>Controller</strong> - zpracování uživatelských vstupů, koordinace mezi Model a View</li></ul><div><br></div><div><strong>Tok dat:</strong></div><div>Uživatel → Controller → Model → View → Uživatel</div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Oddělení prezentační logiky od obchodní logiky</li><li>Znovupoužitelnost kódu</li><li>Paralelní vývoj komponent</li><li>Snadnější testování</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Může být overkill pro jednoduché aplikace</li><li>Složitější pro začátečníky</li><li>Možná duplicita kódu mezi View a Controller</li><li>Těsné propojení mezi komponentami</li></ul><div><br></div><div><strong>Příklady frameworků:</strong> Spring MVC, ASP.NET MVC, Ruby on Rails, Laravel</div></div>"

1. Architektura informačních systémů - Architektura cloudových aplikací	"<div><strong>Architektura cloudových aplikací</strong></div><div><br></div><div><strong>Klíčové principy:</strong></div><ul><li><strong>Horizontální škálovatelnost</strong> - přidávání instancí</li><li><strong>Stateless design</strong> - aplikace neudržuje stav mezi požadavky</li><li><strong>Auto-scaling</strong> - automatické přizpůsobování zdrojů</li><li><strong>Load balancing</strong> - distribuce zátěže</li></ul><div><br></div><div><strong>Typické komponenty:</strong></div><ul><li>Load Balancer</li><li>Application Servers (multiple instances)</li><li>Databáze (často managed services)</li><li>CDN (Content Delivery Network)</li><li>Cache (Redis, Memcached)</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Vysoká dostupnost</li><li>Elasticita</li><li>Cost efficiency</li><li>Globální dosah</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Závislost na internetovém připojení</li><li>Vendor lock-in riziko</li><li>Bezpečnostní obavy (data v cloudu)</li><li>Složitější monitoring a debugging</li><li>Možné vyšší dlouhodobé náklady</li></ul></div>"

1. Architektura informačních systémů - Rozdělení frontendu a backendu	"<div><strong>Frontend vs Backend oddělení</strong></div><div><br></div><div><strong>Frontend:</strong></div><ul><li>Klientská strana aplikace</li><li>Uživatelské rozhraní a interakce</li><li>Běží v prohlížeči nebo mobilní aplikaci</li><li>Technologie: HTML, CSS, JavaScript, React, Vue, Angular</li></ul><div><br></div><div><strong>Backend:</strong></div><ul><li>Serverová strana aplikace</li><li>Obchodní logika, databázové operace</li><li>API endpoints</li><li>Technologie: Java, Python, Node.js, .NET, PHP</li></ul><div><br></div><div><strong>Komunikace:</strong></div><ul><li>REST API</li><li>GraphQL</li><li>WebSocket (real-time komunikace)</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Nezávislý vývoj týmů</li><li>Různé technologie pro různé potřeby</li><li>Lepší škálovatelnost</li><li>Možnost více frontend aplikací pro jeden backend</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Zvýšená síťová komunikace</li><li>Složitější deployment a koordinace</li><li>Potřeba API versioning</li><li>Možné problémy s CORS</li><li>Duplikace logiky (validace na obou stranách)</li></ul></div>"

1. Architektura informačních systémů - Microservices	"<div><strong>Microservices architektura</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Architektonický přístup, kde se aplikace skládá z malých, nezávislých služeb komunikujících přes well-defined API</div><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li>Každý microservice má vlastní databázi</li><li>Nezávislé nasazení (deployment)</li><li>Decentralizované řízení</li><li>Komunikace přes síť (HTTP, messaging)</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Nezávislý vývoj a nasazení</li><li>Technologická diverzita</li><li>Lepší fault tolerance</li><li>Snadnější škálování jednotlivých služeb</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Komplexita komunikace</li><li>Network latency</li><li>Data consistency challenges</li><li>Monitoring a debugging</li><li>Výkon - více síťových volání</li><li>Distributed transactions problematika</li></ul><div><br></div><div><strong>Nástroje:</strong> Docker, Kubernetes, Spring Boot, Netflix OSS</div></div>"

1. Architektura informačních systémů - Typická topologie cloudové aplikace	"<div><strong>Typická topologie cloudové aplikace</strong></div><div><br></div><div><strong>Základní komponenty:</strong></div><ol><li><strong>CDN</strong> - globální distribuce statického obsahu</li><li><strong>Load Balancer</strong> - distribuce požadavků</li><li><strong>Web/App Servers</strong> - aplikační vrstva (auto-scaling group)</li><li><strong>Database</strong> - primární databáze (často managed service)</li><li><strong>Cache</strong> - in-memory cache (Redis/ElastiCache)</li><li><strong>Queue/Message Broker</strong> - asynchronní zpracování</li></ol><div><br></div><div><strong>Dodatečné služby:</strong></div><ul><li><strong>Monitoring</strong> - CloudWatch, Prometheus</li><li><strong>Logging</strong> - centralizované logování</li><li><strong>Security</strong> - WAF, Security Groups</li><li><strong>Backup</strong> - automatické zálohování</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Vysoká dostupnost</li><li>Škálovatelnost</li><li>Bezpečnost</li><li>Managed services snižují ops overhead</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Složitost konfigurace</li><li>Vendor lock-in</li><li>Náklady na multiple služby</li><li>Potřeba expertních znalostí</li><li>Možné single points of failure</li></ul><div><br></div><div><strong>Příklad AWS architektury:</strong></div><div>CloudFront → ALB → EC2 instances → RDS → ElastiCache</div></div>"