14. Bitové operace a hashování - Základní bitové operace	"<div><strong>Základní bitové operace</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Operace prováděné na úrovni jednotlivých bitů v binární reprezentaci čísel</div><div><br></div><div><strong>Základní operátory:</strong></div><ul><li><strong>AND (&)</strong> - 1 pokud oba bity jsou 1</li><li><strong>OR (|)</strong> - 1 pokud alespoň jeden bit je 1</li><li><strong>XOR (^)</strong> - 1 pokud bity jsou různé</li><li><strong>NOT (~)</strong> - invertuje všechny bity</li><li><strong>Left shift (<<)</strong> - posunutí bitů doleva</li><li><strong>Right shift (>>)</strong> - posunutí bitů doprava</li></ul><div><br></div><div><strong>Praktické využití:</strong></div><ul><li>Optimalizace výkonu (rychlejší než aritmetické operace)</li><li>Práce s flagy a maskami</li><li>Kryptografie a hashování</li><li>Embedded programování</li></ul><div><br></div><div><strong>Příklady:</strong></div><div>5 & 3 = 1 (0101 & 0011 = 0001)<br>5 | 3 = 7 (0101 | 0011 = 0111)<br>5 << 1 = 10 (násobení 2)</div></div>"

14. Bitové operace a hashování - Bitové masky a flagy	"<div><strong>Bitové masky a flagy</strong></div><div><br></div><div><strong>Bitové masky:</strong></div><div>Vzory bitů používané k extrakci, nastavení nebo otestování konkrétních bitů</div><div><br></div><div><strong>Operace s flagy:</strong></div><ul><li><strong>Nastavení flagu:</strong> value |= flag</li><li><strong>Vypnutí flagu:</strong> value &= ~flag</li><li><strong>Testování flagu:</strong> (value & flag) != 0</li><li><strong>Toggle flagu:</strong> value ^= flag</li></ul><div><br></div><div><strong>Praktické aplikace:</strong></div><ul><li><strong>Permissions systémy</strong> - read(4), write(2), execute(1)</li><li><strong>Feature flags</strong> - zapnutí/vypnutí funkcí</li><li><strong>Optimalizace paměti</strong> - ukládání více boolean hodnot</li><li><strong>Graphics programming</strong> - pixel manipulace</li></ul><div><br></div><div><strong>Příklad permissions:</strong></div><div>rwx = 111 (7), r-x = 101 (5), rw- = 110 (6)</div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Rychlé operace</li><li>Úspora paměti</li><li>Atomické operace</li></ul></div>"

14. Bitové operace a hashování - Binární reprezentace čísel	"<div><strong>Binární reprezentace čísel</strong></div><div><br></div><div><strong>Pozitivní čísla:</strong></div><div>Přímá konverze do binárního systému (base 2)</div><div>Příklad: 13 = 1101₂ (8 + 4 + 1)</div><div><br></div><div><strong>Záporná čísla - Two's complement:</strong></div><ol><li>Invertuj všechny bity (one's complement)</li><li>Přičti 1 k výsledku</li></ol><div>Příklad: -5 = ~(0101) + 1 = 1010 + 1 = 1011</div><div><br></div><div><strong>Výhody Two's complement:</strong></div><ul><li>Jediná reprezentace nuly</li><li>Snadná aritmetika (sčítání funguje stejně)</li><li>Přirozené porovnávání</li></ul><div><br></div><div><strong>Datové typy:</strong></div><ul><li><strong>8-bit:</strong> -128 až 127 (signed), 0 až 255 (unsigned)</li><li><strong>16-bit:</strong> -32768 až 32767 (signed)</li><li><strong>32-bit:</strong> ~-2.1B až ~2.1B (signed)</li></ul><div><br></div><div><strong>Endianness:</strong></div><ul><li><strong>Big-endian:</strong> nejvyšší byte první</li><li><strong>Little-endian:</strong> nejnižší byte první</li></ul></div>"

14. Bitové operace a hashování - Hashování základy	"<div><strong>Hashování - základní principy</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Proces převodu dat libovolné velikosti na hodnotu fixní délky (hash/digest)</div><div><br></div><div><strong>Vlastnosti hash funkcí:</strong></div><ul><li><strong>Deterministické</strong> - stejný vstup = stejný výstup</li><li><strong>Rychlé výpočty</strong></li><li><strong>Avalanche effect</strong> - malá změna = velká změna hashe</li><li><strong>Uniform distribution</strong> - rovnoměrné rozložení</li></ul><div><br></div><div><strong>Typy hash funkcí:</strong></div><ul><li><strong>Kryptografické</strong> - SHA-256, SHA-3, MD5 (deprecated)</li><li><strong>Non-kryptografické</strong> - CRC32, MurmurHash, xxHash</li></ul><div><br></div><div><strong>Využití:</strong></div><ul><li>Hash tables/maps</li><li>Integrity checking</li><li>Password storage</li><li>Digital signatures</li><li>Blockchain</li></ul><div><br></div><div><strong>Kolize:</strong></div><div>Situace kdy dva různé vstupy mají stejný hash<br>Řešení: chaining, open addressing</div></div>"

14. Bitové operace a hashování - Hash tabulky	"<div><strong>Hash tabulky (Hash tables)</strong></div><div><br></div><div><strong>Princip:</strong></div><div>Datová struktura mapující klíče na hodnoty pomocí hash funkce pro rychlý přístup</div><div><br></div><div><strong>Struktura:</strong></div><ul><li><strong>Array</strong> - základní úložiště</li><li><strong>Hash funkce</strong> - převod klíče na index</li><li><strong>Collision handling</strong> - řešení kolizí</li></ul><div><br></div><div><strong>Řešení kolizí:</strong></div><ul><li><strong>Separate chaining</strong> - linked list na každé pozici</li><li><strong>Open addressing</strong> - hledání další volné pozice<br>- Linear probing<br>- Quadratic probing<br>- Double hashing</li></ul><div><br></div><div><strong>Složitost:</strong></div><ul><li><strong>Průměrný čas:</strong> O(1) pro search, insert, delete</li><li><strong>Nejhorší čas:</strong> O(n) při mnoha kolizích</li></ul><div><br></div><div><strong>Load factor:</strong></div><div>α = n/m (počet prvků / velikost tabulky)<br>Optimální: 0.7-0.8, pak resize</div><div><br></div><div><strong>Implementace:</strong> HashMap (Java), dict (Python), Map (JavaScript)</div></div>"

14. Bitové operace a hashování - Hashování hesel	"<div><strong>Hashování hesel</strong></div><div><br></div><div><strong>Problém:</strong></div><div>Bezpečné ukládání hesel bez možnosti jejich obnovy</div><div><br></div><div><strong>Požadavky na hash funkce:</strong></div><ul><li><strong>Pomalé</strong> - odolné proti brute force</li><li><strong>Salt</strong> - unikátní hodnota proti rainbow tables</li><li><strong>Memory-hard</strong> - vysoké nároky na paměť</li><li><strong>Adjustable cost</strong> - možnost zvýšit složitost</li></ul><div><br></div><div><strong>Doporučené algoritmy:</strong></div><ul><li><strong>bcrypt</strong> - založeno na Blowfish</li><li><strong>scrypt</strong> - memory-hard funkce</li><li><strong>Argon2</strong> - vítěz Password Hashing Competition</li><li><strong>PBKDF2</strong> - iterativní derivace</li></ul><div><br></div><div><strong>Špatné praktiky:</strong></div><ul><li>MD5, SHA-1, SHA-256 (příliš rychlé)</li><li>Hashování bez salt</li><li>Používání stejného salt pro všechna hesla</li></ul><div><br></div><div><strong>Implementace:</strong></div><div>hash = bcrypt(password + salt, cost_factor)<br>verify = bcrypt(input_password + salt, cost_factor) == stored_hash</div></div>"

14. Bitové operace a hashování - Distribuované hashování	"<div><strong>Distribuované hashování</strong></div><div><br></div><div><strong>Consistent Hashing:</strong></div><div>Algoritmus pro distribuci dat mezi servery s minimálním přesunem při změnách</div><div><br></div><div><strong>Princip:</strong></div><ol><li>Hash ring (kruh 0 až 2³²-1)</li><li>Servery mapovány na pozice v kruhu</li><li>Data mapována na nejbližší server ve směru hodin</li><li>Při přidání/odebrání serveru se přesunou jen některá data</li></ol><div><br></div><div><strong>Výhody:</strong></div><ul><li>Minimální reorganizace dat</li><li>Škálovatelnost</li><li>Fault tolerance</li></ul><div><br></div><div><strong>Vylepšení:</strong></div><ul><li><strong>Virtual nodes</strong> - jeden server na více pozic</li><li><strong>Replication</strong> - data na N následujících serverech</li></ul><div><br></div><div><strong>Využití:</strong></div><ul><li>Distributed caching (Redis Cluster)</li><li>NoSQL databáze (Cassandra, DynamoDB)</li><li>CDN sítě</li><li>Load balancing</li></ul><div><br></div><div><strong>Alternativy:</strong> Rendezvous hashing, Jump consistent hash</div></div>"

14. Bitové operace a hashování - Bloom filter	"<div><strong>Bloom filter</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Probabilistická datová struktura pro testování příslušnosti k množině</div><div><br></div><div><strong>Princip:</strong></div><ol><li>Bit array velikosti m (počáteční hodnoty 0)</li><li>k různých hash funkcí</li><li>Insert: nastav k bitů na pozicích hash₁(x), hash₂(x),..., hashₖ(x)</li><li>Query: testuj zda všech k bitů je nastaveno na 1</li></ol><div><br></div><div><strong>Vlastnosti:</strong></div><ul><li><strong>False positives</strong> - možné (prvek možná není v množině)</li><li><strong>False negatives</strong> - nemožné (prvek určitě je v množině)</li><li><strong>No deletes</strong> - nelze mazat prvky</li></ul><div><br></div><div><strong>Parametry:</strong></div><div>Pravděpodobnost false positive: (1 - e^(-kn/m))^k<br>Optimální k = (m/n) * ln(2)</div><div><br></div><div><strong>Využití:</strong></div><ul><li>Web crawling (už navštívené URL)</li><li>Database query optimization</li><li>Network routing</li><li>Spam filtering</li></ul><div><br></div><div><strong>Varianty:</strong> Counting Bloom filter, Scalable Bloom filter</div></div>"