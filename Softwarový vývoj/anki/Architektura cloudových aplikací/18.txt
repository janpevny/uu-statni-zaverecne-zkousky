18. Pokročilá práce s kolekcemi - Základní kolekce a pole	"<div><strong>Pole a jejich vestavěné metody</strong></div><div><br></div><ul><li><strong>Array</strong> - základní kolekce s indexovaným přístupem</li><li><strong>Mutující metody</strong> - push(), pop(), shift(), unshift(), splice(), sort(), reverse()</li><li><strong>Nemutující metody</strong> - slice(), concat(), join(), indexOf(), includes()</li><li><strong>Iterační metody</strong> - forEach(), map(), filter(), reduce(), find(), some(), every()</li></ul><div><br></div><div><strong>Praktické příklady:</strong></div><ul><li><strong>Transformace</strong> - arr.map(x => x * 2)</li><li><strong>Filtrování</strong> - arr.filter(x => x > 10)</li><li><strong>Agregace</strong> - arr.reduce((sum, x) => sum + x, 0)</li></ul>"

18. Pokročilá práce s kolekcemi - Kolekce ES6	"<div><strong>Moderní kolekce v JavaScript</strong></div><div><br></div><ul><li><strong>Set</strong> - kolekce unikátních hodnot, rychlé vyhledávání</li><li><strong>Map</strong> - asociativní pole s libovolnými klíči</li><li><strong>WeakSet</strong> - slabé odkazy na objekty, garbage collection</li><li><strong>WeakMap</strong> - slabé odkazy klíčů, privátní vlastnosti</li></ul><div><br></div><div><strong>Set operace:</strong></div><ul><li><strong>Přidání</strong> - set.add(value)</li><li><strong>Kontrola</strong> - set.has(value)</li><li><strong>Smazání</strong> - set.delete(value)</li><li><strong>Iterace</strong> - for (let value of set)</li></ul><div><br></div><div><strong>Map operace:</strong></div><ul><li><strong>Nastavení</strong> - map.set(key, value)</li><li><strong>Získání</strong> - map.get(key)</li><li><strong>Iterace</strong> - for (let [key, value] of map)</li></ul>"

18. Pokročilá práce s kolekcemi - Objekty jako asociativní pole	"<div><strong>Objekty jako kolekce klíč-hodnota</strong></div><div><br></div><ul><li><strong>Object literal</strong> - {key: value} syntaxe</li><li><strong>Přístup k vlastnostem</strong> - obj.key nebo obj['key']</li><li><strong>Dynamické klíče</strong> - obj[variable] nebo obj[expression]</li><li><strong>Computed properties</strong> - {[key]: value}</li></ul><div><br></div><div><strong>Iterace přes objekty:</strong></div><ul><li><strong>Object.keys()</strong> - pole klíčů</li><li><strong>Object.values()</strong> - pole hodnot</li><li><strong>Object.entries()</strong> - pole [klíč, hodnota] párů</li><li><strong>for...in</strong> - iterace přes enumerable vlastnosti</li></ul><div><br></div><div><strong>Výhody Map vs Object:</strong></div><ul><li><strong>Map</strong> - libovolné klíče, velikost, lepší pro častou iteraci</li><li><strong>Object</strong> - lepší performance, JSON podpora, prototyp</li></ul>"

18. Pokročilá práce s kolekcemi - Immutabilita základy	"<div><strong>Immutabilita v JavaScript</strong></div><div><br></div><ul><li><strong>Immutable hodnoty</strong> - primitive typy (string, number, boolean)</li><li><strong>Mutable objekty</strong> - objekty a pole jsou defaultně mutabilní</li><li><strong>Reference vs hodnota</strong> - objekty se předávají odkazem</li><li><strong>Shallow copy</strong> - kopírování pouze prvního levelu</li></ul><div><br></div><div><strong>Problémy s mutabilitou:</strong></div><ul><li><strong>Neočekávané změny</strong> - sdílené reference</li><li><strong>Debugování</strong> - těžké sledování změn</li><li><strong>Concurrency</strong> - race conditions</li><li><strong>Optimalizace</strong> - React/Vue re-rendering</li></ul><div><br></div><div><strong>Příklad problému:</strong></div><ul><li><strong>const arr = [1,2]; const arr2 = arr; arr.push(3)</strong> - změní i arr2</li></ul>"

18. Pokročilá práce s kolekcemi - Immutabilní operace	"<div><strong>Vytváření immutabilních kopií</strong></div><div><br></div><ul><li><strong>Spread operator</strong> - [...array], {...object}</li><li><strong>Object.assign()</strong> - Object.assign({}, obj)</li><li><strong>Array.from()</strong> - Array.from(original)</li><li><strong>JSON metody</strong> - JSON.parse(JSON.stringify(obj))</li></ul><div><br></div><div><strong>Immutabilní operace s poli:</strong></div><ul><li><strong>Přidání</strong> - [...arr, newItem]</li><li><strong>Odebrání</strong> - arr.filter(item => item !== target)</li><li><strong>Úprava</strong> - arr.map(item => item.id === id ? {...item, changed} : item)</li><li><strong>Spojení</strong> - [...arr1, ...arr2]</li></ul><div><br></div><div><strong>Immutabilní operace s objekty:</strong></div><ul><li><strong>Úprava</strong> - {...obj, key: newValue}</li><li><strong>Odebrání</strong> - const {removed, ...rest} = obj</li><li><strong>Vnořené změny</strong> - {...obj, nested: {...obj.nested, key: value}}</li></ul>"

18. Pokročilá práce s kolekcemi - Deep copy a reference	"<div><strong>Typy kopírování objektů</strong></div><div><br></div><ul><li><strong>Reference assignment</strong> - obj2 = obj1 (sdílená reference)</li><li><strong>Shallow copy</strong> - kopírování pouze první úrovně vlastností</li><li><strong>Deep copy</strong> - rekurzivní kopírování všech úrovní</li><li><strong>Structural sharing</strong> - optimalizované immutabilní struktury</li></ul><div><br></div><div><strong>Implementace deep copy:</strong></div><ul><li><strong>JSON metody</strong> - JSON.parse(JSON.stringify()) - jednoduché ale omezené</li><li><strong>Recursivní funkce</strong> - vlastní implementace</li><li><strong>Lodash cloneDeep</strong> - knihovna s pokročilými funkcemi</li><li><strong>structuredClone</strong> - nativní API (ES2022)</li></ul><div><br></div><div><strong>Problémy JSON metod:</strong></div><ul><li><strong>Funkce</strong> - nejsou zachovány</li><li><strong>undefined, Symbol</strong> - ztraceny</li><li><strong>Date objekty</strong> - převedeny na string</li><li><strong>Circular references</strong> - chyba</li></ul>"

18. Pokročilá práce s kolekcemi - Pokročilé Array metody	"<div><strong>Pokročilé metody pro práci s poli</strong></div><div><br></div><ul><li><strong>flatMap()</strong> - kombinace map() a flat()</li><li><strong>flat()</strong> - zploštění vnořených polí</li><li><strong>Array.from()</strong> - vytvoření pole z iterovatelných objektů</li><li><strong>fill()</strong> - vyplnění pole stejnou hodnotou</li></ul><div><br></div><div><strong>Pokročilé hledání:</strong></div><ul><li><strong>findIndex()</strong> - index prvního vyhovujícího prvku</li><li><strong>findLast()</strong> - poslední vyhovující prvek (ES2022)</li><li><strong>findLastIndex()</strong> - index posledního vyhovujícího prvku</li><li><strong>at()</strong> - přístup k prvku s negativním indexem</li></ul><div><br></div><div><strong>Praktické příklady:</strong></div><ul><li><strong>arr.flatMap(x => [x, x*2])</strong> - mapování a zploštění</li><li><strong>arr.flat(2)</strong> - zploštění 2 úrovní</li><li><strong>Array.from({length: 5}, (_, i) => i)</strong> - [0,1,2,3,4]</li><li><strong>arr.at(-1)</strong> - poslední prvek</li></ul>"

18. Pokročilá práce s kolekcemi - Performance a optimalizace	"<div><strong>Optimalizace práce s kolekcemi</strong></div><div><br></div><ul><li><strong>Výběr správné kolekce</strong> - Set pro unique, Map pro key-value</li><li><strong>Lazy evaluation</strong> - generators a iterátory</li><li><strong>Memoization</strong> - cache výsledků funkcí</li><li><strong>Object pooling</strong> - znovupoužití objektů</li></ul><div><br></div><div><strong>Performance tips:</strong></div><ul><li><strong>Set.has()</strong> - O(1) vs Array.includes() - O(n)</li><li><strong>Map.get()</strong> - rychlejší než object property lookup</li><li><strong>for...of vs forEach</strong> - for...of je rychlejší</li><li><strong>Sparse arrays</strong> - pozor na holes v polích</li></ul><div><br></div><div><strong>Immutabilní knihovny:</strong></div><ul><li><strong>Immutable.js</strong> - Facebook knihovna</li><li><strong>Immer</strong> - produce() s draft objekty</li><li><strong>Lodash/fp</strong> - funkcionální utility</li><li><strong>Ramda</strong> - funkcionální programování</li></ul>"