19. Výjimky a zpracování chyb - Úvod do výjimek	"<div><strong>Výjimky (Exceptions)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Mechanismus pro zpracování chybových stavů a neočekávaných situací během běhu programu</div><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li><strong>Runtime chyby</strong> - nastávají během běhu programu</li><li><strong>Objekty</strong> - výjimky jsou objekty obsahující informace o chybě</li><li><strong>Šíření</strong> - propagují se call stackem směrem nahoru</li><li><strong>Přerušení</strong> - mění běžný tok programu</li></ul><div><br></div><div><strong>Typy chyb:</strong></div><ul><li>Syntaktické chyby (compile-time)</li><li>Logické chyby (runtime)</li><li>Runtime exceptions (runtime)</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Oddělení error handlingu od hlavní logiky</li><li>Centralizované zpracování chyb</li><li>Čitelnější kód</li><li>Informativní error messages</li></ul><div><br></div><div><strong>Příklady výjimek:</strong> NullPointerException, IOException, ArithmeticException</div></div>"

19. Výjimky a zpracování chyb - Try-catch blok	"<div><strong>Try-catch blok</strong></div><div><br></div><div><strong>Syntaxe:</strong></div><div>try { // rizikovní kód } catch (ExceptionType e) { // zpracování chyby }</div><div><br></div><div><strong>Komponenty:</strong></div><ul><li><strong>try blok</strong> - obsahuje kód, který může vyhodit výjimku</li><li><strong>catch blok</strong> - zpracovává specifický typ výjimky</li><li><strong>Exception parameter</strong> - objekt s informacemi o chybě</li></ul><div><br></div><div><strong>Více catch bloků:</strong></div><ul><li>Možnost zachytit různé typy výjimek</li><li>Pořadí od nejspecifičtější po nejobecnější</li><li>Pouze jeden catch blok se spustí</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Kontrolované zpracování chyb</li><li>Program nekrachuje při chybě</li><li>Možnost recovery akce</li><li>Logging chybových stavů</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Zachytávej pouze výjimky, které umíš zpracovat</li><li>Nepoužívaj prázdné catch bloky</li><li>Loguj chyby pro debugging</li></ul></div>"

19. Výjimky a zpracování chyb - Finally blok	"<div><strong>Finally blok</strong></div><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li><strong>Vždy se spustí</strong> - bez ohledu na to, zda nastala výjimka</li><li><strong>Cleanup operace</strong> - uzavření resources, souborů, spojení</li><li><strong>Spuštění</strong> - i při return statement v try/catch</li></ul><div><br></div><div><strong>Syntaxe:</strong></div><div>try { // kód } catch (Exception e) { // zpracování } finally { // cleanup }</div><div><br></div><div><strong>Typické použití:</strong></div><ul><li>Uzavření souborů a streamů</li><li>Uvolnění databázových spojení</li><li>Uzavření síťových spojení</li><li>Uvolnění paměti</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Garantované vykonání cleanup kódu</li><li>Prevence resource leaks</li><li>Jednodušší resource management</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Může maskovat výjimky z try/catch</li><li>Složitější debugging pokud finally vyhodí výjimku</li></ul><div><br></div><div><strong>Poznámka:</strong> Try-with-resources v Javě je modernější alternativa pro resource management</div></div>"

19. Výjimky a zpracování chyb - Typy výjimek	"<div><strong>Typy výjimek</strong></div><div><br></div><div><strong>Checked Exceptions:</strong></div><ul><li><strong>Definice</strong> - musí být explicitně zpracovány nebo deklarovány</li><li><strong>Compile-time kontrola</strong> - kompilátor vyžaduje handling</li><li><strong>Příklady</strong> - IOException, SQLException, ClassNotFoundException</li></ul><div><br></div><div><strong>Unchecked Exceptions (Runtime):</strong></div><ul><li><strong>Definice</strong> - nemusí být explicitně zpracovány</li><li><strong>Runtime kontrola</strong> - nastávají během běhu programu</li><li><strong>Příklady</strong> - NullPointerException, IndexOutOfBoundsException, IllegalArgumentException</li></ul><div><br></div><div><strong>Errors:</strong></div><ul><li><strong>Systémové chyby</strong> - OutOfMemoryError, StackOverflowError</li><li><strong>Nejsou určené</strong> - k zachycení aplikačním kódem</li><li><strong>JVM problémy</strong> - obvykle znamenají serious issues</li></ul><div><br></div><div><strong>Hierarchie (Java):</strong></div><div>Throwable → Exception/Error → RuntimeException/CheckedException</div><div><br></div><div><strong>Best practices:</strong></div><ul><li>Používej checked exceptions pro recoverable conditions</li><li>Runtime exceptions pro programming errors</li></ul></div>"

19. Výjimky a zpracování chyb - Throw a throws	"<div><strong>Throw a throws klíčová slova</strong></div><div><br></div><div><strong>Throw:</strong></div><ul><li><strong>Vyhazování výjimky</strong> - explicitní vyvolání exception</li><li><strong>Syntaxe</strong> - throw new ExceptionType(\"message\")</li><li><strong>Použití</strong> - v aplikační logice pro error conditions</li></ul><div><br></div><div><strong>Throws:</strong></div><ul><li><strong>Deklarace výjimek</strong> - v method signature</li><li><strong>Syntaxe</strong> - public void method() throws IOException</li><li><strong>Kontakt</strong> - informuje caller o možných výjimkách</li></ul><div><br></div><div><strong>Příklad:</strong></div><div>public void readFile() throws IOException {<br>&nbsp;&nbsp;if (file == null) {<br>&nbsp;&nbsp;&nbsp;&nbsp;throw new IllegalArgumentException(\"File cannot be null\");<br>&nbsp;&nbsp;}<br>}</div><div><br></div><div><strong>Re-throwing:</strong></div><ul><li>Zachycení a znovu vyhození výjimky</li><li>Možnost logování před re-throw</li><li>Wrapping do jiného typu výjimky</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Používej specifické exception types</li><li>Informativní error messages</li><li>Nepoužívej exceptions pro control flow</li></ul></div>"

19. Výjimky a zpracování chyb - Custom výjimky	"<div><strong>Vlastní (Custom) výjimky</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Uživatelem definované třídy výjimek pro specifické business logic chyby</div><div><br></div><div><strong>Vytvoření:</strong></div><ul><li><strong>Dědění</strong> - od Exception nebo RuntimeException</li><li><strong>Konstruktory</strong> - parametrické pro message a cause</li><li><strong>Naming</strong> - končí slovem Exception</li></ul><div><br></div><div><strong>Příklad (Java):</strong></div><div>public class UserNotFoundException extends Exception {<br>&nbsp;&nbsp;public UserNotFoundException(String message) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super(message);<br>&nbsp;&nbsp;}<br>}</div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Expresivní error handling</li><li>Business logic specifické chyby</li><li>Snadnější debugging</li><li>Čistší API design</li></ul><div><br></div><div><strong>Kdy vytvořit:</strong></div><ul><li>Specifické business rule violations</li><li>Domain-specific error conditions</li><li>Když standard exceptions nejsou dostatečně expresivní</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Logický naming</li><li>Dokumentace použití</li><li>Minimal hierarchy</li><li>Reusable design</li></ul></div>"

19. Výjimky a zpracování chyb - Error handling strategie	"<div><strong>Strategie zpracování chyb</strong></div><div><br></div><div><strong>Fail-fast:</strong></div><ul><li><strong>Rychlé detekce</strong> - chyby se odhalí co nejdříve</li><li><strong>Input validation</strong> - kontrola parametrů na začátku</li><li><strong>Výhoda</strong> - snadnější debugging, prevence corrupted state</li></ul><div><br></div><div><strong>Graceful degradation:</strong></div><ul><li><strong>Pokračování v běhu</strong> - aplikace funguje i při chybách</li><li><strong>Fallback mechanismy</strong> - náhradní řešení</li><li><strong>Použití</strong> - kritické systémy, user-facing aplikace</li></ul><div><br></div><div><strong>Centralized error handling:</strong></div><ul><li><strong>Global exception handlers</strong> - centrální místo pro zpracování</li><li><strong>Logging a monitoring</strong> - unified approach</li><li><strong>Příklady</strong> - @ControllerAdvice v Spring, Global.asax v .NET</li></ul><div><br></div><div><strong>Circuit breaker pattern:</strong></div><ul><li><strong>Ochrана před cascading failures</li><li><strong>Monitoring external services</strong></li><li><strong>Temporary failure handling</strong></li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Konzistentní error handling</li><li>Meaningful error messages</li><li>Appropriate logging levels</li><li>User-friendly error presentation</li></ul></div>"

19. Výjimky a zpracování chyb - Debugging a monitoring	"<div><strong>Debugging a monitoring výjimek</strong></div><div><br></div><div><strong>Stack trace:</strong></div><ul><li><strong>Call stack informace</strong> - kde nastala chyba</li><li><strong>Method chain</strong> - sekvence volání</li><li><strong>Line numbers</strong> - přesné umístění v kódu</li><li><strong>Nested exceptions</strong> - cause chain</li></ul><div><br></div><div><strong>Logging:</strong></div><ul><li><strong>Error levels</strong> - DEBUG, INFO, WARN, ERROR, FATAL</li><li><strong>Structured logging</strong> - konzistentní formát</li><li><strong>Context information</strong> - user ID, request ID, timestamp</li></ul><div><br></div><div><strong>Monitoring nástroje:</strong></div><ul><li><strong>APM</strong> - New Relic, Datadog, AppDynamics</li><li><strong>Error tracking</strong> - Sentry, Rollbar, Bugsnag</li><li><strong>Log aggregation</strong> - ELK Stack, Splunk</li></ul><div><br></div><div><strong>Metriky:</strong></div><ul><li>Error rates</li><li>Response times</li><li>Exception frequencies</li><li>Business impact metrics</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Meaningful error messages</li><li>Correlation IDs pro request tracking</li><li>Alerting na kritické chyby</li><li>Regular error analysis</li><li>Post-mortem analysis</li></ul></div>"