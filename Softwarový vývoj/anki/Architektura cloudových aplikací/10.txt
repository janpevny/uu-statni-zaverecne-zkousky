10. Modelování datového úložiště - Základní principy modelování	"<div><strong>Základní principy modelování datového úložiště</strong></div><div><br></div><div><strong>Hlavní cíle:</strong></div><ul><li><strong>Konzistence</strong> - zajištění integrity dat</li><li><strong>Efektivita</strong> - optimalizace pro dotazy a výkon</li><li><strong>Škálovatelnost</strong> - schopnost růstu</li><li><strong>Udržovatelnost</strong> - snadná správa a evoluce</li></ul><div><br></div><div><strong>Klíčové kroky modelování:</strong></div><ol><li><strong>Analýza požadavků</strong> - identifikace dat a operací</li><li><strong>Konceptuální model</strong> - ER diagramy, entity a atributy</li><li><strong>Logický model</strong> - transformace do specifického modelu (relační, dokumentový)</li><li><strong>Fyzický model</strong> - implementace v konkrétní databázi</li></ol><div><br></div><div><strong>Základní přístupy:</strong></div><ul><li>Normalizace (pro SQL databáze)</li><li>Denormalizace (pro výkon)</li><li>Schema-first vs Schema-less design</li></ul><div><br></div><div><strong>Příklady nástrojů:</strong> ER/Studio, MySQL Workbench, Lucidchart</div>"

10. Modelování datového úložiště - Typy relací v databázích	"<div><strong>Typy relací v databázích</strong></div><div><br></div><div><strong>1. One-to-One (1:1)</strong></div><ul><li>Jeden záznam v tabulce A odpovídá jednomu záznamu v tabulce B</li><li><strong>Příklad:</strong> Uživatel ↔ Profil</li><li><strong>Implementace:</strong> Cizí klíč s UNIQUE constraintem</li></ul><div><br></div><div><strong>2. One-to-Many (1:N)</strong></div><ul><li>Jeden záznam v tabulce A může mít více záznamů v tabulce B</li><li><strong>Příklad:</strong> Zákazník → Objednávky</li><li><strong>Implementace:</strong> Cizí klíč v tabulce "many"</li></ul><div><br></div><div><strong>3. Many-to-Many (M:N)</strong></div><ul><li>Více záznamů v A může odpovídat více záznamům v B</li><li><strong>Příklad:</strong> Studenti ↔ Kurzy</li><li><strong>Implementace:</strong> Spojovací tabulka (junction table)</li></ul><div><br></div><div><strong>Referenční integrita:</strong></div><ul><li>CASCADE - automatické mazání/aktualizace</li><li>RESTRICT - zamezení mazání</li><li>SET NULL - nastavení na NULL</li></ul><div><br></div><div><strong>Indexování:</strong></div><div>Cizí klíče by měly být indexované pro rychlejší JOIN operace</div>"

10. Modelování datového úložiště - Normalizace v SQL databázích	"<div><strong>Normalizace v SQL databázích</strong></div><div><br></div><div><strong>Cíl normalizace:</strong></div><div>Eliminace redundance dat a zajištění konzistence</div><div><br></div><div><strong>Normální formy:</strong></div><ol><li><strong>1NF</strong> - Atomické hodnoty, žádné opakující se skupiny</li><li><strong>2NF</strong> - 1NF + částečné závislosti eliminovány</li><li><strong>3NF</strong> - 2NF + tranzitivní závislosti eliminovány</li><li><strong>BCNF</strong> - Boyce-Codd Normal Form</li></ol><div><br></div><div><strong>Výhody normalizace:</strong></div><ul><li>Eliminace redundance</li><li>Konzistence dat</li><li>Úspora místa</li><li>Snadnější aktualizace</li></ul><div><br></div><div><strong>Nevýhody normalizace:</strong></div><ul><li>Složitější dotazy (více JOINů)</li><li>Pomalejší SELECT operace</li><li>Složitější pochopení struktury</li></ul><div><br></div><div><strong>Denormalizace:</strong></div><div>Záměrné porušení normálních forem pro zlepšení výkonu čtení</div><div><br></div><div><strong>Příklad:</strong> E-shop - tabulky customers, orders, order_items</div>"

10. Modelování datového úložiště - NoSQL přístupy k modelování	"<div><strong>NoSQL přístupy k modelování</strong></div><div><br></div><div><strong>Typy NoSQL databází:</strong></div><ul><li><strong>Dokumentové</strong> - MongoDB, CouchDB</li><li><strong>Key-Value</strong> - Redis, DynamoDB</li><li><strong>Sloupcové</strong> - Cassandra, HBase</li><li><strong>Grafové</strong> - Neo4j, Amazon Neptune</li></ul><div><br></div><div><strong>Principy NoSQL modelování:</strong></div><ul><li><strong>Query-driven design</strong> - model podle dotazů</li><li><strong>Denormalizace</strong> - duplikace dat pro rychlost</li><li><strong>Embedding vs Referencing</strong> - vnořené vs odkazované dokumenty</li><li><strong>Schema flexibility</strong> - dynamické schéma</li></ul><div><br></div><div><strong>Dokumentové databáze (MongoDB):</strong></div><ul><li>Embedded documents pro 1:N relace</li><li>References pro M:N relace</li><li>Collections místo tabulek</li></ul><div><br></div><div><strong>Key-Value stores:</strong></div><ul><li>Jednoduché klíč-hodnota páry</li><li>Žádné relace</li><li>Rychlé čtení/zápis</li></ul><div><br></div><div><strong>Výhody:</strong> Škálovatelnost, flexibilita schématu, rychlost<br><strong>Nevýhody:</strong> Konzistence, složité dotazy, duplikace dat</div>"

10. Modelování datového úložiště - Rozdíly SQL vs NoSQL	"<div><strong>Rozdíly v přístupu: SQL vs NoSQL</strong></div><div><br></div><div><strong>SQL (Relační) přístup:</strong></div><ul><li><strong>Schéma:</strong> Pevně definované, změny obtížné</li><li><strong>Data model:</strong> Tabulky s relacemi</li><li><strong>Normalizace:</strong> Vysoká, minimální redundance</li><li><strong>Dotazy:</strong> SQL, složité JOINy</li><li><strong>ACID:</strong> Plná podpora transakcí</li></ul><div><br></div><div><strong>NoSQL přístup:</strong></div><ul><li><strong>Schéma:</strong> Flexibilní nebo žádné</li><li><strong>Data model:</strong> Dokumenty, klíč-hodnota, grafy</li><li><strong>Denormalizace:</strong> Častá, duplikace pro výkon</li><li><strong>Dotazy:</strong> API specifické pro databázi</li><li><strong>BASE:</strong> Eventual consistency</li></ul><div><br></div><div><strong>Volba podle případu použití:</strong></div><ul><li><strong>SQL</strong> - finanční systémy, ERP, CRM</li><li><strong>NoSQL</strong> - big data, real-time aplikace, content management</li></ul><div><br></div><div><strong>Hybrid přístupy:</strong></div><ul><li>NewSQL databáze</li><li>Multi-model databáze</li><li>Polyglot persistence</li></ul><div><br></div><div><strong>Příklady:</strong> PostgreSQL vs MongoDB, MySQL vs Cassandra</div>"

10. Modelování datového úložiště - Výkonnostní optimalizace	"<div><strong>Výkonnostní optimalizace datových úložišť</strong></div><div><br></div><div><strong>SQL optimalizace:</strong></div><ul><li><strong>Indexy</strong> - B-tree, Hash, Bitmap indexy</li><li><strong>Partitioning</strong> - horizontální i vertikální</li><li><strong>Query optimization</strong> - EXPLAIN plans</li><li><strong>Materialized views</strong> - předpočítané výsledky</li></ul><div><br></div><div><strong>NoSQL optimalizace:</strong></div><ul><li><strong>Sharding</strong> - distribuce dat</li><li><strong>Replication</strong> - kopie pro čtení</li><li><strong>Caching strategies</strong> - in-memory cache</li><li><strong>Komprese</strong> - úspora místa</li></ul><div><br></div><div><strong>Obecné strategie:</strong></div><ul><li><strong>Connection pooling</strong> - sdílení připojení</li><li><strong>Batch operations</strong> - hromadné operace</li><li><strong>Asynchronní operace</strong> - non-blocking I/O</li><li><strong>Data archivace</strong> - stará data do cold storage</li></ul><div><br></div><div><strong>Monitoring nástroje:</strong></div><ul><li>Query performance analyzers</li><li>Database profilers</li><li>Metrics dashboards</li></ul><div><br></div><div><strong>Best practices:</strong> Regular maintenance, statistics updates, kapacitní plánování</div>"

10. Modelování datového úložiště - Migrace a evoluce schématu	"<div><strong>Migrace a evoluce schématu</strong></div><div><br></div><div><strong>Typy změn schématu:</strong></div><ul><li><strong>Additive</strong> - přidání sloupců/indexů (bezpečné)</li><li><strong>Destructive</strong> - odebrání/přejmenování (rizikové)</li><li><strong>Transformative</strong> - změna datových typů</li></ul><div><br></div><div><strong>SQL migrace strategie:</strong></div><ul><li><strong>Blue-Green deployment</strong> - paralelní prostředí</li><li><strong>Rolling migrations</strong> - postupné nasazení</li><li><strong>Zero-downtime migrations</strong> - bez výpadků</li><li><strong>Backwards compatibility</strong> - zpětná kompatibilita</li></ul><div><br></div><div><strong>NoSQL evoluce:</strong></div><ul><li><strong>Schema versioning</strong> - verzování dokumentů</li><li><strong>Lazy migration</strong> - migrace při čtení</li><li><strong>Multi-version documents</strong> - více verzí současně</li></ul><div><br></div><div><strong>Migration nástroje:</strong></div><ul><li><strong>SQL:</strong> Flyway, Liquibase, Rails migrations</li><li><strong>NoSQL:</strong> Custom scripts, ETL tools</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Testování na kopiích produkce</li><li>Postupné rollout</li><li>Rollback plány</li><li>Monitoring během migrace</li></ul></div>"