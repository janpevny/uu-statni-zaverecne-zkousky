2. JavaScript - Frontend vs Backend charakteristiky	"<div><strong>JavaScript - Frontend vs Backend</strong></div><div><br></div><div>JavaScript může běžet jak v <strong>prohlížeči</strong> (frontend) tak na <strong>serveru</strong> (backend - Node.js).</div><div><br></div><ul><li><strong>Frontend JS</strong> - běží v prohlížeči, DOM manipulace</li><li><strong>Backend JS</strong> - běží na serveru (Node.js, Deno, Bun)</li><li><strong>Různé runtime prostředí</strong> - různá API a možnosti</li><li><strong>Společný jazyk</strong> - stejná syntaxe, různé knihovny</li></ul><div><br></div><div><strong>Klíčové rozdíly:</strong></div><ul><li>Přístup k souborovému systému (pouze backend)</li><li>DOM API (pouze frontend)</li><li>Síťová omezení (CORS ve frontendu)</li><li>Bezpečnostní kontext</li></ul>"

2. JavaScript - DOM a Browser APIs	"<div><strong>DOM a Browser APIs</strong></div><div><br></div><div><strong>Frontend JavaScript</strong> má přístup k specifickým prohlížečovým API nedostupným na backendu.</div><div><br></div><ul><li><strong>DOM (Document Object Model)</strong> - manipulace s HTML elementy</li><li><strong>BOM (Browser Object Model)</strong> - window, location, navigator</li><li><strong>Event Handling</strong> - reakce na uživatelské akce</li><li><strong>Web APIs</strong> - fetch, localStorage, geolocation</li></ul><div><br></div><div><strong>Moderne Web APIs:</strong></div><ul><li><strong>Fetch API</strong> - HTTP požadavky</li><li><strong>Web Storage</strong> - localStorage, sessionStorage</li><li><strong>Service Workers</strong> - background scripting</li><li><strong>WebRTC</strong> - real-time komunikace</li></ul><div><br></div><div><strong>Backend nemá:</strong> DOM, window object, browser-specific APIs</div>"

2. JavaScript - Bezpečnostní omezení frontendu	"<div><strong>Bezpečnostní omezení frontend JavaScriptu</strong></div><div><br></div><div>Frontend JavaScript běží v <strong>sandboxu prohlížeče</strong> s bezpečnostními omezeními.</div><div><br></div><ul><li><strong>Same-Origin Policy</strong> - omezení cross-origin requests</li><li><strong>CORS (Cross-Origin Resource Sharing)</strong> - kontrola přístupu</li><li><strong>Content Security Policy</strong> - ochrana proti XSS</li><li><strong>Žádný přístup k souborům</strong> - file system omezení</li></ul><div><br></div><div><strong>Backend JavaScript může:</strong></div><ul><li>Přistupovat k souborovému systému</li><li>Spouštět systémové příkazy</li><li>Připojovat se k databázím</li><li>Nemá CORS omezení</li></ul><div><br></div><div><strong>Důvod:</strong> Ochrana uživatele před škodlivým kódem</div>"

2. JavaScript - Co je transpilace	"<div><strong>Transpilace v JavaScriptu</strong></div><div><br></div><div><strong>Transpilace</strong> je proces převodu kódu z jedné verze JavaScriptu do druhé (obvykle starší).</div><div><br></div><ul><li><strong>Source-to-source compilation</strong> - JS → JS transformace</li><li><strong>Zpětná kompatibilita</strong> - nové features pro staré prohlížeče</li><li><strong>Polyfilly</strong> - implementace chybějících funkcí</li><li><strong>Optimalizace</strong> - minifikace, tree-shaking</li></ul><div><br></div><div><strong>Proč transpilace:</strong></div><ul><li><strong>Moderní syntax</strong> - ES6+, TypeScript</li><li><strong>Browser podpora</strong> - starší prohlížeče</li><li><strong>Vývojářská produktivita</strong> - nejnovější features</li></ul><div><br></div><div><strong>Výsledek:</strong> Moderní kód → kompatibilní kód pro všechny prohlížeče</div>"

2. JavaScript - Babel transpiler	"<div><strong>Babel - JavaScript transpiler</strong></div><div><br></div><div><strong>Babel</strong> je nejpopulárnější nástroj pro transpilaci moderního JavaScriptu.</div><div><br></div><ul><li><strong>ES6+ → ES5</strong> - převod nové syntaxe</li><li><strong>Plugin systém</strong> - modulární transformace</li><li><strong>Presets</strong> - sady pluginů (@babel/preset-env)</li><li><strong>Polyfill integrace</strong> - core-js, regenerator-runtime</li></ul><div><br></div><div><strong>Klíčové features:</strong></div><ul><li><strong>Smart transpilation</strong> - pouze co je potřeba</li><li><strong>Browserslist integrace</strong> - cílení na konkrétní prohlížeče</li><li><strong>Source maps</strong> - debugging support</li></ul><div><br></div><div><strong>Konfigurace:</strong> .babelrc, babel.config.js, package.json</div>"

2. JavaScript - Bundlers a build tools	"<div><strong>Bundlers a build nástroje</strong></div><div><br></div><div><strong>Moderní build nástroje</strong> kombinují transpilaci s dalšími optimalizacemi.</div><div><br></div><ul><li><strong>Webpack</strong> - modulový bundler s bohatým ekosystémem</li><li><strong>Vite</strong> - rychlý build tool, ESM nativní</li><li><strong>Rollup</strong> - optimalizovaný pro knihovny</li><li><strong>esbuild</strong> - extrémně rychlý Go-based bundler</li></ul><div><br></div><div><strong>Funkcionality:</strong></div><ul><li><strong>Module bundling</strong> - spojování souborů</li><li><strong>Code splitting</strong> - dynamické importy</li><li><strong>Asset optimization</strong> - obrázky, CSS</li><li><strong>Development server</strong> - hot reload</li></ul><div><br></div><div><strong>Integrace:</strong> Automatická transpilace, TypeScript podpora</div>"

2. JavaScript - TypeScript transpilation	"<div><strong>TypeScript transpilation</strong></div><div><br></div><div><strong>TypeScript</strong> je nadmnožina JavaScriptu s typovou kontrolou, transpiluje se do čistého JS.</div><div><br></div><ul><li><strong>Statické typování</strong> - compile-time kontrola</li><li><strong>Modern JS features</strong> - ES6+, decorators</li><li><strong>Incremental compilation</strong> - rychlé buildy</li><li><strong>Multiple targets</strong> - ES5, ES6, ESNext</li></ul><div><br></div><div><strong>TypeScript Compiler (tsc):</strong></div><ul><li><strong>tsconfig.json</strong> - konfigurace projektu</li><li><strong>Target specification</strong> - výstupní JS verze</li><li><strong>Module systems</strong> - CommonJS, ESM, AMD</li></ul><div><br></div><div><strong>Integrace:</strong> Babel, Webpack, Vite mají nativní TS support</div>"

2. JavaScript - Moderní JS features a kompatibilita	"<div><strong>Moderní JavaScript features</strong></div><div><br></div><div>Transpilace umožňuje používat <strong>nejnovější JavaScript features</strong> i pro starší prohlížeče.</div><div><br></div><ul><li><strong>ES2015+ syntax</strong> - arrow functions, classes, modules</li><li><strong>ES2017+</strong> - async/await, object spread</li><li><strong>ES2020+</strong> - optional chaining, nullish coalescing</li><li><strong>ES2022+</strong> - top-level await, private fields</li></ul><div><br></div><div><strong>Kompatibilita nástroje:</strong></div><ul><li><strong>Can I Use</strong> - browser support lookup</li><li><strong>Browserslist</strong> - definice target browsers</li><li><strong>@babel/preset-env</strong> - smart polyfills</li></ul><div><br></div><div><strong>Strategie:</strong> Progressive enhancement, graceful degradation</div>"