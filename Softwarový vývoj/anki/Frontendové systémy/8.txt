8. Vstupní body aplikace - Definice vstupních bodů	"<div><strong>Vstupní body aplikace - základní koncepty</strong></div><div><br></div><div><strong>Definice:</strong> Vstupní bod je místo v aplikaci, kde začíná vykonávání kódu a inicializace systému</div><div><br></div><div><strong>Klíčové charakteristiky:</strong></div><ul><li><strong>Main funkce</strong> - klasický vstupní bod v C/C++, Java, C#</li><li><strong>HTTP endpointy</strong> - vstupní body pro webové aplikace</li><li><strong>Event handlery</strong> - vstupní body pro událostmi řízené aplikace</li><li><strong>CLI argumenty</strong> - vstupní body pro konzolové aplikace</li></ul><div><br></div><div><strong>Příklady technologií:</strong></div><ul><li><strong>Java:</strong> public static void main(String[] args)</li><li><strong>Node.js:</strong> app.listen(), Express routes</li><li><strong>Spring Boot:</strong> @SpringBootApplication, @RestController</li></ul>"

8. Vstupní body aplikace - Typy vstupních bodů	"<div><strong>Typy vstupních bodů podle architektury</strong></div><div><br></div><div><strong>Podle způsobu spuštění:</strong></div><ol><li><strong>Programové</strong> - main() funkce, bootstrap kód</li><li><strong>Síťové</strong> - HTTP/REST API, GraphQL endpoints</li><li><strong>Událostní</strong> - message queues, webhooks, timery</li><li><strong>Uživatelské</strong> - GUI aplikace, CLI rozhraní</li></ol><div><br></div><div><strong>Podle životního cyklu:</strong></div><ul><li><strong>Synchronní</strong> - blokující volání, request-response</li><li><strong>Asynchronní</strong> - non-blocking, callback/promise based</li><li><strong>Reaktivní</strong> - stream processing, event-driven</li></ul><div><br></div><div><strong>Praktické implementace:</strong></div><ul><li><strong>Microservices:</strong> každý service má své API endpoints</li><li><strong>Serverless:</strong> AWS Lambda functions, Azure Functions</li></ul>"

8. Vstupní body aplikace - Separace podle domén	"<div><strong>Rozdělení aplikace podle business domén</strong></div><div><br></div><div><strong>Domain-driven separace:</strong></div><ul><li><strong>User Management</strong> - /api/users, /auth endpoints</li><li><strong>Order Processing</strong> - /api/orders, /payments endpoints</li><li><strong>Product Catalog</strong> - /api/products, /inventory endpoints</li><li><strong>Notification System</strong> - /api/notifications, webhook endpoints</li></ul><div><br></div><div><strong>Výhody separace:</strong></div><ul><li><strong>Nezávislost</strong> - každá doména může být vyvíjena samostatně</li><li><strong>Škálovatelnost</strong> - rozdílné požadavky na výkon</li><li><strong>Bezpečnost</strong> - izolace citlivých operací</li><li><strong>Testovatelnost</strong> - jednodušší unit a integration testy</li></ul><div><br></div><div><strong>Implementační vzory:</strong></div><ul><li><strong>Modular Monolith</strong> - oddělené moduly v jedné aplikaci</li><li><strong>Microservices</strong> - samostatné služby s vlastními endpointy</li></ul>"

8. Vstupní body aplikace - Sdílení common funkčností	"<div><strong>Sdílení společných funkcí mezi vstupními body</strong></div><div><br></div><div><strong>Společné komponenty:</strong></div><ul><li><strong>Authentication & Authorization</strong> - JWT middleware, RBAC</li><li><strong>Logging & Monitoring</strong> - strukturované logy, metriky</li><li><strong>Error Handling</strong> - centralizované exception handling</li><li><strong>Validation</strong> - input validation, data sanitization</li><li><strong>Database Access</strong> - connection pooling, ORM/ODM</li></ul><div><br></div><div><strong>Implementační strategie:</strong></div><ul><li><strong>Shared Libraries</strong> - společné NPM/Maven/NuGet balíčky</li><li><strong>Middleware Pattern</strong> - Express.js, ASP.NET Core middleware</li><li><strong>Dependency Injection</strong> - Spring IoC, .NET DI container</li><li><strong>Service Layer</strong> - business logic jako služby</li></ul><div><br></div><div><strong>Nástroje:</strong> Spring Boot starters, Express middleware, ASP.NET filters</div>"

8. Vstupní body aplikace - Middleware a interceptory	"<div><strong>Middleware pattern pro sdílení funkčností</strong></div><div><br></div><div><strong>Middleware koncept:</strong></div><ul><li><strong>Pipeline processing</strong> - řetězení funkcí před/po zpracování</li><li><strong>Cross-cutting concerns</strong> - autentizace, logování, validace</li><li><strong>Request/Response transformation</strong> - parsing, serialization</li><li><strong>Error boundary</strong> - centralizované error handling</li></ul><div><br></div><div><strong>Implementace v technologiích:</strong></div><ul><li><strong>Express.js:</strong> app.use(), custom middleware functions</li><li><strong>ASP.NET Core:</strong> IMiddleware, UseMiddleware()</li><li><strong>Spring Boot:</strong> @Component, HandlerInterceptor</li><li><strong>Django:</strong> MIDDLEWARE setting, process_request/response</li></ul><div><br></div><div><strong>Příklady middleware:</strong></div><ul><li><strong>CORS handling</strong> - cross-origin resource sharing</li><li><strong>Rate limiting</strong> - API throttling</li><li><strong>Request logging</strong> - audit trail</li></ul>"

8. Vstupní body aplikace - API Gateway pattern	"<div><strong>API Gateway jako jednotný vstupní bod</strong></div><div><br></div><div><strong>API Gateway role:</strong></div><ul><li><strong>Single entry point</strong> - jeden vstupní bod pro všechny klienty</li><li><strong>Request routing</strong> - směrování na příslušné mikroslužby</li><li><strong>Protocol translation</strong> - HTTP to gRPC, REST to GraphQL</li><li><strong>Load balancing</strong> - distribuce zátěže mezi instancemi</li></ul><div><br></div><div><strong>Společné funkce v gateway:</strong></div><ul><li><strong>Authentication</strong> - JWT token validation</li><li><strong>Rate limiting</strong> - API throttling a quotas</li><li><strong>Request/Response transformation</strong> - data mapping</li><li><strong>Monitoring</strong> - metriky, health checks</li><li><strong>Caching</strong> - response caching pro performance</li></ul><div><br></div><div><strong>Technologie:</strong></div><ul><li><strong>Kong, Zuul, Ambassador</strong> - enterprise řešení</li><li><strong>AWS API Gateway, Azure APIM</strong> - cloud managed</li><li><strong>NGINX, Traefik</strong> - open-source reverse proxy</li></ul>"

8. Vstupní body aplikace - Deployment a orchestrace	"<div><strong>Nasazení a správa vícenásobných vstupních bodů</strong></div><div><br></div><div><strong>Deployment strategie:</strong></div><ul><li><strong>Blue-Green Deployment</strong> - nulový downtime při aktualizacích</li><li><strong>Canary Releases</strong> - postupné zavádění nových verzí</li><li><strong>Rolling Updates</strong> - postupná výměna instancí</li><li><strong>Feature Toggles</strong> - podmíněné zapínání funkcí</li></ul><div><br></div><div><strong>Container orchestrace:</strong></div><ul><li><strong>Kubernetes:</strong> Services, Ingress, Load Balancers</li><li><strong>Docker Swarm:</strong> Services, Networks, Secrets</li><li><strong>Service Mesh:</strong> Istio, Linkerd pro inter-service komunikaci</li></ul><div><br></div><div><strong>Monitoring vstupních bodů:</strong></div><ul><li><strong>Health checks</strong> - /health, /ready endpoints</li><li><strong>Circuit breakers</strong> - Netflix Hystrix, Resilience4j</li><li><strong>Distributed tracing</strong> - Jaeger, Zipkin</li><li><strong>Metrics collection</strong> - Prometheus, Grafana</li></ul>"

8. Vstupní body aplikace - Security a best practices	"<div><strong>Bezpečnost a osvědčené postupy pro vstupní body</strong></div><div><br></div><div><strong>Security considerations:</strong></div><ul><li><strong>Input validation</strong> - sanitizace všech vstupů</li><li><strong>Authentication</strong> - OAuth 2.0, JWT, API keys</li><li><strong>Authorization</strong> - RBAC, ABAC, resource-based</li><li><strong>HTTPS enforcement</strong> - TLS 1.3, certificate management</li><li><strong>CORS policy</strong> - controlled cross-origin access</li></ul><div><br></div><div><strong>Performance best practices:</strong></div><ul><li><strong>Connection pooling</strong> - databáze, HTTP connections</li><li><strong>Caching strategies</strong> - Redis, Memcached, CDN</li><li><strong>Async processing</strong> - event queues, background jobs</li><li><strong>Resource limits</strong> - CPU, memory, connection limits</li></ul><div><br></div><div><strong>Monitoring a alerting:</strong></div><ul><li><strong>SLA monitoring</strong> - uptime, response time</li><li><strong>Error rate tracking</strong> - 4xx/5xx HTTP codes</li><li><strong>Capacity planning</strong> - load testing, stress testing</li></ul>"