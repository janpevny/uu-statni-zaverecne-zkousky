9. Dokumentace a testování frontendu - Způsoby dokumentace frontendové aplikace	"<div><strong>Způsoby dokumentace frontendové aplikace</strong></div><div><br></div><div><strong>Typy dokumentace:</strong></div><ul><li><strong>API dokumentace</strong> - popis rozhraní a endpointů (Swagger/OpenAPI)</li><li><strong>Komponentová dokumentace</strong> - popis komponent a jejich props</li><li><strong>Styleguide</strong> - vizuální konzistence UI komponent</li><li><strong>README</strong> - základní informace o projektu a instalaci</li></ul><div><br></div><div><strong>Nástroje pro dokumentaci:</strong></div><ul><li><strong>Storybook</strong> - interaktivní katalog komponent</li><li><strong>JSDoc</strong> - dokumentace JavaScriptu přímo v kódu</li><li><strong>TypeDoc</strong> - generování dokumentace z TypeScript</li><li><strong>Gitiles/GitBook</strong> - wiki dokumentace</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Lepší onboarding nových vývojářů</li><li>Konzistentní použití komponent</li><li>Snadnější údržba</li><li>Design system</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Čas na údržbu dokumentace</li><li>Riziko zastarávání</li><li>Dodatečný overhead</li></ul>"

9. Dokumentace a testování frontendu - Popis uživatelského rozhraní	"<div><strong>Popis uživatelského rozhraní (UI)</strong></div><div><br></div><div><strong>Způsoby popisu UI:</strong></div><ul><li><strong>User Stories</strong> - popis funkcionalit z pohledu uživatele</li><li><strong>Wireframes</strong> - základní schéma rozložení</li><li><strong>Mockupy</strong> - vizuální návrh s barvami a fonty</li><li><strong>Prototypy</strong> - interaktivní verze pro testování</li></ul><div><br></div><div><strong>UX dokumentace:</strong></div><ul><li><strong>User Personas</strong> - profily cílových uživatelů</li><li><strong>User Journey Maps</strong> - cesty uživatele aplikací</li><li><strong>Information Architecture</strong> - struktura informací</li><li><strong>Accessibility Guidelines</strong> - pravidla přístupnosti</li></ul><div><br></div><div><strong>Nástroje:</strong></div><ul><li><strong>Figma/Adobe XD</strong> - návrh a prototypování</li><li><strong>Miro/Lucidchart</strong> - wireframes a flowcharty</li><li><strong>InVision</strong> - interaktivní prototypy</li><li><strong>Zeplin</strong> - handoff designu vývojářům</li></ul><div><br></div><div><strong>Benefity:</strong></div><ul><li>Jasná vize produktu</li><li>Lepší komunikace mezi týmy</li><li>Redukce chyb ve vývoji</li><li>Konzistentní uživatelský zážitek</li></ul>"

9. Dokumentace a testování frontendu - Testovatelnost frontendové aplikace	"<div><strong>Testovatelnost frontendové aplikace</strong></div><div><br></div><div><strong>Principy testovatelnosti:</strong></div><ul><li><strong>Modularity</strong> - malé, izolované komponenty</li><li><strong>Dependency Injection</strong> - injektování závislostí</li><li><strong>Pure Functions</strong> - deterministické funkce bez side effects</li><li><strong>Separation of Concerns</strong> - oddělení logiky od prezentace</li></ul><div><br></div><div><strong>Testovatelný design:</strong></div><ul><li><strong>Single Responsibility</strong> - jedna zodpovědnost na komponentu</li><li><strong>Testovací atributy</strong> - data-testid pro elementy</li><li><strong>Mockování</strong> - nahrazování external dependencies</li><li><strong>State management</strong> - predictable state changes</li></ul><div><br></div><div><strong>Anti-patterns:</strong></div><ul><li>Tightly coupled komponenty</li><li>Global state mutations</li><li>Hard-coded values</li><li>Mixed concerns v jednom modulu</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Rychlejší development cycle</li><li>Vyšší kvalita kódu</li><li>Lepší refactoring confidence</li><li>Dokumentace skrze testy</li></ul>"

9. Dokumentace a testování frontendu - Způsoby testování komponent	"<div><strong>Způsoby testování komponent</strong></div><div><br></div><div><strong>Typy testování komponent:</strong></div><ul><li><strong>Unit testy</strong> - izolované testování jednotlivých komponent</li><li><strong>Integration testy</strong> - testování interakce mezi komponenty</li><li><strong>Snapshot testy</strong> - zachycení výstupu komponenty</li><li><strong>Visual regression testy</strong> - detekce vizuálních změn</li></ul><div><br></div><div><strong>Testovací frameworky:</strong></div><ul><li><strong>Jest</strong> - test runner a assertion library</li><li><strong>React Testing Library</strong> - testování React komponent</li><li><strong>Enzyme</strong> - shallow/mount rendering (deprecated)</li><li><strong>Vue Test Utils</strong> - testování Vue komponent</li></ul><div><br></div><div><strong>Testovací strategie:</strong></div><ul><li><strong>Arrange-Act-Assert</strong> - struktura testu</li><li><strong>Given-When-Then</strong> - BDD přístup</li><li><strong>Test-Driven Development</strong> - testy před implementací</li><li><strong>Behavior-Driven Development</strong> - zaměření na chování</li></ul><div><br></div><div><strong>Co testovat:</strong></div><ul><li>Props handling</li><li>State changes</li><li>User interactions</li><li>Conditional rendering</li><li>Error boundaries</li></ul>"

9. Dokumentace a testování frontendu - Testování aplikace jako celku	"<div><strong>Testování aplikace jako celku</strong></div><div><br></div><div><strong>E2E (End-to-End) testování:</strong></div><ul><li><strong>Cypress</strong> - komplexní E2E testing framework</li><li><strong>Playwright</strong> - cross-browser automatizace</li><li><strong>Puppeteer</strong> - headless Chrome automatizace</li><li><strong>Selenium WebDriver</strong> - klasický nástroj pro automatizaci</li></ul><div><br></div><div><strong>Testovací scénáře:</strong></div><ul><li><strong>Critical user paths</strong> - hlavní uživatelské cesty</li><li><strong>Cross-browser testing</strong> - kompatibilita prohlížečů</li><li><strong>Mobile responsiveness</strong> - testování na mobilních zařízeních</li><li><strong>Performance testing</strong> - rychlost načítání a odezvy</li></ul><div><br></div><div><strong>Nástroje pro testování:</strong></div><ul><li><strong>BrowserStack</strong> - cloud testing platform</li><li><strong>Sauce Labs</strong> - automatizované testování</li><li><strong>Chrome DevTools</strong> - debugging a performance</li><li><strong>Lighthouse</strong> - audit výkonu a kvality</li></ul><div><br></div><div><strong>Výhody E2E testů:</strong></div><ul><li>Reálné uživatelské scénáře</li><li>Validace celého workflow</li><li>Detekce integration problémů</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Pomalé spouštění</li><li>Flaky testy</li><li>Nákladná údržba</li></ul>"

9. Dokumentace a testování frontendu - Typy testů a proces testování	"<div><strong>Typy testů a proces testování</strong></div><div><br></div><div><strong>Pyramid testování:</strong></div><ol><li><strong>Unit testy</strong> (70%) - nejrychlejší, nejlevnější</li><li><strong>Integration testy</strong> (20%) - testování spolupráce</li><li><strong>E2E testy</strong> (10%) - nejpomalejší, nejdražší</li></ol><div><br></div><div><strong>Proces testování:</strong></div><ol><li><strong>Plánování</strong> - definice testovacích scénářů</li><li><strong>Příprava</strong> - setup testovacího prostředí</li><li><strong>Provedení</strong> - spuštění testů</li><li><strong>Vyhodnocení</strong> - analýza výsledků a reportování</li></ol><div><br></div><div><strong>Další typy testů:</strong></div><ul><li><strong>Smoke testy</strong> - základní funkcionalita</li><li><strong>Regression testy</strong> - ověření, že změny nerozbily existující funkcionalitu</li><li><strong>A/B testy</strong> - porovnání variant UI</li><li><strong>Accessibility testy</strong> - testování přístupnosti</li></ul><div><br></div><div><strong>Automatizace:</strong></div><ul><li>CI/CD pipeline integration</li><li>Pre-commit hooks</li><li>Automated test runs</li><li>Test coverage reporting</li></ul>"

9. Dokumentace a testování frontendu - Unit testy a dokumentace zdrojového kódu	"<div><strong>Unit testy a dokumentace zdrojového kódu</strong></div><div><br></div><div><strong>Unit testy - základy:</strong></div><ul><li><strong>Izolované testování</strong> - jedna funkce/komponenta</li><li><strong>Fast feedback</strong> - rychlé spouštění</li><li><strong>Deterministic</strong> - stejný výsledek při opakování</li><li><strong>Independent</strong> - nezávislé na pořadí spouštění</li></ul><div><br></div><div><strong>Struktura unit testu:</strong></div><ul><li><strong>Setup</strong> - příprava testovacích dat</li><li><strong>Exercise</strong> - vykonání testované funkcionaliky</li><li><strong>Verify</strong> - ověření očekávaného výsledku</li><li><strong>Teardown</strong> - úklid po testu</li></ul><div><br></div><div><strong>Dokumentace kódu:</strong></div><ul><li><strong>JSDoc komentáře</strong> - @param, @returns, @example</li><li><strong>TypeScript typy</strong> - statická typová kontrola</li><li><strong>README soubory</strong> - popis modulů a komponent</li><li><strong>Code comments</strong> - vysvětlení komplexní logiky</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Describovat test cases jasně</li><li>Používat meaningful test names</li><li>Minimal setup pro každý test</li><li>Test only public interface</li><li>Mock external dependencies</li></ul><div><br></div><div><strong>Nástroje:</strong> Jest, Mocha, Chai, Sinon, Testing Library</div>"