3. Frontendové knihovny a komponentový přístup - Moderní frontendové knihovny	"<div><strong>Moderní frontendové knihovny</strong></div><div><br></div><div>Současné knihovny pro vývoj <strong>interaktivních uživatelských rozhraní</strong> s komponentovou architekturou.</div><div><br></div><ul><li><strong>React</strong> - Facebook, virtuální DOM, JSX</li><li><strong>Vue.js</strong> - progresivní framework, template syntax</li><li><strong>Angular</strong> - Google, TypeScript, dependency injection</li><li><strong>Svelte</strong> - compiler-based, žádný runtime</li></ul><div><br></div><div><strong>Společné charakteristiky:</strong></div><ul><li><strong>Komponentová architektura</strong> - modulární struktura</li><li><strong>Reaktivní data binding</strong> - automatické UI aktualizace</li><li><strong>Virtuální DOM</strong> - optimalizace renderingu</li><li><strong>Ekosystém nástrojů</strong> - CLI, devtools, knihovny</li></ul>"

3. Frontendové knihovny a komponentový přístup - React charakteristiky	"<div><strong>React - vlastnosti a využití</strong></div><div><br></div><div><strong>React</strong> je deklarativní knihovna pro tvorbu uživatelských rozhraní založená na komponentech.</div><div><br></div><ul><li><strong>JSX syntax</strong> - HTML v JavaScriptu</li><li><strong>Virtual DOM</strong> - efektivní re-rendering</li><li><strong>Unidirectional data flow</strong> - jednosměrný tok dat</li><li><strong>Hooks</strong> - funkcionální komponenty se stavem</li></ul><div><br></div><div><strong>Klíčové koncepty:</strong></div><ul><li><strong>State management</strong> - useState, useReducer</li><li><strong>Effects</strong> - useEffect pro side effects</li><li><strong>Component lifecycle</strong> - mounting, updating, unmounting</li></ul><div><br></div><div><strong>Ekosystém:</strong> Next.js, React Router, Redux, styled-components</div>"

3. Frontendové knihovny a komponentový přístup - Vue.js charakteristiky	"<div><strong>Vue.js - progresivní framework</strong></div><div><br></div><div><strong>Vue.js</strong> je progresivní framework umožňující postupnou adopci od jednoduchých stránek po složité SPA.</div><div><br></div><ul><li><strong>Template syntax</strong> - HTML-based templating</li><li><strong>Reactivity system</strong> - proxy-based reaktivita</li><li><strong>Single File Components</strong> - .vue soubory</li><li><strong>Composition API</strong> - funkcionální přístup (Vue 3)</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li><strong>Gentle learning curve</strong> - snadné učení</li><li><strong>Excellent documentation</strong> - kvalitní dokumentace</li><li><strong>Progressive adoption</strong> - postupná integrace</li></ul><div><br></div><div><strong>Ekosystém:</strong> Nuxt.js, Vue Router, Vuex/Pinia, Vuetify</div>"

3. Frontendové knihovny a komponentový přístup - Co je komponent	"<div><strong>Co je komponent</strong></div><div><br></div><div><strong>Komponent</strong> je nezávislý, znovupoužitelný blok kódu, který enkapsuluje část uživatelského rozhraní.</div><div><br></div><ul><li><strong>Enkapsulace</strong> - izolovaný kód a styl</li><li><strong>Reusability</strong> - použitelný na více místech</li><li><strong>Kompozice</strong> - kombinování menších komponent</li><li><strong>Abstrakce</strong> - skrytí implementačních detailů</li></ul><div><br></div><div><strong>Struktura komponenty:</strong></div><ul><li><strong>Props</strong> - vstupní parametry</li><li><strong>State</strong> - vnitřní stav</li><li><strong>Methods/Events</strong> - funkcionalita a komunikace</li><li><strong>Template/Render</strong> - vizuální reprezentace</li></ul><div><br></div><div><strong>Příklad:</strong> Button, Modal, Form, Navigation</div>"

3. Frontendové knihovny a komponentový přístup - Komponentová hierarchie	"<div><strong>Komponentová hierarchie a komunikace</strong></div><div><br></div><div>Komponenty tvoří <strong>stromovou strukturu</strong> s definovanými způsoby komunikace.</div><div><br></div><ul><li><strong>Parent → Child</strong> - předávání dat přes props</li><li><strong>Child → Parent</strong> - events/callbacks</li><li><strong>Sibling komunikace</strong> - přes společný parent</li><li><strong>Context/Provider</strong> - globální stav</li></ul><div><br></div><div><strong>Architektury:</strong></div><ul><li><strong>Container/Presentational</strong> - smart vs dumb components</li><li><strong>Atomic Design</strong> - atoms, molecules, organisms</li><li><strong>Feature-based</strong> - komponenty podle funkcionalit</li></ul><div><br></div><div><strong>Best practices:</strong> Single responsibility, prop drilling avoidance</div>"

3. Frontendové knihovny a komponentový přístup - Konfigurace komponent	"<div><strong>Konfigurace komponent</strong></div><div><br></div><div>Komponenty se konfigurují pomocí <strong>props</strong> a dalších mechanismů pro flexibilní použití.</div><div><br></div><ul><li><strong>Props</strong> - základní konfigurace (data, callbacks)</li><li><strong>Default props</strong> - výchozí hodnoty</li><li><strong>Prop validation</strong> - TypeScript, PropTypes</li><li><strong>Slots/Children</strong> - vkládání obsahu</li></ul><div><br></div><div><strong>Pokročilé techniky:</strong></div><ul><li><strong>Render props</strong> - funkce jako props</li><li><strong>Higher-Order Components</strong> - wrapper komponenty</li><li><strong>Compound components</strong> - související komponenty</li><li><strong>Polymorphic components</strong> - změna HTML tagu</li></ul><div><br></div><div><strong>Cíl:</strong> Maximální flexibilita s minimální složitostí API</div>"

3. Frontendové knihovny a komponentový přístup - Design systémy	"<div><strong>Design systémy a znovupoužitelnost</strong></div><div><br></div><div><strong>Design systém</strong> je konzistentní sada znovupoužitelných komponent s jednotným designem.</div><div><br></div><ul><li><strong>Component library</strong> - sada základních komponent</li><li><strong>Design tokens</strong> - barvy, typography, spacing</li><li><strong>Guidelines</strong> - pravidla používání</li><li><strong>Documentation</strong> - Storybook, Styleguidist</li></ul><div><br></div><div><strong>Populární systémy:</strong></div><ul><li><strong>Material-UI/MUI</strong> - Google Material Design</li><li><strong>Ant Design</strong> - enterprise aplikace</li><li><strong>Chakra UI</strong> - modular a accessible</li><li><strong>Bootstrap React</strong> - Bootstrap komponenty</li></ul><div><br></div><div><strong>Výhody:</strong> Konzistence, rychlost vývoje, maintainability</div>"

3. Frontendové knihovny a komponentový přístup - State management	"<div><strong>State management v komponentových aplikacích</strong></div><div><br></div><div>Správa stavu je klíčová pro <strong>komplexní komponentové aplikace</strong> s sdílenými daty.</div><div><br></div><ul><li><strong>Local state</strong> - stav konkrétní komponenty</li><li><strong>Lifted state</strong> - stav v parent komponentě</li><li><strong>Global state</strong> - aplikačně široký stav</li><li><strong>Server state</strong> - data ze serveru</li></ul><div><br></div><div><strong>Řešení pro global state:</strong></div><ul><li><strong>Redux</strong> - predictable state container</li><li><strong>Zustand</strong> - lightweight state management</li><li><strong>Jotai</strong> - atomická state management</li><li><strong>Context API</strong> - React nativní řešení</li></ul><div><br></div><div><strong>Principy:</strong> Single source of truth, immutability, unidirectional flow</div>"