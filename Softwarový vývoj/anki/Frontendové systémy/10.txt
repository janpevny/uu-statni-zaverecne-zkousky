10. Identita uživatele - Autentizace vs Autorizace	"<div><strong>Autentizace vs Autorizace</strong></div><div><br></div><div><strong>Autentizace (Authentication):</strong></div><ul><li><strong>Ověření identity</strong> - kdo je uživatel</li><li><strong>Metody:</strong> heslo, 2FA, biometrie, SSO</li><li><strong>Výsledek:</strong> potvrzení totožnosti</li></ul><div><br></div><div><strong>Autorizace (Authorization):</strong></div><ul><li><strong>Řízení přístupu</strong> - co může uživatel dělat</li><li><strong>Metody:</strong> role-based (RBAC), attribute-based (ABAC), ACL</li><li><strong>Výsledek:</strong> povolení/zamítnutí akce</li></ul><div><br></div><div><strong>Proces:</strong></div><div>1. Autentizace → 2. Autorizace → 3. Přístup k prostředku</div><div><br></div><div><strong>Technologie:</strong></div><ul><li><strong>JWT tokens</strong> - obsahují identity claims</li><li><strong>OAuth 2.0</strong> - autorizační framework</li><li><strong>OpenID Connect</strong> - identitní vrstva nad OAuth</li><li><strong>LDAP/Active Directory</strong> - správa uživatelů</li></ul><div><br></div><div><strong>Příklad:</strong></div><div>Login (autentizace) → Kontrola oprávnění k editaci článku (autorizace)</div>"

10. Identita uživatele - JWT tokeny	"<div><strong>JSON Web Tokens (JWT)</strong></div><div><br></div><div><strong>Struktura JWT:</strong></div><ol><li><strong>Header</strong> - typ tokenu a algoritmus podpisu</li><li><strong>Payload</strong> - claims (tvrzení o uživateli)</li><li><strong>Signature</strong> - digitální podpis pro ověření integrity</li></ol><div><br></div><div><strong>Typy claims:</strong></div><ul><li><strong>Registered</strong> - standardní (iss, exp, sub, aud)</li><li><strong>Public</strong> - veřejně definované</li><li><strong>Private</strong> - custom aplikační data</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Self-contained - obsahuje všechny potřebné informace</li><li>Stateless - server nepotřebuje ukládat session</li><li>Škálovatelnost</li><li>Cross-domain použití</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Velikost tokenu</li><li>Obtížné revoking (zneplatnění)</li><li>Bezpečnostní rizika při špatném použití</li></ul><div><br></div><div><strong>Použití:</strong></div><div>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</div><div><br></div><div><strong>Knihovny:</strong> jose (Node.js), PyJWT (Python), jjwt (Java)</div>"

10. Identita uživatele - Session management	"<div><strong>Správa sessions (relací)</strong></div><div><br></div><div><strong>Tradiční session:</strong></div><ul><li><strong>Server-side storage</strong> - data uložena na serveru</li><li><strong>Session ID</strong> - identifikátor v cookie</li><li><strong>Stateful</strong> - server si pamatuje stav</li></ul><div><br></div><div><strong>Implementace:</strong></div><ul><li><strong>In-memory</strong> - rychlé, ale neškáluje</li><li><strong>Database</strong> - perzistentní, škálovatelné</li><li><strong>Redis/Memcached</strong> - rychlé, distribuované</li></ul><div><br></div><div><strong>Bezpečnost sessions:</strong></div><ul><li><strong>Secure cookie flag</strong> - pouze HTTPS</li><li><strong>HttpOnly flag</strong> - ochrana před XSS</li><li><strong>SameSite</strong> - ochrana před CSRF</li><li><strong>Session timeout</strong> - automatické vypršení</li><li><strong>Session regeneration</strong> - nové ID po přihlášení</li></ul><div><br></div><div><strong>Výhody vs JWT:</strong></div><ul><li>Snadné revoking</li><li>Menší velikost cookie</li><li>Server má plnou kontrolu</li></ul><div><br></div><div><strong>Nevýhody vs JWT:</strong></div><ul><li>Stateful - složitější škálování</li><li>Závislost na server storage</li><li>Session fixation útoky</li></ul>"

10. Identita uživatele - OAuth 2.0 a OpenID Connect	"<div><strong>OAuth 2.0 Framework</strong></div><div><br></div><div><strong>Účel:</strong></div><div>Autorizační framework pro delegování přístupu k prostředkům bez sdílení credentials</div><div><br></div><div><strong>Role v OAuth:</strong></div><ul><li><strong>Resource Owner</strong> - vlastník prostředku (uživatel)</li><li><strong>Client</strong> - aplikace žádající o přístup</li><li><strong>Authorization Server</strong> - vydává tokeny</li><li><strong>Resource Server</strong> - chrání prostředky</li></ul><div><br></div><div><strong>Grant types:</strong></div><ul><li><strong>Authorization Code</strong> - nejbezpečnější pro web apps</li><li><strong>Client Credentials</strong> - server-to-server</li><li><strong>PKCE</strong> - pro mobile/SPA aplikace</li></ul><div><br></div><div><strong>OpenID Connect (OIDC):</strong></div><ul><li>Identitní vrstva nad OAuth 2.0</li><li><strong>ID Token</strong> - JWT s informacemi o uživateli</li><li><strong>UserInfo endpoint</strong> - dodatečné user claims</li></ul><div><br></div><div><strong>Použití:</strong></div><div>\"Login with Google\", \"Login with Facebook\" - využívají OIDC</div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Standardizované řešení</li><li>Bezpečné delegování</li><li>Single Sign-On možnosti</li></ul>"

10. Identita uživatele - Single Sign-On (SSO)	"<div><strong>Single Sign-On (SSO)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Jeden login pro přístup k více aplikacím nebo systémům</div><div><br></div><div><strong>Protokoly:</strong></div><ul><li><strong>SAML 2.0</strong> - XML-based, enterprise řešení</li><li><strong>OpenID Connect</strong> - JSON/REST-based, moderní</li><li><strong>CAS</strong> - Central Authentication Service</li><li><strong>Kerberos</strong> - network authentication protocol</li></ul><div><br></div><div><strong>Typy SSO:</strong></div><ul><li><strong>Enterprise SSO</strong> - Active Directory, LDAP</li><li><strong>Web SSO</strong> - cross-domain web aplikace</li><li><strong>Social SSO</strong> - Google, Facebook, Microsoft</li></ul><div><br></div><div><strong>SAML flow:</strong></div><div>1. Uživatel → App → 2. Redirect na IdP → 3. Autentizace → 4. SAML assertion → 5. Přístup</div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Lepší user experience</li><li>Centralizovaná správa uživatelů</li><li>Snížení password fatigue</li><li>Compliance a audit</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Single point of failure</li><li>Složitější implementace</li><li>Vendor lock-in riziko</li></ul><div><br></div><div><strong>Providers:</strong> Auth0, Okta, Azure AD, Google Workspace</div>"

10. Identita uživatele - Správa identity ve frontendové aplikaci	"<div><strong>Frontend Identity Management</strong></div><div><br></div><div><strong>Ukládání tokenů:</strong></div><ul><li><strong>LocalStorage</strong> - persistentní, ale XSS vulnerable</li><li><strong>SessionStorage</strong> - session-based, stále XSS risk</li><li><strong>Memory</strong> - nejbezpečnější, ale ztráta při refresh</li><li><strong>HttpOnly cookies</strong> - nejbezpečnější pro session</li></ul><div><br></div><div><strong>Token management:</strong></div><ul><li><strong>Access token</strong> - krátká životnost (15 min)</li><li><strong>Refresh token</strong> - delší životnost, pro obnovení</li><li><strong>Automatic refresh</strong> - background token renewal</li><li><strong>Token expiration handling</strong> - logout při expiraci</li></ul><div><br></div><div><strong>React/Vue patterns:</strong></div><ul><li><strong>Context/Store</strong> - globální auth state</li><li><strong>Protected routes</strong> - Route guards</li><li><strong>Axios/Fetch interceptors</strong> - automatické přidání tokenů</li><li><strong>Auth hooks/composables</strong> - reusable auth logic</li></ul><div><br></div><div><strong>Bezpečnostní opatření:</strong></div><ul><li>HTTPS pouze</li><li>Secure token storage</li><li>CSRF protection</li><li>XSS prevention</li><li>Content Security Policy</li></ul><div><br></div><div><strong>Knihovny:</strong> Auth0 SPA SDK, Firebase Auth, AWS Amplify</div>"

10. Identita uživatele - Komunikace se serverem pod identitou	"<div><strong>Autentizovaná komunikace se serverem</strong></div><div><br></div><div><strong>HTTP Headers pro autentizaci:</strong></div><ul><li><strong>Authorization: Bearer {token}</strong> - JWT token</li><li><strong>Authorization: Basic {credentials}</strong> - base64 encoded</li><li><strong>X-API-Key: {key}</strong> - API klíč</li><li><strong>Cookie</strong> - session identifier</li></ul><div><br></div><div><strong>Implementace v JavaScriptu:</strong></div><div>fetch('/api/data', {</div><div>&nbsp;&nbsp;headers: { 'Authorization': 'Bearer ' + token }</div><div>})</div><div><br></div><div><strong>Axios interceptor:</strong></div><div>axios.interceptors.request.use(config => {</div><div>&nbsp;&nbsp;config.headers.Authorization = `Bearer ${getToken()}`</div><div>&nbsp;&nbsp;return config</div><div>})</div><div><br></div><div><strong>Error handling:</strong></div><ul><li><strong>401 Unauthorized</strong> - token neplatný/expirovaný</li><li><strong>403 Forbidden</strong> - nedostatečná oprávnění</li><li><strong>Token refresh</strong> - automatické obnovení</li><li><strong>Logout</strong> - při kritických chybách</li></ul><div><br></div><div><strong>Bezpečnostní aspekty:</strong></div><ul><li>Token validation na serveru</li><li>Rate limiting per user</li><li>Audit logging</li><li>Secure token transmission</li></ul>"

10. Identita uživatele - Multi-factor Authentication (MFA)	"<div><strong>Multi-factor Authentication (MFA)</strong></div><div><br></div><div><strong>Faktory autentizace:</strong></div><ul><li><strong>Something you know</strong> - heslo, PIN</li><li><strong>Something you have</strong> - telefon, token</li><li><strong>Something you are</strong> - biometrie</li></ul><div><br></div><div><strong>Implementace MFA:</strong></div><ul><li><strong>SMS kódy</strong> - jednoduché, ale SIM swapping risk</li><li><strong>TOTP (Time-based OTP)</strong> - Google Authenticator, Authy</li><li><strong>Push notifications</strong> - mobilní app approvals</li><li><strong>Hardware tokeny</strong> - YubiKey, RSA SecurID</li><li><strong>Biometrie</strong> - otisk prstu, Face ID</li></ul><div><br></div><div><strong>TOTP implementace:</strong></div><ul><li>Sdílený secret mezi serverem a klientem</li><li>30-sekundové časové okno</li><li>RFC 6238 standard</li><li>QR kód pro setup</li></ul><div><br></div><div><strong>UX considerations:</strong></div><ul><li>Remember device option</li><li>Backup codes</li><li>Progressive MFA (risk-based)</li><li>Recovery mechanismy</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Významně vyšší bezpečnost</li><li>Ochrana proti credential theft</li><li>Compliance požadavky</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Složitější UX</li><li>Device dependency</li><li>Recovery complexity</li></ul>"