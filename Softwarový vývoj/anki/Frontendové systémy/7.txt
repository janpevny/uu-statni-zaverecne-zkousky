7. Mockování - Definice a účel mockování	"<div><strong>Co je to mockování?</strong></div><div><br></div><div>Mockování je technika <strong>simulace závislostí</strong> v softwaru pomocí falešných objektů (mock objects) místo skutečných implementací.</div><div><br></div><ul><li><strong>Mock objekty</strong> - falešné implementace rozhraní nebo tříd</li><li><strong>Stub</strong> - poskytuje předem definované odpovědi</li><li><strong>Fake</strong> - zjednodušená implementace s business logikou</li><li><strong>Spy</strong> - zachycuje informace o volání</li></ul><div><br></div><div><strong>Účel mockování:</strong></div><ul><li>Izolace testovaného kódu</li><li>Testování bez externích závislostí</li><li>Rychlejší a spolehlivější testy</li><li>Prototypování před implementací backendu</li></ul>"

7. Mockování - Frontend mockování bez backendu	"<div><strong>Prototypování frontendu bez backendu</strong></div><div><br></div><div>Vývoj uživatelského rozhraní <strong>před dokončením backend API</strong> pomocí simulovaných dat.</div><div><br></div><ul><li><strong>Statická mock data</strong> - JSON soubory s ukázkovými daty</li><li><strong>Mock API servery</strong> - simulace REST/GraphQL endpointů</li><li><strong>Service Workers</strong> - interceptování HTTP požadavků</li><li><strong>HTTP interceptory</strong> - modifikace síťových volání</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Paralelní vývoj frontend/backend týmů</li><li>Rychlejší iterace UI prototypů</li><li>Testování edge cases</li><li>Konzistentní vývojové prostředí</li></ul>"

7. Mockování - Mock servery a nástroje	"<div><strong>Nástroje pro mock servery</strong></div><div><br></div><div>Specializované nástroje pro <strong>simulaci API endpointů</strong> během vývoje frontendu.</div><div><br></div><ul><li><strong>JSON Server</strong> - rychlý REST API z JSON souboru</li><li><strong>Postman Mock Server</strong> - cloudové API mockování</li><li><strong>WireMock</strong> - pokročilé HTTP mockování (Java)</li><li><strong>Mockoon</strong> - desktop aplikace pro API mocking</li></ul><div><br></div><div><strong>Online služby:</strong></div><ul><li><strong>MockAPI</strong> - cloud-based RESTful API</li><li><strong>Mocky.io</strong> - jednoduchý HTTP mock</li><li><strong>Httpbin</strong> - testování HTTP klientů</li></ul><div><br></div><div><strong>Konfigurace:</strong> Definice endpointů, HTTP metod, response formátů</div>"

7. Mockování - Interceptory a middleware	"<div><strong>HTTP interceptory a middleware</strong></div><div><br></div><div>Techniky pro <strong>zachycení a modifikaci</strong> síťových požadavků na úrovni klienta.</div><div><br></div><ul><li><strong>Axios interceptors</strong> - request/response middleware</li><li><strong>Fetch API wrapper</strong> - vlastní implementace s mocky</li><li><strong>MSW (Mock Service Worker)</strong> - browser/Node.js mocking</li><li><strong>Nock</strong> - HTTP server mocking pro Node.js</li></ul><div><br></div><div><strong>Service Worker approach:</strong></div><ul><li>Registrace SW pro zachycení requestů</li><li>Conditional mocking (dev/prod režim)</li><li>Offline-first development</li></ul><div><br></div><div><strong>Implementace:</strong> Podmíněné mockování podle environment proměnných</div>"

7. Mockování - Testovací mockování	"<div><strong>Mockování v testech</strong></div><div><br></div><div>Použití mock objektů pro <strong>izolované unit testy</strong> frontend komponent a služeb.</div><div><br></div><ul><li><strong>Jest mocks</strong> - automatické a manuální mockování</li><li><strong>Vitest</strong> - modern testing s mock podporou</li><li><strong>Sinon.js</strong> - spies, stubs, mocks pro JavaScript</li><li><strong>Testing Library</strong> - mock functions pro React/Vue testy</li></ul><div><br></div><div><strong>Typy testovacích mocků:</strong></div><ul><li><strong>Module mocks</strong> - mockování celých modulů</li><li><strong>Function mocks</strong> - simulace jednotlivých funkcí</li><li><strong>API client mocks</strong> - fake HTTP responses</li></ul><div><br></div><div><strong>Příklad:</strong> `jest.fn()`, `vi.mock()`, `sinon.stub()`</div>"

7. Mockování - Component mockování	"<div><strong>Mockování React/Vue komponent</strong></div><div><br></div><div>Techniki pro <strong>nahrazení složitých komponent</strong> jednoduššími mock implementacemi.</div><div><br></div><ul><li><strong>Shallow rendering</strong> - testování bez child komponent</li><li><strong>Mock komponenty</strong> - zjednodušené implementace</li><li><strong>Props drilling simulation</strong> - testování data flow</li><li><strong>Context providers mocking</strong> - fake aplikační stav</li></ul><div><br></div><div><strong>React Testing Library:</strong></div><ul><li><strong>render()</strong> - s mock providers</li><li><strong>screen.getBy()</strong> - queries na mock elementy</li><li><strong>userEvent</strong> - simulace uživatelských interakcí</li></ul><div><br></div><div><strong>Výhoda:</strong> Rychlé testy bez komplexních závislostí</div>"

7. Mockování - Data mockování strategie	"<div><strong>Strategie pro mockování dat</strong></div><div><br></div><div>Přístupy k <strong>generování a správě</strong> testovacích a vývojových dat.</div><div><br></div><ul><li><strong>Fixtures</strong> - statické JSON soubory s ukázkovými daty</li><li><strong>Factories</strong> - generátory objektů s náhodnými daty</li><li><strong>Seeding</strong> - automatické naplnění databáze</li><li><strong>Faker.js</strong> - generování realistických fake dat</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li><strong>Realistic data</strong> - podobná produkčním datům</li><li><strong>Edge cases</strong> - dlouhé texty, speciální znaky</li><li><strong>Consistent schemas</strong> - dodržení API kontraktů</li><li><strong>Versioning</strong> - správa verzí mock dat</li></ul><div><br></div><div><strong>Nástroje:</strong> Factory Bot, Chance.js, JSON Schema Faker</div>"

7. Mockování - Mock API design patterns	"<div><strong>Design patterns pro Mock API</strong></div><div><br></div><div>Osvědčené vzory pro <strong>navrhování mock rozhraní</strong> během prototypování.</div><div><br></div><ul><li><strong>Contract-first</strong> - definice API před implementací</li><li><strong>OpenAPI/Swagger</strong> - specifikace a mockování z docs</li><li><strong>GraphQL mocking</strong> - schema-based fake resolvers</li><li><strong>Response templates</strong> - dynamické generování odpovědí</li></ul><div><br></div><div><strong>Patterns:</strong></div><ul><li><strong>CRUD operations</strong> - standardní REST endpoint simulace</li><li><strong>Pagination mocking</strong> - velkých datových sad</li><li><strong>Error scenarios</strong> - simulace chybových stavů</li><li><strong>Latency simulation</strong> - real-world network delays</li></ul><div><br></div><div><strong>Výsledek:</strong> Realistic API behavior před backend implementací</div>"