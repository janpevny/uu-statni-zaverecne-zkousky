4. Komunikace se serverem - HTTP protokol a REST API	"<div><strong>HTTP protokol a REST API</strong></div><div><br></div><div><strong>HTTP protokol</strong></div><ul><li><strong>GET</strong> - načítání dat ze serveru</li><li><strong>POST</strong> - vytváření nových zdrojů</li><li><strong>PUT</strong> - aktualizace celého zdroje</li><li><strong>PATCH</strong> - částečná aktualizace zdroje</li><li><strong>DELETE</strong> - mazání zdrojů</li></ul><div><br></div><div><strong>REST API principy</strong></div><ul><li><strong>Stateless</strong> - každý požadavek obsahuje všechny potřebné informace</li><li><strong>Uniform Interface</strong> - jednotné rozhraní pro všechny operace</li><li><strong>Resource-based</strong> - vše je reprezentováno jako zdroj s URL</li><li><strong>Cacheable</strong> - odpovědi lze cachovat pro vyšší výkon</li></ul><div><br></div><div><strong>Praktické příklady</strong></div><ul><li>GET /api/users - seznam všech uživatelů</li><li>POST /api/users - vytvoření nového uživatele</li><li>PUT /api/users/123 - aktualizace uživatele s ID 123</li></ul>"

4. Komunikace se serverem - AJAX a Fetch API	"<div><strong>AJAX a Fetch API</strong></div><div><br></div><div><strong>AJAX (Asynchronous JavaScript and XML)</strong></div><ul><li><strong>XMLHttpRequest</strong> - starší způsob asynchronní komunikace</li><li><strong>Asynchronní</strong> - neblokuje uživatelské rozhraní</li><li><strong>Částečné aktualizace</strong> - možnost aktualizovat pouze část stránky</li><li><strong>Různé formáty</strong> - JSON, XML, HTML, plain text</li></ul><div><br></div><div><strong>Fetch API</strong></div><ul><li><strong>Modernější přístup</strong> - nativní JavaScript API</li><li><strong>Promise-based</strong> - využívá Promises pro asynchronní operace</li><li><strong>Lepší error handling</strong> - detailnější zpracování chyb</li><li><strong>Flexibilnější</strong> - snadnější konfigurace requestů</li></ul><div><br></div><div><strong>Příklad Fetch API</strong></div><ul><li>fetch('/api/data').then(response => response.json())</li><li>Podporuje async/await syntaxi</li><li>Automatické parsování JSON odpovědí</li></ul>"

4. Komunikace se serverem - Axios a HTTP knihovny	"<div><strong>Axios a HTTP knihovny</strong></div><div><br></div><div><strong>Axios knihovna</strong></div><ul><li><strong>Promise-based</strong> - moderní asynchronní přístup</li><li><strong>Request/Response interceptors</strong> - middleware pro zpracování</li><li><strong>Automatic JSON parsing</strong> - automatické převody dat</li><li><strong>Request timeout</strong> - ochrana proti visícím requestům</li><li><strong>CSRF protection</strong> - vestavěná ochrana</li></ul><div><br></div><div><strong>Výhody Axios</strong></div><ul><li><strong>Jednodušší syntax</strong> - méně kódu než čistý Fetch</li><li><strong>Širší podpora</strong> - funguje i ve starších prohlížečích</li><li><strong>Globální konfigurace</strong> - nastavení pro celou aplikaci</li><li><strong>Error handling</strong> - lepší zpracování HTTP chyb</li></ul><div><br></div><div><strong>Alternativy</strong></div><ul><li><strong>Ky</strong> - lightweight HTTP klient</li><li><strong>Got</strong> - pro Node.js aplikace</li><li><strong>Superagent</strong> - starší alternativa k Axios</li></ul>"

4. Komunikace se serverem - WebSockets a real-time komunikace	"<div><strong>WebSockets a real-time komunikace</strong></div><div><br></div><div><strong>WebSocket protokol</strong></div><ul><li><strong>Full-duplex</strong> - obousměrná komunikace v reálném čase</li><li><strong>Persistent connection</strong> - trvalé spojení mezi klientem a serverem</li><li><strong>Low latency</strong> - minimální zpoždění</li><li><strong>Upgrade z HTTP</strong> - začíná jako HTTP request</li></ul><div><br></div><div><strong>Použití WebSockets</strong></div><ul><li><strong>Chat aplikace</strong> - okamžité doručování zpráv</li><li><strong>Live data feeds</strong> - aktualizace kurzů, sportovní výsledky</li><li><strong>Collaborative editing</strong> - společná editace dokumentů</li><li><strong>Gaming</strong> - multiplayer hry v reálném čase</li></ul><div><br></div><div><strong>Implementace a knihovny</strong></div><ul><li><strong>Socket.IO</strong> - populární knihovna s fallbacky</li><li><strong>Native WebSocket API</strong> - vestavěná podpora v prohlížečích</li><li><strong>SignalR</strong> - Microsoft řešení pro .NET</li></ul>"

4. Komunikace se serverem - JSON parsing a data transformace	"<div><strong>JSON parsing a data transformace</strong></div><div><br></div><div><strong>JSON (JavaScript Object Notation)</strong></div><ul><li><strong>Lightweight formát</strong> - menší než XML</li><li><strong>Human readable</strong> - snadno čitelný pro programátory</li><li><strong>Native JavaScript support</strong> - přirozená podpora</li><li><strong>Language independent</strong> - podporován většinou jazyků</li></ul><div><br></div><div><strong>JSON operace v JavaScriptu</strong></div><ul><li><strong>JSON.parse()</strong> - převod JSON stringu na objekt</li><li><strong>JSON.stringify()</strong> - převod objektu na JSON string</li><li><strong>Error handling</strong> - try/catch pro nevalidní JSON</li><li><strong>Reviver/Replacer funkce</strong> - custom transformace při parsingu</li></ul><div><br></div><div><strong>Data transformace</strong></div><ul><li><strong>Array.map()</strong> - transformace arrays</li><li><strong>Object destructuring</strong> - extrakce potřebných dat</li><li><strong>Normalizace dat</strong> - převod na konzistentní formát</li></ul>"

4. Komunikace se serverem - Error handling a retry mechanismy	"<div><strong>Error handling a retry mechanismy</strong></div><div><br></div><div><strong>Typy chyb v komunikaci</strong></div><ul><li><strong>Network errors</strong> - výpadky připojení, timeout</li><li><strong>HTTP errors</strong> - 4xx (client), 5xx (server) status kódy</li><li><strong>Parsing errors</strong> - nevalidní JSON, neočekávaná data</li><li><strong>Application errors</strong> - business logic chyby</li></ul><div><br></div><div><strong>Error handling strategie</strong></div><ul><li><strong>Try/catch blocks</strong> - zachycení synchronních chyb</li><li><strong>Promise rejection handling</strong> - .catch() nebo try/catch s async/await</li><li><strong>Status code checking</strong> - kontrola HTTP status kódů</li><li><strong>User-friendly messages</strong> - překlad technických chyb</li></ul><div><br></div><div><strong>Retry mechanismy</strong></div><ul><li><strong>Exponential backoff</strong> - postupné zvyšování intervalu</li><li><strong>Circuit breaker</strong> - dočasné vypnutí při opakovaných chybách</li><li><strong>Timeout handling</strong> - nastavení maximální doby čekání</li></ul>"

4. Komunikace se serverem - Caching a optimalizace požadavků	"<div><strong>Caching a optimalizace požadavků</strong></div><div><br></div><div><strong>HTTP Caching</strong></div><ul><li><strong>Cache-Control headers</strong> - řízení cache chování</li><li><strong>ETag</strong> - validace změn obsahu</li><li><strong>Last-Modified</strong> - timestamp poslední změny</li><li><strong>Browser cache</strong> - automatické ukládání odpovědí</li></ul><div><br></div><div><strong>Aplikační caching</strong></div><ul><li><strong>Memory cache</strong> - ukládání v paměti aplikace</li><li><strong>LocalStorage/SessionStorage</strong> - lokální úložiště prohlížeče</li><li><strong>Service Workers</strong> - offline caching strategie</li><li><strong>CDN</strong> - geograficky distribuované cache</li></ul><div><br></div><div><strong>Optimalizace požadavků</strong></div><ul><li><strong>Batch requests</strong> - sloučení více požadavků</li><li><strong>Pagination</strong> - postupné načítání dat</li><li><strong>Compression</strong> - gzip/brotli komprese</li><li><strong>Request debouncing</strong> - omezení frekvence požadavků</li></ul>"

4. Komunikace se serverem - GraphQL a alternativní přístupy	"<div><strong>GraphQL a alternativní přístupy</strong></div><div><br></div><div><strong>GraphQL</strong></div><ul><li><strong>Single endpoint</strong> - jeden URL pro všechny operace</li><li><strong>Flexible queries</strong> - klient určuje, která data chce</li><li><strong>Type system</strong> - silně typovaná schémata</li><li><strong>Real-time subscriptions</strong> - live data updates</li><li><strong>Introspection</strong> - self-documenting API</li></ul><div><br></div><div><strong>Výhody GraphQL</strong></div><ul><li><strong>Reduced over-fetching</strong> - pouze požadovaná data</li><li><strong>Single round trip</strong> - více zdrojů v jednom requestu</li><li><strong>Versionless</strong> - evoluce bez verzování</li><li><strong>Developer experience</strong> - lepší nástroje pro development</li></ul><div><br></div><div><strong>Alternativní přístupy</strong></div><ul><li><strong>gRPC</strong> - vysokovýkonné RPC</li><li><strong>Server-Sent Events</strong> - jednosměrný stream</li><li><strong>SOAP</strong> - starší XML-based protokol</li></ul>"