14. DevOps/DevSecOps - Development Pipeline	"<div><strong>Development Pipeline</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Automatizovaný proces, který převádí zdrojový kód z vývojového prostředí do produkce prostřednictvím řady kroků</div><div><br></div><div><strong>Základní fáze:</strong></div><ol><li><strong>Source</strong> - správa zdrojového kódu (Git)</li><li><strong>Build</strong> - kompilace a sestavení aplikace</li><li><strong>Test</strong> - automatizované testování</li><li><strong>Deploy</strong> - nasazení do prostředí</li></ol><div><br></div><div><strong>Výhody:</strong></div><ul><li>Automatizace opakujících se úkolů</li><li>Rychlejší a spolehlivější nasazení</li><li>Snížení lidských chyb</li><li>Konzistentní procesy</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Počáteční složitost nastavení</li><li>Potřeba údržby pipeline skriptů</li><li>Závislost na infrastruktuře</li></ul><div><br></div><div><strong>Nástroje:</strong> Jenkins, GitLab CI/CD, GitHub Actions, Azure DevOps, CircleCI</div></div>"

14. DevOps/DevSecOps - Continuous Integration (CI)	"<div><strong>Continuous Integration (CI)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Praktika, kdy vývojáři pravidelně integrují svůj kód do sdíleného repozitáře, přičemž každá integrace je ověřena automatickým buildem a testy</div><div><br></div><div><strong>Klíčové praktiky:</strong></div><ul><li><strong>Častý commit</strong> - minimálně jednou denně</li><li><strong>Automatický build</strong> - při každém commitu</li><li><strong>Automatické testování</strong> - unit, integration testy</li><li><strong>Rychlá zpětná vazba</strong> - notifikace o chybách</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Rychlé odhalení problémů</li><li>Snížení integration hell</li><li>Vyšší kvalita kódu</li><li>Větší důvěra v změny</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Potřeba disciplíny vývojářů</li><li>Náročnost na testovací infrastrukturu</li><li>Možná zpomalení při poruchách</li></ul><div><br></div><div><strong>Nástroje:</strong> Jenkins, Travis CI, GitLab CI, GitHub Actions, TeamCity</div></div>"

14. DevOps/DevSecOps - Continuous Delivery (CD)	"<div><strong>Continuous Delivery (CD)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Softwarová inženýrská praktika, kde kód změny jsou automaticky připraveny pro produkční nasazení po dokončení CI fáze</div><div><br></div><div><strong>Klíčové charakteristiky:</strong></div><ul><li><strong>Automatická příprava</strong> - kód je vždy připraven k nasazení</li><li><strong>Manuální approval</strong> - lidské rozhodnutí o nasazení</li><li><strong>Environmentální parita</strong> - staging ≈ production</li><li><strong>Rollback schopnost</strong> - možnost rychlého vrácení</li></ul><div><br></div><div><strong>Delivery vs Deployment:</strong></div><ul><li><strong>Delivery</strong> - příprava k nasazení (manuální trigger)</li><li><strong>Deployment</strong> - automatické nasazení do produkce</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Snížení rizika nasazení</li><li>Rychlejší time-to-market</li><li>Lepší kvalita release</li><li>Možnost častějších release</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Složitá počáteční konfigurace</li><li>Potřeba robustní testovací strategie</li><li>Vyšší nároky na monitoring</li></ul></div>"

14. DevOps/DevSecOps - Continuous Deployment	"<div><strong>Continuous Deployment</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Praxe automatického nasazení každé změny kódu, která projde všemi testovacími fázemi, přímo do produkčního prostředí bez manuálního zásahu</div><div><br></div><div><strong>Předpoklady:</strong></div><ul><li><strong>Robustní testování</strong> - comprehensive test suite</li><li><strong>Monitoring</strong> - detekce problémů v reálném čase</li><li><strong>Feature flags</strong> - kontrola nad funkcionalitou</li><li><strong>Rychlý rollback</strong> - okamžité vrácení změn</li></ul><div><br></div><div><strong>Deployment strategie:</strong></div><ul><li><strong>Blue-Green</strong> - dvě identická prostředí</li><li><strong>Canary</strong> - postupné nasazení</li><li><strong>Rolling</strong> - postupná výměna instancí</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Nejrychlejší dostupnost funkcí</li><li>Minimální manuální práce</li><li>Konstantní flow změn</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Vysoké riziko při selhání testů</li><li>Potřeba extrémně spolehlivé automatizace</li><li>Náročné na organizační kulturu</li></ul></div>"

14. DevOps/DevSecOps - Kontainerizace základy	"<div><strong>Kontainerizace - základy</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Technologie virtualizace na úrovni operačního systému, která umožňuje balení aplikace a jejích závislostí do izolovaných, přenosných kontejnerů</div><div><br></div><div><strong>Klíčové koncepty:</strong></div><ul><li><strong>Image</strong> - neměnný template pro kontejner</li><li><strong>Container</strong> - běžící instance image</li><li><strong>Dockerfile</strong> - instrukce pro sestavení image</li><li><strong>Registry</strong> - úložiště pro images (Docker Hub)</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Konzistence prostředí</li><li>Rychlé spouštění</li><li>Efektivní využití zdrojů</li><li>Snadné škálování</li><li>Izolace aplikací</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Bezpečnostní rizika při nesprávné konfiguraci</li><li>Složitější debugging</li><li>Potřeba orchestrace pro produkci</li><li>Persistent data management</li></ul><div><br></div><div><strong>Hlavní nástroje:</strong> Docker, Podman, containerd, CRI-O</div></div>"

14. DevOps/DevSecOps - Container Orchestration	"<div><strong>Container Orchestration</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Automatizované řízení, koordinace a správa kontejnerů ve velkém měřítku včetně jejich nasazení, škálování a síťování</div><div><br></div><div><strong>Klíčové funkce:</strong></div><ul><li><strong>Deployment management</strong> - nasazení kontejnerů</li><li><strong>Service discovery</strong> - nalezení služeb</li><li><strong>Load balancing</strong> - distribuce zátěže</li><li><strong>Auto-scaling</strong> - automatické škálování</li><li><strong>Health monitoring</strong> - sledování stavu</li><li><strong>Rolling updates</strong> - postupné aktualizace</li></ul><div><br></div><div><strong>Kubernetes koncepty:</strong></div><ul><li><strong>Pod</strong> - základní jednotka nasazení</li><li><strong>Service</strong> - síťový přístup k podům</li><li><strong>Deployment</strong> - řízení replik podů</li><li><strong>ConfigMap/Secret</strong> - konfigurace</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Automatizovaná správa</li><li>Vysoká dostupnost</li><li>Efektivní využití zdrojů</li><li>Deklarativní konfigurace</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Vysoká komplexita</li><li>Steep learning curve</li><li>Resource overhead</li></ul><div><br></div><div><strong>Nástroje:</strong> Kubernetes, Docker Swarm, Apache Mesos, OpenShift</div></div>"

14. DevOps/DevSecOps - DevSecOps Security	"<div><strong>DevSecOps - Security Integration</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Filosofie a praxe integrace bezpečnostních praktik do celého DevOps procesu od počáteční fáze vývoje</div><div><br></div><div><strong>Shift-left Security:</strong></div><ul><li><strong>Security by Design</strong> - bezpečnost od začátku</li><li><strong>SAST</strong> - Static Application Security Testing</li><li><strong>DAST</strong> - Dynamic Application Security Testing</li><li><strong>SCA</strong> - Software Composition Analysis</li><li><strong>Infrastructure as Code security</strong></li></ul><div><br></div><div><strong>Pipeline Security:</strong></div><ul><li>Vulnerability scanning v CI/CD</li><li>Container image security scanning</li><li>Secrets management</li><li>Compliance checking</li><li>Security testing automation</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Časné odhalení bezpečnostních problémů</li><li>Snížení nákladů na opravu</li><li>Kontinuální compliance</li><li>Rychlejší response na hrozby</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Složitější počáteční nastavení</li><li>Potřeba bezpečnostní expertízy</li><li>Možné zpomalení pipeline</li></ul><div><br></div><div><strong>Nástroje:</strong> SonarQube, Snyk, OWASP ZAP, Checkmarx, Veracode, HashiCorp Vault</div></div>"

14. DevOps/DevSecOps - Monitoring a Observability	"<div><strong>Monitoring a Observability</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Monitoring sleduje známé problémy, Observability umožňuje pochopit neznámé problémy analýzou systémových výstupů</div><div><br></div><div><strong>Tři pilíře Observability:</strong></div><ol><li><strong>Logs</strong> - textové záznamy událostí</li><li><strong>Metrics</strong> - číselné hodnoty v čase</li><li><strong>Traces</strong> - cesta požadavku systémem</li></ol><div><br></div><div><strong>Klíčové metriky:</strong></div><ul><li><strong>SLI</strong> (Service Level Indicators) - měřené hodnoty</li><li><strong>SLO</strong> (Service Level Objectives) - cílové hodnoty</li><li><strong>SLA</strong> (Service Level Agreements) - smlouva s uživateli</li><li><strong>Error Budget</strong> - tolerované množství chyb</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Proaktivní řešení problémů</li><li>Rychlejší root cause analysis</li><li>Data-driven rozhodování</li><li>Lepší uživatelská zkušenost</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Vysoký objem dat</li><li>Komplexní nastavení</li><li>Náklady na storage a zpracování</li></ul><div><br></div><div><strong>Nástroje:</strong> Prometheus + Grafana, ELK Stack, Datadog, New Relic, Jaeger, Zipkin</div></div>"