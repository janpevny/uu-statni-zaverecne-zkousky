1. Základní koncepty architektury back-endových systémů - Aplikační server	"<div><strong>Aplikační server (Application Server)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Middleware komponenta poskytující runtime prostředí pro spouštění podnikových aplikací a webových služeb</div><div><br></div><div><strong>Hlavní funkce:</strong></div><ul><li><strong>Zpracování HTTP požadavků</strong> - příjem a odpověď na klientské požadavky</li><li><strong>Řízení spojení</strong> - connection pooling, session management</li><li><strong>Bezpečnost</strong> - autentifikace, autorizace, SSL/TLS</li><li><strong>Transaction management</strong> - ACID transakce, rollback</li><li><strong>Resource pooling</strong> - databázová spojení, thread pooling</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Centralizované řízení aplikací</li><li>Škálovatelnost a load balancing</li><li>Správa zdrojů a bezpečnosti</li><li>Monitoring a logging</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Komplexní konfigurace</li><li>Vendor lock-in</li><li>Overhead pro malé aplikace</li><li>Single point of failure</li></ul><div><br></div><div><strong>Příklady:</strong> Apache Tomcat, JBoss/WildFly, WebSphere, IIS, Nginx</div>"

1. Základní koncepty architektury back-endových systémů - REST API služby	"<div><strong>REST API služby</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Architektonický styl pro návrh webových služeb založený na HTTP protokolu a principech REST (Representational State Transfer)</div><div><br></div><div><strong>REST principy:</strong></div><ul><li><strong>Stateless</strong> - každý požadavek obsahuje všechny potřebné informace</li><li><strong>Uniform Interface</strong> - standardní HTTP metody (GET, POST, PUT, DELETE)</li><li><strong>Client-Server</strong> - oddělení klienta od serveru</li><li><strong>Cacheable</strong> - odpovědi mohou být cache-ovány</li><li><strong>Layered System</strong> - vrstvená architektura</li></ul><div><br></div><div><strong>HTTP metody:</strong></div><ul><li><strong>GET</strong> - načtení dat (read)</li><li><strong>POST</strong> - vytvoření nového zdroje (create)</li><li><strong>PUT</strong> - úplná aktualizace (update)</li><li><strong>PATCH</strong> - částečná aktualizace</li><li><strong>DELETE</strong> - smazání zdroje</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Jednoduchost a čitelnost</li><li>Platform independent</li><li>Škálovatelnost</li><li>Cache-ability</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Over-fetching/Under-fetching dat</li><li>Více HTTP požadavků pro komplexní operace</li><li>Omezené možnosti dotazování</li></ul></div>"

1. Základní koncepty architektury back-endových systémů - Objektově-relační mapování (ORM)	"<div><strong>Objektově-relační mapování (ORM)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Programovací technika pro konverzi dat mezi nekompatibilními typy systémů - objektové programování a relační databáze</div><div><br></div><div><strong>Základní koncepty:</strong></div><ul><li><strong>Entity</strong> - objektová reprezentace databázové tabulky</li><li><strong>Repository/DAO</strong> - vzor pro přístup k datům</li><li><strong>Connection pooling</strong> - opětovné využití databázových spojení</li><li><strong>Lazy/Eager loading</strong> - strategie načítání souvisejících dat</li><li><strong>Caching</strong> - ukládání často používaných dat do paměti</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Abstrakce od SQL</li><li>Rychlejší vývoj</li><li>Automatické mapování</li><li>Database agnostic</li><li>Bezpečnost (SQL injection protection)</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Performance overhead</li><li>Složitost při komplexních dotazech</li><li>Learning curve</li><li>N+1 problem</li><li>Méně kontroly nad SQL</li></ul><div><br></div><div><strong>Příklady:</strong> Hibernate (Java), Entity Framework (.NET), Django ORM (Python), Sequelize (Node.js)</div>"

1. Základní koncepty architektury back-endových systémů - Repository a DAO pattern	"<div><strong>Repository a DAO (Data Access Object) pattern</strong></div><div><br></div><div><strong>DAO Pattern:</strong></div><ul><li>Abstraktní rozhraní pro přístup k datům</li><li>Enkapsuluje logiku přístupu k databázi</li><li>Odděluje business logiku od persistence logiky</li><li>Jeden DAO obvykle pro jednu entitu</li></ul><div><br></div><div><strong>Repository Pattern:</strong></div><ul><li>Agreguje více DAO objektů</li><li>Poskytuje jednotný interface pro kolekce objektů</li><li>Více business-oriented než DAO</li><li>Může obsahovat komplexní dotazy napříč entitami</li></ul><div><br></div><div><strong>Implementace:</strong></div><ul><li><strong>Interface</strong> - definuje dostupné operace</li><li><strong>Concrete implementation</strong> - implementuje databázové operace</li><li><strong>CRUD operations</strong> - Create, Read, Update, Delete</li><li><strong>Custom queries</strong> - specifické business dotazy</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Testovatelnost (mock objects)</li><li>Loosely coupled architecture</li><li>Znovupoužitelnost</li><li>Centralizace data access logiky</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Další vrstva abstrakce</li><li>Complexity overhead pro jednoduché aplikace</li><li>Možná duplicita kódu</li></ul></div>"

1. Základní koncepty architektury back-endových systémů - HTTP Routing	"<div><strong>HTTP Routing</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Mechanismus pro mapování HTTP požadavků (URL + HTTP method) na konkrétní handler funkce nebo controller akce</div><div><br></div><div><strong>Komponenty routing:</strong></div><ul><li><strong>Route definition</strong> - definice URL patterns</li><li><strong>Route parameters</strong> - dynamické části URL (/user/:id)</li><li><strong>HTTP methods</strong> - GET, POST, PUT, DELETE</li><li><strong>Middleware</strong> - funkce vykonávané před/po handler funkci</li><li><strong>Route groups</strong> - seskupování související routes</li></ul><div><br></div><div><strong>Typy parametrů:</strong></div><ul><li><strong>Path parameters</strong> - /api/users/123</li><li><strong>Query parameters</strong> - /api/users?page=1&limit=10</li><li><strong>Request body</strong> - JSON payload v POST/PUT</li><li><strong>Headers</strong> - Authorization, Content-Type</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Čistá a organizovaná struktura URL</li><li>Centralizované řízení požadavků</li><li>Middleware support</li><li>RESTful API design</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Možnost konfliktu routes</li><li>Performance impact při velkém počtu routes</li><li>Složitost při dynamických parametrech</li></ul><div><br></div><div><strong>Příklady:</strong> Express.js Router, Spring MVC RequestMapping, Laravel Routes</div>"

1. Základní koncepty architektury back-endových systémů - Exception handling	"<div><strong>Exception Handling (Zpracování výjimek)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Mechanismus pro zachycování, zpracování a reakci na chyby a výjimečné stavy během běhu aplikace</div><div><br></div><div><strong>Typy výjimek:</strong></div><ul><li><strong>Checked exceptions</strong> - musí být explicitně zpracovány</li><li><strong>Unchecked exceptions</strong> - runtime výjimky</li><li><strong>Business exceptions</strong> - chyby obchodní logiky</li><li><strong>System exceptions</strong> - chyby systému (DB connection, network)</li></ul><div><br></div><div><strong>HTTP status codes:</strong></div><ul><li><strong>400 Bad Request</strong> - neplatný požadavek</li><li><strong>401 Unauthorized</strong> - chybí autentifikace</li><li><strong>403 Forbidden</strong> - nedostatečná oprávnění</li><li><strong>404 Not Found</strong> - zdroj nenalezen</li><li><strong>500 Internal Server Error</strong> - serverová chyba</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li><strong>Global exception handler</strong> - centralizované zpracování</li><li><strong>Structured error responses</strong> - konzistentní formát chyb</li><li><strong>Logging</strong> - zaznamenávání chyb pro debugging</li><li><strong>User-friendly messages</strong> - srozumitelné zprávy pro uživatele</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Robustnost aplikace</li><li>Lepší user experience</li><li>Snadnější debugging</li><li>Bezpečnost (skrytí system details)</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Performance overhead</li><li>Složitost kódu</li><li>Možnost zakrytí root cause</li></ul></div>"

1. Základní koncepty architektury back-endových systémů - Dependency Injection	"<div><strong>Dependency Injection (DI)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Design pattern pro implementaci Inversion of Control (IoC), kde závislosti objektu jsou dodávány zvenčí místo jejich vytváření uvnitř objektu</div><div><br></div><div><strong>Typy DI:</strong></div><ul><li><strong>Constructor Injection</strong> - předání závislostí přes konstruktor</li><li><strong>Setter Injection</strong> - předání přes setter metody</li><li><strong>Interface Injection</strong> - předání přes interface metody</li></ul><div><br></div><div><strong>DI Container:</strong></div><ul><li><strong>Registration</strong> - registrace služeb a jejich lifetime</li><li><strong>Resolution</strong> - automatické vytvoření objektů s závislostmi</li><li><strong>Lifetime management</strong> - Singleton, Transient, Scoped</li><li><strong>Configuration</strong> - XML, annotations, code-based</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Loose coupling</li><li>Lepší testovatelnost (mock objects)</li><li>Flexibility a maintainability</li><li>Separation of concerns</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Learning curve</li><li>Runtime overhead</li><li>Složitější debugging</li><li>Over-engineering risk</li></ul><div><br></div><div><strong>Příklady:</strong> Spring IoC Container, .NET Core DI, Guice (Java), Dagger (Android)</div>"

1. Základní koncepty architektury back-endových systémů - Middleware a filtry	"<div><strong>Middleware a filtry</strong></div><div><br></div><div><strong>Middleware:</strong></div><div>Softwarová vrstva mezi aplikací a operačním systémem, nebo mezi různými částmi aplikace, která zprostředkovává komunikaci a služby</div><div><br></div><div><strong>Funkce middleware:</strong></div><ul><li><strong>Authentication</strong> - ověření identity uživatele</li><li><strong>Authorization</strong> - kontrola oprávnění</li><li><strong>Logging</strong> - zaznamenávání požadavků</li><li><strong>CORS handling</strong> - Cross-Origin Resource Sharing</li><li><strong>Rate limiting</strong> - omezení počtu požadavků</li><li><strong>Request/Response modification</strong> - úprava dat</li></ul><div><br></div><div><strong>Execution pipeline:</strong></div><div>Request → Middleware 1 → Middleware 2 → Handler → Middleware 2 → Middleware 1 → Response</div><div><br></div><div><strong>Filtry:</strong></div><ul><li><strong>Pre-filters</strong> - vykonávány před handler metodou</li><li><strong>Post-filters</strong> - vykonávány po handler metodě</li><li><strong>Exception filters</strong> - zachycují výjimky</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Reusable components</li><li>Separation of concerns</li><li>Centralizované zpracování cross-cutting concerns</li><li>Modularity</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Performance overhead</li><li>Složitější debugging</li><li>Order dependency</li></ul><div><br></div><div><strong>Příklady:</strong> Express.js middleware, ASP.NET Core middleware, Spring Security filters</div>"