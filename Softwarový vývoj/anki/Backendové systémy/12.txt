12. Principy testování backendu - Unit testy	"<div><strong>Unit testy (jednotkové testy)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Testování nejmenších testovatelných částí aplikace izolovaně od ostatních komponent</div><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li><strong>Izolace</strong> - testuje pouze jednu funkci/metodu</li><li><strong>Rychlost</strong> - běží velmi rychle (milisekundy)</li><li><strong>Mock objekty</strong> - nahrazují závislosti</li><li><strong>Deterministické</strong> - stejný vstup = stejný výstup</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Rychlá zpětná vazba</li><li>Snadné debugování</li><li>Dokumentace kódu</li><li>Refactoring confidence</li><li>Levné na vytvoření a údržbu</li></ul><div><br></div><div><strong>Co testovat:</strong></div><ul><li>Business logiku</li><li>Validace a edge cases</li><li>Error handling</li><li>Utility funkce</li></ul><div><br></div><div><strong>Nástroje:</strong> JUnit (Java), pytest (Python), Jest (JavaScript), NUnit (.NET), PHPUnit (PHP)</div></div>

12. Principy testování backendu - Komponentové testy	"<div><strong>Komponentové testy (Component Tests)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Testování celého komponentu/modulu aplikace s jeho skutečnými závislostmi nebo jejich realistickými náhradami</div><div><br></div><div><strong>Rozsah:</strong></div><ul><li><strong>API endpoint</strong> - testování REST/GraphQL endpointů</li><li><strong>Service vrstva</strong> - testování business services</li><li><strong>Database operace</strong> - s test databází</li><li><strong>Message handling</strong> - zpracování zpráv z queues</li></ul><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li>Reálné databáze (často testovací)</li><li>Skutečné HTTP komunikace</li><li>Testování celého workflow</li><li>Pomalejší než unit testy</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Testuje reálné interakce</li><li>Zachycuje integration issues</li><li>Vyšší confidence než unit testy</li><li>Testuje API kontrakt</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Pomalejší výkon</li><li>Složitější setup a teardown</li><li>Flaky testy při externích závislostech</li></ul><div><br></div><div><strong>Nástroje:</strong> TestContainers, Spring Boot Test, Supertest (Node.js), HttpTest (.NET)</div></div>

12. Principy testování backendu - Integrační testy	"<div><strong>Integrační testy (Integration Tests)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Testování komunikace a interakce mezi různými částmi systému nebo s externími systémy</div><div><br></div><div><strong>Typy integračních testů:</strong></div><ul><li><strong>Big Bang</strong> - testování všech komponent najednou</li><li><strong>Incremental</strong> - postupné přidávání komponent</li><li><strong>Top-down</strong> - od high-level k low-level</li><li><strong>Bottom-up</strong> - od low-level k high-level</li></ul><div><br></div><div><strong>Co testovat:</strong></div><ul><li>Database integrace</li><li>Externí API komunikace</li><li>Message queue systémy</li><li>File system operace</li><li>Microservices komunikace</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Odhaluje interface problémy</li><li>Testuje data flow</li><li>Zachycuje configuration issues</li><li>End-to-end validace</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Pomalé a drahé</li><li>Složité debugování</li><li>Závislost na externích systémech</li><li>Maintenance overhead</li></ul><div><br></div><div><strong>Strategie:</strong> Test doubles, Contract testing, Test environments</div></div>

12. Principy testování backendu - Funkční testy	"<div><strong>Funkční testy (Functional Tests)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Testování aplikace z pohledu end-usera, ověřování že systém splňuje business požadavky</div><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li><strong>Black-box testing</strong> - neznáme vnitřní implementaci</li><li><strong>User perspective</strong> - testování user stories</li><li><strong>End-to-end</strong> - celý workflow</li><li><strong>Business kritéria</strong> - ověřují requirements</li></ul><div><br></div><div><strong>Typy funkčních testů:</strong></div><ul><li><strong>Smoke testy</strong> - základní funkcionalita</li><li><strong>Sanity testy</strong> - rychlé ověření po změnách</li><li><strong>Regression testy</strong> - ověření že změny nezlomily existující funkcionalitu</li><li><strong>User acceptance testy</strong> - finální akceptace</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Vysoká confidence</li><li>Business value validation</li><li>Real user scenarios</li><li>Cross-system testing</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Pomalé a drahé</li><li>Brittle a flaky</li><li>Obtížná lokalizace chyb</li><li>High maintenance</li></ul><div><br></div><div><strong>Nástroje:</strong> Selenium, Cypress, Playwright, Postman, REST Assured</div></div>

12. Principy testování backendu - Výkonnostní testy	"<div><strong>Výkonnostní testy (Performance Tests)</strong></div><div><br></div><div><strong>Typy výkonnostních testů:</strong></div><ul><li><strong>Load testing</strong> - testování při normálním zatížení</li><li><strong>Stress testing</strong> - testování při extrémním zatížení</li><li><strong>Volume testing</strong> - testování s velkými objemy dat</li><li><strong>Spike testing</strong> - náhlé zvýšení zátěže</li><li><strong>Endurance testing</strong> - dlouhodobé zatížení</li></ul><div><br></div><div><strong>Klíčové metriky:</strong></div><ul><li><strong>Response time</strong> - doba odezvy</li><li><strong>Throughput</strong> - počet transakcí za sekundu</li><li><strong>Concurrent users</strong> - současní uživatelé</li><li><strong>Resource utilization</strong> - využití CPU/paměti</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Identifikace bottlenecks</li><li>Capacity planning</li><li>SLA validation</li><li>Optimalizace výkonu</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Nákladné na setup</li><li>Potřebují production-like environment</li><li>Časově náročné</li><li>Složité vyhodnocení výsledků</li></ul><div><br></div><div><strong>Nástroje:</strong> JMeter, Gatling, K6, LoadRunner, Artillery, Locust</div></div>

12. Principy testování backendu - Bezpečnostní testy	"<div><strong>Bezpečnostní testy (Security Tests)</strong></div><div><br></div><div><strong>Typy bezpečnostních testů:</strong></div><ul><li><strong>Authentication testing</strong> - ověření přihlášení</li><li><strong>Authorization testing</strong> - kontrola oprávnění</li><li><strong>SQL Injection testing</strong> - ochrana databáze</li><li><strong>XSS testing</strong> - Cross-Site Scripting</li><li><strong>CSRF testing</strong> - Cross-Site Request Forgery</li><li><strong>Data encryption testing</strong> - šifrování dat</li></ul><div><br></div><div><strong>Oblasti testování:</strong></div><ul><li>Input validation</li><li>Session management</li><li>Error handling (no sensitive info)</li><li>SSL/TLS konfigurace</li><li>API security</li><li>File upload security</li></ul><div><br></div><div><strong>Automatizované kontroly:</strong></div><ul><li>Static code analysis</li><li>Dependency vulnerability scanning</li><li>Container security scanning</li><li>Infrastructure security</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Včasné odhalení vulnerabilities</li><li>Compliance s security standardy</li><li>Ochrana dat a systémů</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Vyžaduje bezpečnostní expertise</li><li>False positive/negative</li><li>Časově náročné</li></ul><div><br></div><div><strong>Nástroje:</strong> OWASP ZAP, Burp Suite, SonarQube, Snyk, Checkmarx</div></div>

12. Principy testování backendu - Automatizace testů	"<div><strong>Automatizace testů</strong></div><div><br></div><div><strong>Test Pyramid strategie:</strong></div><ol><li><strong>Unit testy</strong> - 70% (základ pyramidy)</li><li><strong>Integration testy</strong> - 20% (střed)</li><li><strong>E2E testy</strong> - 10% (vrchol)</li></ol><div><br></div><div><strong>CI/CD integrace:</strong></div><ul><li><strong>Pre-commit hooks</strong> - lokální validace</li><li><strong>Build pipeline</strong> - automatické spouštění testů</li><li><strong>Deployment gates</strong> - testy jako podmínka nasazení</li><li><strong>Regression testing</strong> - nightly builds</li></ul><div><br></div><div><strong>Výhody automatizace:</strong></div><ul><li>Rychlá zpětná vazba</li><li>Konzistentní výsledky</li><li>Úspora času a nákladů</li><li>Continuous quality assurance</li><li>Regression protection</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Test data management</li><li>Parallel test execution</li><li>Flaky test handling</li><li>Test reporting a metrics</li></ul><div><br></div><div><strong>Nástroje:</strong> Jenkins, GitHub Actions, GitLab CI, TeamCity, Azure DevOps, CircleCI</div></div>

12. Principy testování backendu - Nástroje a postupy	"<div><strong>Testovací nástroje a postupy</strong></div><div><br></div><div><strong>Testovací frameworky:</strong></div><ul><li><strong>Java:</strong> JUnit 5, TestNG, Mockito, Spring Boot Test</li><li><strong>Python:</strong> pytest, unittest, Mock, FastAPI TestClient</li><li><strong>JavaScript:</strong> Jest, Mocha, Supertest, Sinon</li><li><strong>.NET:</strong> xUnit, NUnit, Moq, ASP.NET Core Testing</li><li><strong>PHP:</strong> PHPUnit, Mockery, Laravel Testing</li></ul><div><br></div><div><strong>Test data management:</strong></div><ul><li><strong>Fixtures</strong> - předdefinovaná testovací data</li><li><strong>Factories</strong> - generování test dat</li><li><strong>Database seeding</strong> - naplnění test DB</li><li><strong>Test containers</strong> - izolovaná test prostředí</li></ul><div><br></div><div><strong>Mocking strategie:</strong></div><ul><li>Mock external services</li><li>Stub expensive operations</li><li>Fake objects pro komplexní závislosti</li><li>Spy pro behavioral verification</li></ul><div><br></div><div><strong>Test reporting:</strong></div><ul><li>Code coverage metrics</li><li>Test execution reports</li><li>Performance benchmarks</li><li>Trend analysis</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>AAA pattern (Arrange, Act, Assert)</li><li>Given-When-Then struktura</li><li>Test naming conventions</li><li>Clean up resources</li></ul></div>