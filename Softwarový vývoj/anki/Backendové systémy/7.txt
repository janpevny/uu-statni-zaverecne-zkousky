7. Pokročilé koncepty v relačních databázích - Indexy databáze	"<div><strong>Indexy databáze</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Datové struktury pro rychlejší vyhledávání záznamů v tabulce bez nutnosti prohledávat celou tabulku</div><div><br></div><div><strong>Typy indexů:</strong></div><ul><li><strong>Clustered index</strong> - fyzické uspořádání dat v tabulce</li><li><strong>Non-clustered index</strong> - samostatná struktura s odkazy na záznamy</li><li><strong>Unique index</strong> - zajišťuje jedinečnost hodnot</li><li><strong>Composite index</strong> - index nad více sloupci</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Dramaticky rychlejší SELECT dotazy</li><li>Rychlejší JOIN operace</li><li>Efektivnější ORDER BY a GROUP BY</li><li>Rychlejší WHERE klauzule</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Pomalejší INSERT, UPDATE, DELETE operace</li><li>Dodatečné úložiště</li><li>Údržba indexů</li><li>Plánování optimálních indexů</li></ul><div><br></div><div><strong>Implementace:</strong> B-tree, Hash, Bitmap indexy</div></div>"

7. Pokročilé koncepty v relačních databázích - Partitioning databází	"<div><strong>Partitioning databází</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Rozdělení velkých tabulek na menší, spravovatelné části (partitions) podle definovaných kritérií</div><div><br></div><div><strong>Typy partitioning:</strong></div><ul><li><strong>Range partitioning</strong> - podle rozsahu hodnot (např. datum)</li><li><strong>Hash partitioning</strong> - podle hash funkce</li><li><strong>List partitioning</strong> - podle seznamu hodnot</li><li><strong>Composite partitioning</strong> - kombinace více metod</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Lepší výkon dotazů (partition pruning)</li><li>Paralelní zpracování</li><li>Snadnější údržba (backup, indexing)</li><li>Lepší škálovatelnost</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Složitější návrh a správa</li><li>Možné problémy s JOIN napříč partitions</li><li>Redistribuce dat při změnách</li><li>Ne všechny DB systémy podporují</li></ul><div><br></div><div><strong>Příklady:</strong> PostgreSQL, Oracle, SQL Server, MySQL (od verze 5.1)</div></div>"

7. Pokročilé koncepty v relačních databázích - SQL Views	"<div><strong>SQL Views (Pohledy)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Virtuální tabulky definované SQL dotazem, které poskytují logický pohled na data z jedné nebo více tabulek</div><div><br></div><div><strong>Typy views:</strong></div><ul><li><strong>Simple view</strong> - nad jednou tabulkou</li><li><strong>Complex view</strong> - nad více tabulkami s JOIN</li><li><strong>Materialized view</strong> - fyzicky uložený výsledek</li><li><strong>Updateable view</strong> - umožňuje INSERT/UPDATE/DELETE</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Zjednodušení složitých dotazů</li><li>Bezpečnost - skrývání citlivých sloupců</li><li>Abstrakce - nezávislost na struktuře tabulek</li><li>Znovupoužitelnost logiky</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Výkon - možné pomalé dotazy</li><li>Závislost na zdrojových tabulkách</li><li>Omezená možnost aktualizace</li><li>Debugging složitějších views</li></ul><div><br></div><div><strong>Syntax:</strong></div><div>CREATE VIEW view_name AS SELECT ...</div></div>"

7. Pokročilé koncepty v relačních databázích - Dotazy nad více tabulkami	"<div><strong>Dotazy nad více tabulkami (JOINs)</strong></div><div><br></div><div><strong>Typy JOINs:</strong></div><ul><li><strong>INNER JOIN</strong> - pouze záznamy s odpovídajícími hodnotami</li><li><strong>LEFT JOIN</strong> - všechny záznamy z levé tabulky</li><li><strong>RIGHT JOIN</strong> - všechny záznamy z pravé tabulky</li><li><strong>FULL OUTER JOIN</strong> - všechny záznamy z obou tabulek</li><li><strong>CROSS JOIN</strong> - kartézský součin</li></ul><div><br></div><div><strong>Optimalizační techniky:</strong></div><ul><li>Použití správných indexů na JOIN sloupce</li><li>Filtrování před JOIN operací</li><li>Vhodné pořadí tabulek v JOIN</li><li>EXISTS vs IN vs JOIN</li></ul><div><br></div><div><strong>Složité dotazy:</strong></div><ul><li>Nested JOINs</li><li>Self JOINs</li><li>Kombinace s GROUP BY a HAVING</li><li>Window functions</li></ul><div><br></div><div><strong>Výkon:</strong></div><ul><li>Analýza execution plánu</li><li>Indexování JOIN sloupců</li><li>Denormalizace pro kritické dotazy</li><li>Materialized views pro složité JOINs</li></ul></div>"

7. Pokročilé koncepty v relačních databázích - Poddotazy (Subqueries)	"<div><strong>Poddotazy (Subqueries)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>SQL dotazy vnořené do jiných dotazů, které poskytují hodnoty pro hlavní dotaz</div><div><br></div><div><strong>Typy poddotazů:</strong></div><ul><li><strong>Scalar subquery</strong> - vrací jednu hodnotu</li><li><strong>Row subquery</strong> - vrací jeden řádek</li><li><strong>Table subquery</strong> - vrací tabulku</li><li><strong>Correlated subquery</strong> - závisí na vnějším dotazu</li></ul><div><br></div><div><strong>Umístění:</strong></div><ul><li>SELECT klauzule</li><li>FROM klauzule (derived tables)</li><li>WHERE klauzule</li><li>HAVING klauzule</li></ul><div><br></div><div><strong>Operátory:</strong></div><ul><li><strong>EXISTS/NOT EXISTS</strong> - kontrola existence</li><li><strong>IN/NOT IN</strong> - členství v množině</li><li><strong>ANY/ALL</strong> - porovnání s množinou</li><li><strong>Comparison operators</strong> (=, <, >, etc.)</li></ul><div><br></div><div><strong>Výhody vs nevýhody:</strong></div><ul><li>Čitelnost vs výkon</li><li>Flexibilita vs složitost</li><li>EXISTS často rychlejší než IN</li><li>JOINs často rychlejší než correlated subquery</li></ul></div>"

7. Pokročilé koncepty v relačních databázích - Window Functions	"<div><strong>Window Functions (Okenní funkce)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Funkce, které provádějí výpočty nad množinou řádků souvisejících s aktuálním řádkem</div><div><br></div><div><strong>Základní syntax:</strong></div><div>function() OVER (PARTITION BY ... ORDER BY ... ROWS/RANGE ...)</div><div><br></div><div><strong>Typy funkcí:</strong></div><ul><li><strong>Ranking:</strong> ROW_NUMBER(), RANK(), DENSE_RANK()</li><li><strong>Aggregate:</strong> SUM(), AVG(), COUNT() OVER</li><li><strong>Analytic:</strong> LAG(), LEAD(), FIRST_VALUE(), LAST_VALUE()</li><li><strong>Statistical:</strong> NTILE(), PERCENT_RANK()</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Výpočty bez GROUP BY</li><li>Running totals a moving averages</li><li>Ranking a percentily</li><li>Porovnání s předchozími/následujícími řádky</li></ul><div><br></div><div><strong>Použití:</strong></div><ul><li>Business intelligence a reporting</li><li>Time series analýza</li><li>Top-N dotazy</li><li>Paginating výsledků</li></ul><div><br></div><div><strong>Podpora:</strong> PostgreSQL, SQL Server, Oracle, MySQL 8.0+</div></div>"

7. Pokročilé koncepty v relačních databázích - Optimalizace dotazů	"<div><strong>Optimalizace databázových dotazů</strong></div><div><br></div><div><strong>Analýza výkonu:</strong></div><ul><li><strong>EXPLAIN PLAN</strong> - analýza execution plánu</li><li><strong>Query profiling</strong> - měření času vykonávání</li><li><strong>Index usage statistics</strong> - využití indexů</li><li><strong>Wait events</strong> - identifikace bottlenecks</li></ul><div><br></div><div><strong>Optimalizační techniky:</strong></div><ul><li>Správné indexování</li><li>Rewrite dotazů pro lepší plán</li><li>Použití LIMIT pro omezení výsledků</li><li>Denormalizace kritických tabulek</li></ul><div><br></div><div><strong>Nástroje:</strong></div><ul><li><strong>PostgreSQL:</strong> EXPLAIN, pg_stat_statements</li><li><strong>MySQL:</strong> EXPLAIN, Performance Schema</li><li><strong>SQL Server:</strong> Execution Plans, Query Store</li><li><strong>Oracle:</strong> Automatic Workload Repository (AWR)</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Avoid SELECT *</li><li>Use appropriate data types</li><li>Regular statistics updates</li><li>Monitor slow query logs</li></ul></div>"