10. MongoDB - Úvod a představení	"<div><strong>MongoDB - NoSQL dokumentová databáze</strong></div><div><br></div><div><strong>Charakteristiky:</strong></div><ul><li><strong>Dokumentově orientovaná</strong> - ukládá data ve formátu BSON (Binary JSON)</li><li><strong>Schemaless</strong> - flexibilní struktura bez pevného schématu</li><li><strong>Horizontálně škálovatelná</strong> - sharding, replikace</li><li><strong>Rich query language</strong> - pokročilé dotazování</li></ul><div><br></div><div><strong>Základní koncepty:</strong></div><ul><li><strong>Database</strong> - kontejner pro kolekce</li><li><strong>Collection</strong> - skupina dokumentů (ekvivalent tabulky v SQL)</li><li><strong>Document</strong> - BSON objekt (ekvivalent řádku v SQL)</li><li><strong>Field</strong> - klíč-hodnota pár v dokumentu</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Flexibilní schéma</li><li>Rychlý vývoj a prototyping</li><li>Nativní podpora pro JSON</li><li>Horizontální škálování</li><li>Rich dokumentový model</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Nedostatečná ACID podpora (u starších verzí)</li><li>Větší spotřeba paměti</li><li>Složitější konsistence dat</li></ul><div><br></div><div><strong>Použití:</strong> Webové aplikace, real-time analytics, IoT, mobilní aplikace</div>"

10. MongoDB - Základní operace CRUD	"<div><strong>MongoDB CRUD operace</strong></div><div><br></div><div><strong>Create (Vytvoření):</strong></div><ul><li><strong>insertOne()</strong> - vložení jednoho dokumentu</li><li><strong>insertMany()</strong> - vložení více dokumentů</li><li>Příklad: <code>db.users.insertOne({name: \"Jan\", age: 25})</code></li></ul><div><br></div><div><strong>Read (Čtení):</strong></div><ul><li><strong>find()</strong> - najde dokumenty podle kritérií</li><li><strong>findOne()</strong> - najde první odpovídající dokument</li><li><strong>count()</strong> - spočítá dokumenty</li><li>Příklad: <code>db.users.find({age: {$gte: 18}})</code></li></ul><div><br></div><div><strong>Update (Aktualizace):</strong></div><ul><li><strong>updateOne()</strong> - aktualizuje první odpovídající dokument</li><li><strong>updateMany()</strong> - aktualizuje všechny odpovídající dokumenty</li><li><strong>replaceOne()</strong> - nahradí celý dokument</li><li>Příklad: <code>db.users.updateOne({name: \"Jan\"}, {$set: {age: 26}})</code></li></ul><div><br></div><div><strong>Delete (Smazání):</strong></div><ul><li><strong>deleteOne()</strong> - smaže první odpovídající dokument</li><li><strong>deleteMany()</strong> - smaže všechny odpovídající dokumenty</li><li>Příklad: <code>db.users.deleteOne({name: \"Jan\"})</code></li></ul>"

10. MongoDB - Pokročilé dotazování	"<div><strong>MongoDB Advanced Querying</strong></div><div><br></div><div><strong>Comparison operátory:</strong></div><ul><li><strong>$eq, $ne</strong> - rovná se, nerovná se</li><li><strong>$gt, $gte, $lt, $lte</strong> - větší než, menší než</li><li><strong>$in, $nin</strong> - v seznamu, není v seznamu</li><li>Příklad: <code>db.products.find({price: {$gte: 100, $lte: 500}})</code></li></ul><div><br></div><div><strong>Logical operátory:</strong></div><ul><li><strong>$and, $or, $not, $nor</strong> - logické operace</li><li>Příklad: <code>db.users.find({$or: [{age: {$lt: 18}}, {status: \"premium\"}]})</code></li></ul><div><br></div><div><strong>Array operátory:</strong></div><ul><li><strong>$all</strong> - všechny prvky musí být přítomné</li><li><strong>$elemMatch</strong> - alespoň jeden prvek splňuje podmínku</li><li><strong>$size</strong> - velikost pole</li></ul><div><br></div><div><strong>Text search:</strong></div><ul><li><strong>$text</strong> - full-text search</li><li><strong>$regex</strong> - regulární výrazy</li></ul><div><br></div><div><strong>Projekce a sorting:</strong></div><ul><li><strong>projection</strong> - výběr polí: <code>find({}, {name: 1, age: 1})</code></li><li><strong>sort()</strong> - řazení: <code>find().sort({age: -1})</code></li><li><strong>limit(), skip()</strong> - stránkování</li></ul>"

10. MongoDB - Indexování	"<div><strong>MongoDB Indexování</strong></div><div><br></div><div><strong>Typy indexů:</strong></div><ul><li><strong>Single Field Index</strong> - index na jedno pole</li><li><strong>Compound Index</strong> - index na více polí</li><li><strong>Multikey Index</strong> - automaticky pro pole (arrays)</li><li><strong>Text Index</strong> - pro full-text search</li><li><strong>Geospatial Index</strong> - pro geografická data</li></ul><div><br></div><div><strong>Vytváření indexů:</strong></div><ul><li><code>db.collection.createIndex({field: 1})</code> - ascending</li><li><code>db.collection.createIndex({field: -1})</code> - descending</li><li><code>db.collection.createIndex({name: 1, age: -1})</code> - compound</li></ul><div><br></div><div><strong>Index vlastnosti:</strong></div><ul><li><strong>Unique</strong> - <code>createIndex({email: 1}, {unique: true})</code></li><li><strong>Partial</strong> - index pouze pro dokumenty splňující podmínku</li><li><strong>Sparse</strong> - ignoruje dokumenty bez indexovaného pole</li><li><strong>TTL</strong> - automatické expirování dokumentů</li></ul><div><br></div><div><strong>Správa indexů:</strong></div><ul><li><code>db.collection.getIndexes()</code> - zobrazí všechny indexy</li><li><code>db.collection.dropIndex()</code> - smaže index</li><li><code>db.collection.explain()</code> - analýza query performance</li></ul><div><br></div><div><strong>Performance tips:</strong></div><ul><li>Index nejčastěji používaná pole</li><li>Compound indexy - pořadí polí je důležité</li><li>Monitoring pomocí explain()</li></ul>"

10. MongoDB - Replikace	"<div><strong>MongoDB Replikace</strong></div><div><br></div><div><strong>Replica Set:</strong></div><div>Skupina MongoDB instancí, které udržují stejnou datovou sadu pro zajištění vysoké dostupnosti a redundance</div><div><br></div><div><strong>Komponenty Replica Set:</strong></div><ul><li><strong>Primary</strong> - přijímá všechny write operace</li><li><strong>Secondary</strong> - kopíruje data z Primary (může obsluhovat read operace)</li><li><strong>Arbiter</strong> - hlasuje při volbě nového Primary (neuchovává data)</li></ul><div><br></div><div><strong>Automatické failover:</strong></div><ol><li>Primary node selže</li><li>Zbylé uzly hlasují o novém Primary</li><li>Secondary s nejvyšší prioritou se stává Primary</li><li>Aplikace pokračuje s minimálním výpadkem</li></ol><div><br></div><div><strong>Read preferences:</strong></div><ul><li><strong>primary</strong> - pouze z Primary (default)</li><li><strong>secondary</strong> - pouze ze Secondary</li><li><strong>nearest</strong> - z nejbližšího uzlu</li></ul><div><br></div><div><strong>Write concerns:</strong></div><ul><li><strong>w: 1</strong> - potvrzení od Primary</li><li><strong>w: \"majority\"</strong> - potvrzení od majority uzlů</li><li><strong>j: true</strong> - zápis do journal</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Vysoká dostupnost</li><li>Automatické failover</li><li>Read scaling</li><li>Data redundance</li></ul>"

10. MongoDB - Sharding	"<div><strong>MongoDB Sharding</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Horizontální škálování databáze rozdělením dat napříč více servery (shardy)</div><div><br></div><div><strong>Komponenty Sharded Cluster:</strong></div><ul><li><strong>Shard</strong> - obsahuje podmnožinu dat (replica set)</li><li><strong>Config servers</strong> - ukládají metadata o distribuci dat</li><li><strong>mongos</strong> - query router, směruje požadavky na správné shardy</li></ul><div><br></div><div><strong>Shard key:</strong></div><div>Pole nebo kombinace polí, podle kterých se data rozdělují napříč shardy</div><ul><li>Musí být přítomen v každém dokumentu</li><li>Nelze změnit po nastavení</li><li>Ovlivňuje distribuci a performance</li></ul><div><br></div><div><strong>Strategie shardingu:</strong></div><ul><li><strong>Range-based</strong> - podle rozsahu hodnot</li><li><strong>Hash-based</strong> - podle hash hodnoty</li><li><strong>Zone/Tag-based</strong> - geografické nebo logické rozdělení</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Horizontální škálovatelnost</li><li>Zvýšená propustnost</li><li>Geografická distribuce</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Zvýšená komplexita</li><li>Možné hotspots při špatném shard key</li><li>Složitější správa a monitoring</li><li>Cross-shard operace jsou pomalejší</li></ul>"

10. MongoDB - Zálohování a obnova	"<div><strong>MongoDB Backup a Recovery</strong></div><div><br></div><div><strong>Typy zálohování:</strong></div><ul><li><strong>mongodump</strong> - logické zálohování do BSON formátu</li><li><strong>File system backup</strong> - fyzické kopírování datových souborů</li><li><strong>Replica set backup</strong> - využití secondary uzlů</li><li><strong>Cloud provider backups</strong> - Atlas, AWS, Azure služby</li></ul><div><br></div><div><strong>mongodump příkazy:</strong></div><ul><li><code>mongodump --db mydb</code> - backup konkrétní databáze</li><li><code>mongodump --collection users --db mydb</code> - backup kolekce</li><li><code>mongodump --host replica-set/host1:27017</code> - backup z replica set</li></ul><div><br></div><div><strong>mongorestore příkazy:</strong></div><ul><li><code>mongorestore dump/</code> - obnovení ze zálohy</li><li><code>mongorestore --db newdb dump/mydb/</code> - obnovení do jiné databáze</li><li><code>mongorestore --drop</code> - přepíše existující data</li></ul><div><br></div><div><strong>Strategie zálohování:</strong></div><ul><li><strong>Point-in-time recovery</strong> - kombinace backup + oplog</li><li><strong>Continuous backup</strong> - real-time replikace</li><li><strong>Scheduled backups</strong> - pravidelné automatické zálohy</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Testování obnovení dat</li><li>Geograficky distribuované zálohy</li><li>Kombinace více metod</li><li>Monitoring backup procesů</li><li>Dokumentace recovery procedur</li></ul>"

10. MongoDB - Agregace a Analytics	"<div><strong>MongoDB Aggregation Pipeline</strong></div><div><br></div><div><strong>Agregační pipeline:</strong></div><div>Sekvence operací, které transformují dokumenty krok za krokem</div><div><br></div><div><strong>Základní stage operátory:</strong></div><ul><li><strong>$match</strong> - filtrování dokumentů (jako WHERE)</li><li><strong>$project</strong> - výběr a transformace polí</li><li><strong>$group</strong> - skupinování podle klíče</li><li><strong>$sort</strong> - řazení výsledků</li><li><strong>$limit/$skip</strong> - stránkování</li><li><strong>$unwind</strong> - rozbalení polí typu array</li></ul><div><br></div><div><strong>Agregační operátory:</strong></div><ul><li><strong>$sum, $avg, $min, $max</strong> - matematické operace</li><li><strong>$count</strong> - počet dokumentů</li><li><strong>$push</strong> - vytvoření pole ze skupiny</li><li><strong>$first, $last</strong> - první/poslední hodnota</li></ul><div><br></div><div><strong>Praktický příklad:</strong></div><div><code>db.orders.aggregate([<br>&nbsp;&nbsp;{$match: {status: \"completed\"}},<br>&nbsp;&nbsp;{$group: {_id: \"$category\", totalSales: {$sum: \"$amount\"}}},<br>&nbsp;&nbsp;{$sort: {totalSales: -1}}<br>])</code></div><div><br></div><div><strong>Výhody agregace:</strong></div><ul><li>Výkonné analytické dotazy</li><li>Komplexní transformace dat</li><li>Alternativa k MapReduce</li><li>Nativní podpora v databázi</li></ul><div><br></div><div><strong>Použití:</strong> Reporting, analytics, data transformation, business intelligence</div>"