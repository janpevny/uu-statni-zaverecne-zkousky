11. Pokročilé použití MongoDB - Relace v NoSQL databázích	"<div><strong>Relace v MongoDB (NoSQL databázích)</strong></div><div><br></div><div><strong>Typy vztahů:</strong></div><ul><li><strong>One-to-One (1:1)</strong> - embedding nebo referencing</li><li><strong>One-to-Many (1:N)</strong> - nejčastěji embedding</li><li><strong>Many-to-Many (N:N)</strong> - referencing přes pole ObjectId</li></ul><div><br></div><div><strong>Embedding vs Referencing:</strong></div><ul><li><strong>Embedding</strong> - vnořené dokumenty, rychlejší čtení</li><li><strong>Referencing</strong> - odkazy na jiné kolekce, flexibilnější</li></ul><div><br></div><div><strong>Příklad embedding:</strong></div><div>{ \"_id\": 1, \"name\": \"User\", \"posts\": [{ \"title\": \"Post 1\" }] }</div><div><br></div><div><strong>Příklad referencing:</strong></div><div>{ \"_id\": 1, \"name\": \"User\", \"posts\": [ObjectId(\"...\"), ObjectId(\"...\")] }</div><div><br></div><div><strong>Výhody embedding:</strong> atomicita, rychlost</div><div><strong>Nevýhody embedding:</strong> velikost dokumentu, duplicita dat</div></div>"

11. Pokročilé použití MongoDB - Databázové reference	"<div><strong>Databázové reference v MongoDB</strong></div><div><br></div><div><strong>Typy referencí:</strong></div><ul><li><strong>Manual References</strong> - ukládání ObjectId v jiném dokumentu</li><li><strong>DBRefs</strong> - speciální struktura pro odkazy</li></ul><div><br></div><div><strong>Manual Reference příklad:</strong></div><div>{ \"_id\": 1, \"user_id\": ObjectId(\"507f1f77bcf86cd799439011\") }</div><div><br></div><div><strong>DBRef struktura:</strong></div><div>{ \"$ref\": \"collection_name\", \"$id\": ObjectId(\"...\"), \"$db\": \"database_name\" }</div><div><br></div><div><strong>Lookup operace:</strong></div><ul><li><strong>$lookup</strong> - agregační pipeline pro join operace</li><li><strong>populate()</strong> - v Mongoose pro automatické nahrazení referencí</li></ul><div><br></div><div><strong>Výhody referencování:</strong></div><ul><li>Normalizace dat</li><li>Menší velikost dokumentů</li><li>Flexibilita při změnách</li></ul><div><br></div><div><strong>Nevýhody referencování:</strong></div><ul><li>Více dotazů pro získání dat</li><li>Složitější agregace</li><li>Možné problémy s konzistencí</li></ul></div>"

11. Pokročilé použití MongoDB - Map-Reduce operace	"<div><strong>Map-Reduce v MongoDB</strong></div><div><br></div><div><strong>Koncept:</strong></div><div>Paralelní zpracování velkých dat pomocí dvou fází - Map (mapování) a Reduce (redukce)</div><div><br></div><div><strong>Map funkce:</strong></div><ul><li>Zpracuje každý dokument v kolekci</li><li>Emituje klíč-hodnota páry</li><li>Píše se v JavaScriptu</li></ul><div><br></div><div><strong>Reduce funkce:</strong></div><ul><li>Agreguje hodnoty se stejným klíčem</li><li>Kombinuje výsledky z Map fáze</li></ul><div><br></div><div><strong>Příklad syntaxe:</strong></div><div>db.collection.mapReduce(mapFunction, reduceFunction, { out: \"result_collection\" })</div><div><br></div><div><strong>Použití:</strong></div><ul><li>Komplexní agregace</li><li>Statistické výpočty</li><li>Grouping operace</li><li>Data processing pipelines</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Pomalé (single-threaded JavaScript)</li><li>Zastaralé - nahrazeno Aggregation Pipeline</li><li>Složitější syntaxe</li></ul><div><br></div><div><strong>Alternativa:</strong> Aggregation Pipeline s $group, $match, $project</div></div>"

11. Pokročilé použití MongoDB - Regulární výrazy	"<div><strong>Regulární výrazy v MongoDB</strong></div><div><br></div><div><strong>Syntaxe:</strong></div><ul><li><strong>$regex operátor</strong> - { field: { $regex: pattern, $options: options } }</li><li><strong>Přímá syntax</strong> - { field: /pattern/options }</li></ul><div><br></div><div><strong>Běžné options:</strong></div><ul><li><strong>i</strong> - case insensitive</li><li><strong>m</strong> - multiline mode</li><li><strong>x</strong> - extended (ignore whitespace)</li><li><strong>s</strong> - dotall (. matches newlines)</li></ul><div><br></div><div><strong>Příklady použití:</strong></div><ul><li>db.users.find({\"name\": /^John/i}) - jména začínající na John</li><li>db.posts.find({\"content\": /email|phone/}) - obsahuje email nebo phone</li><li>db.products.find({\"code\": /^[A-Z]{3}-\\d{4}$/}) - specifický formát kódu</li></ul><div><br></div><div><strong>Performance:</strong></div><ul><li>Regex bez indexu = pomalé (table scan)</li><li>^pattern využije index efektivně</li><li>.*pattern.* = nejpomalejší</li></ul><div><br></div><div><strong>Výhody:</strong> flexibilní pattern matching</div><div><strong>Nevýhody:</strong> výkonnostní dopady, složitost syntaxe</div></div>"

11. Pokročilé použití MongoDB - Pokročilé indexování	"<div><strong>Pokročilé indexování v MongoDB</strong></div><div><br></div><div><strong>Typy indexů:</strong></div><ul><li><strong>Compound Index</strong> - více polí v jednom indexu</li><li><strong>Multikey Index</strong> - automaticky pro pole s arrays</li><li><strong>Text Index</strong> - full-text search</li><li><strong>Geospatial Index</strong> - 2d, 2dsphere pro geografická data</li><li><strong>Sparse Index</strong> - pouze dokumenty s daným polem</li></ul><div><br></div><div><strong>Compound Index strategie:</strong></div><div>db.collection.createIndex({ \"status\": 1, \"date\": -1, \"priority\": 1 })</div><div>Pravidlo: Equality, Sort, Range (ESR)</div><div><br></div><div><strong>Index properties:</strong></div><ul><li><strong>unique</strong> - zajišťuje jedinečnost</li><li><strong>sparse</strong> - indexuje pouze existující hodnoty</li><li><strong>partialFilterExpression</strong> - podmíněný index</li><li><strong>background</strong> - vytváření na pozadí</li></ul><div><br></div><div><strong>Text Index:</strong></div><div>db.articles.createIndex({ \"title\": \"text\", \"content\": \"text\" })</div><div>db.articles.find({ $text: { $search: \"mongodb tutorial\" } })</div><div><br></div><div><strong>Optimalizace:</strong></div><ul><li>explain() pro analýzu dotazů</li><li>hint() pro vynucení indexu</li><li>Monitoring přes db.stats()</li></ul></div>"

11. Pokročilé použití MongoDB - Agregační pipeline	"<div><strong>Agregační pipeline v MongoDB</strong></div><div><br></div><div><strong>Koncept:</strong></div><div>Postupné zpracování dat pomocí řetězce operátorů (stages)</div><div><br></div><div><strong>Hlavní stages:</strong></div><ul><li><strong>$match</strong> - filtrování dokumentů</li><li><strong>$group</strong> - seskupování a agregace</li><li><strong>$project</strong> - transformace výstupních polí</li><li><strong>$sort</strong> - řazení</li><li><strong>$limit/$skip</strong> - stránkování</li><li><strong>$lookup</strong> - join s jinou kolekcí</li></ul><div><br></div><div><strong>Agregační operátory:</strong></div><ul><li><strong>$sum, $avg, $min, $max</strong> - matematické funkce</li><li><strong>$count</strong> - počítání dokumentů</li><li><strong>$push, $addToSet</strong> - práce s arrays</li></ul><div><br></div><div><strong>Příklad pipeline:</strong></div><div>[</div><div>&nbsp;&nbsp;{ $match: { status: \"active\" } },</div><div>&nbsp;&nbsp;{ $group: { _id: \"$category\", total: { $sum: \"$amount\" } } },</div><div>&nbsp;&nbsp;{ $sort: { total: -1 } }</div><div>]</div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Výkonnější než Map-Reduce</li><li>Čitelná syntaxe</li><li>Optimalizované provedení</li></ul></div>"

11. Pokročilé použití MongoDB - Transakce a konzistence	"<div><strong>Transakce a konzistence v MongoDB</strong></div><div><br></div><div><strong>ACID transakce:</strong></div><ul><li>Podporovány od verze 4.0 (single replica set)</li><li>Od verze 4.2 také pro sharded clustery</li><li>Multi-document transakce</li></ul><div><br></div><div><strong>Read/Write Concerns:</strong></div><ul><li><strong>Read Concern</strong> - local, available, majority, linearizable</li><li><strong>Write Concern</strong> - w: majority, j: true (journal)</li></ul><div><br></div><div><strong>Příklad transakce:</strong></div><div>session = client.startSession()</div><div>session.startTransaction()</div><div>try {</div><div>&nbsp;&nbsp;collection1.insertOne({...}, session=session)</div><div>&nbsp;&nbsp;collection2.updateOne({...}, session=session)</div><div>&nbsp;&nbsp;session.commitTransaction()</div><div>} catch {</div><div>&nbsp;&nbsp;session.abortTransaction()</div><div>}</div><div><br></div><div><strong>Causal Consistency:</strong></div><div>Zajišťuje pořadí operací v rámci session</div><div><br></div><div><strong>Výhody:</strong> ACID garance, data integrity</div><div><strong>Nevýhody:</strong> performance overhead, komplexita</div></div>"

11. Pokročilé použití MongoDB - Sharding a replikace	"<div><strong>Sharding a replikace v MongoDB</strong></div><div><br></div><div><strong>Sharding:</strong></div><ul><li>Horizontální škálování dat</li><li>Data rozdělena podle shard key</li><li>Komponenty: mongos (router), config servers, shard servers</li></ul><div><br></div><div><strong>Shard key strategie:</strong></div><ul><li><strong>Range-based</strong> - podle rozsahu hodnot</li><li><strong>Hash-based</strong> - podle hash funkce</li><li><strong>Zone-based</strong> - geografické rozdělení</li></ul><div><br></div><div><strong>Replikace:</strong></div><ul><li><strong>Replica Set</strong> - skupina mongod instancí</li><li><strong>Primary</strong> - přijímá write operace</li><li><strong>Secondary</strong> - replikuje data z Primary</li><li><strong>Arbiter</strong> - pouze pro volby, neuchovává data</li></ul><div><br></div><div><strong>Failover proces:</strong></div><div>Automatická volba nového Primary při výpadku</div><div><br></div><div><strong>Výhody shardingu:</strong></div><ul><li>Horizontální škálování</li><li>Distribuce zátěže</li><li>Geografické rozložení</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Komplexita správy</li><li>Distributed queries overhead</li><li>Shard key nelze změnit</li></ul></div>"