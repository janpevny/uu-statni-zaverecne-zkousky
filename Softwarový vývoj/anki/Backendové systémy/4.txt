4. Způsoby realizace backendu - Backend technologie a srovnání	"<div><strong>Nejčastěji používané backend technologie</strong></div><div><br></div><div><strong>Hlavní jazyky a platformy:</strong></div><ul><li><strong>Node.js (JavaScript)</strong> - rychlý vývoj, velká komunita, event-driven</li><li><strong>Java</strong> - enterprise aplikace, Spring Framework, silná typizace</li><li><strong>Python</strong> - rychlý vývoj, Django/Flask, data science integrace</li><li><strong>.NET (C#)</strong> - Microsoft ekosystém, ASP.NET Core</li><li><strong>PHP</strong> - webové aplikace, Laravel/Symfony</li><li><strong>Go</strong> - vysoký výkon, jednoduchost, Google</li></ul><div><br></div><div><strong>Srovnání kritérií:</strong></div><ul><li><strong>Performance:</strong> Go > Java > .NET > Node.js > Python > PHP</li><li><strong>Rychlost vývoje:</strong> Python > PHP > Node.js > .NET > Java > Go</li><li><strong>Enterprise podpora:</strong> Java > .NET > Node.js > Python > Go > PHP</li><li><strong>Škálovatelnost:</strong> Go > Java > .NET > Node.js > Python > PHP</li></ul><div><br></div><div><strong>Výhody/Nevýhody podle použití:</strong></div><ul><li><strong>Startupy:</strong> Node.js, Python (rychlý vývoj)</li><li><strong>Enterprise:</strong> Java, .NET (stabilita, podpora)</li><li><strong>High-performance:</strong> Go, Rust (rychlost)</li></ul></div>"

4. Způsoby realizace backendu - NodeJS architektura základy	"<div><strong>Základní prvky architektury Node.js backendu</strong></div><div><br></div><div><strong>Architektonické komponenty:</strong></div><ol><li><strong>Server</strong> - Express.js, Koa.js, Fastify</li><li><strong>Middleware</strong> - authentication, logging, CORS</li><li><strong>Routing</strong> - definice API endpoints</li><li><strong>Controllers</strong> - business logic handlers</li><li><strong>Services</strong> - business logic layer</li><li><strong>Models</strong> - data representation</li></ol><div><br></div><div><strong>Typická struktura projektu:</strong></div><div>src/<br>&nbsp;&nbsp;controllers/ - HTTP request handlers<br>&nbsp;&nbsp;services/ - business logic<br>&nbsp;&nbsp;models/ - data models<br>&nbsp;&nbsp;routes/ - API routes<br>&nbsp;&nbsp;middleware/ - custom middleware<br>&nbsp;&nbsp;config/ - configuration files</div><div><br></div><div><strong>Event-driven architektura:</strong></div><ul><li><strong>Event Loop</strong> - single thread, non-blocking I/O</li><li><strong>Callbacks</strong> - asynchronní zpracování</li><li><strong>Promises/async-await</strong> - moderní async handling</li><li><strong>Event Emitters</strong> - komunikace mezi komponentami</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Vysoká propustnost I/O operací</li><li>JavaScript na frontend i backend</li><li>NPM ekosystém</li><li>Rychlý vývoj</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Single thread - CPU intensive úkoly</li><li>Callback hell (řešitelné async/await)</li><li>Rychlé změny v ekosystému</li></ul></div>"

4. Způsoby realizace backendu - REST služby implementace	"<div><strong>Implementace REST služeb v Node.js</strong></div><div><br></div><div><strong>HTTP metody a význam:</strong></div><ul><li><strong>GET</strong> - získání dat (idempotentní)</li><li><strong>POST</strong> - vytvoření nového zdroje</li><li><strong>PUT</strong> - aktualizace/vytvoření (idempotentní)</li><li><strong>PATCH</strong> - částečná aktualizace</li><li><strong>DELETE</strong> - smazání zdroje (idempotentní)</li></ul><div><br></div><div><strong>Express.js implementace:</strong></div><div>app.get('/api/users', getUsersController);<br>app.post('/api/users', createUserController);<br>app.put('/api/users/:id', updateUserController);<br>app.delete('/api/users/:id', deleteUserController);</div><div><br></div><div><strong>REST principy:</strong></div><ul><li><strong>Stateless</strong> - každý request samostatný</li><li><strong>Resource-based</strong> - URL reprezentují zdroje</li><li><strong>HTTP status codes</strong> - 200, 201, 400, 404, 500</li><li><strong>JSON format</strong> - standardní data exchange</li></ul><div><br></div><div><strong>Middleware pro REST:</strong></div><ul><li><strong>Authentication</strong> - JWT, session-based</li><li><strong>Validation</strong> - Joi, express-validator</li><li><strong>Rate limiting</strong> - ochrana proti abuse</li><li><strong>CORS</strong> - cross-origin requests</li></ul><div><br></div><div><strong>Nástroje:</strong> Express.js, Fastify, Swagger/OpenAPI, Postman</div></div>"

4. Způsoby realizace backendu - Data Access Object (DAO)	"<div><strong>Data Access Object pattern</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Návrhový vzor, který odděluje aplikační logiku od datové vrstvy prostřednictvím abstrakce přístupu k datům</div><div><br></div><div><strong>Struktura DAO:</strong></div><ul><li><strong>DAO Interface</strong> - definice operací (create, read, update, delete)</li><li><strong>DAO Implementation</strong> - konkrétní implementace pro databázi</li><li><strong>Data Transfer Object</strong> - reprezentace dat</li><li><strong>Factory pattern</strong> - vytváření DAO instancí</li></ul><div><br></div><div><strong>Příklad Node.js implementace:</strong></div><div>class UserDAO {<br>&nbsp;&nbsp;async create(userData) { ... }<br>&nbsp;&nbsp;async findById(id) { ... }<br>&nbsp;&nbsp;async update(id, userData) { ... }<br>&nbsp;&nbsp;async delete(id) { ... }<br>&nbsp;&nbsp;async findAll() { ... }<br>}</div><div><br></div><div><strong>Výhody:</strong></div><ul><li>Oddělení business logiky od datové vrstvy</li><li>Snadná změna databáze</li><li>Lepší testovatelnost (mock objekty)</li><li>Znovupoužitelnost kódu</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Dodatečná vrstva abstrakce</li><li>Možná redundance kódu</li><li>Over-engineering pro jednoduché aplikace</li></ul><div><br></div><div><strong>Alternativy:</strong> ORM (Sequelize, TypeORM), Query Builders (Knex.js)</div></div>"

4. Způsoby realizace backendu - Připojení k databázi	"<div><strong>Připojení k databázi v Node.js</strong></div><div><br></div><div><strong>Typy databází:</strong></div><ul><li><strong>Relační</strong> - MySQL, PostgreSQL, SQLite</li><li><strong>NoSQL</strong> - MongoDB, CouchDB</li><li><strong>In-memory</strong> - Redis, Memcached</li><li><strong>Graph</strong> - Neo4j</li></ul><div><br></div><div><strong>Node.js database drivery:</strong></div><ul><li><strong>MySQL</strong> - mysql2, mysql</li><li><strong>PostgreSQL</strong> - pg (node-postgres)</li><li><strong>MongoDB</strong> - mongodb, mongoose (ODM)</li><li><strong>Redis</strong> - redis, ioredis</li><li><strong>SQLite</strong> - sqlite3, better-sqlite3</li></ul><div><br></div><div><strong>Connection management:</strong></div><ul><li><strong>Connection pooling</strong> - optimalizace připojení</li><li><strong>Connection string</strong> - konfigurace připojení</li><li><strong>Environment variables</strong> - bezpečné ukládání credentials</li><li><strong>Retry logic</strong> - handling connection failures</li></ul><div><br></div><div><strong>ORM/ODM nástroje:</strong></div><ul><li><strong>Sequelize</strong> - ORM pro relační DB</li><li><strong>TypeORM</strong> - TypeScript ORM</li><li><strong>Mongoose</strong> - MongoDB ODM</li><li><strong>Prisma</strong> - moderní ORM s type safety</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Environment-based konfigurace</li><li>Connection pooling</li><li>Proper error handling</li><li>Query optimization</li></ul></div>"

4. Způsoby realizace backendu - Databázové transakce	"<div><strong>Databázové transakce v Node.js</strong></div><div><br></div><div><strong>ACID vlastnosti:</strong></div><ul><li><strong>Atomicity</strong> - transakce je nedělitelná (vše nebo nic)</li><li><strong>Consistency</strong> - databáze zůstává v konzistentním stavu</li><li><strong>Isolation</strong> - transakce jsou vzájemně izolované</li><li><strong>Durability</strong> - potvrzené změny jsou trvalé</li></ul><div><br></div><div><strong>Implementace v Node.js:</strong></div><div>// Sequelize příklad<br>const transaction = await sequelize.transaction();<br>try {<br>&nbsp;&nbsp;await User.create(userData, { transaction });<br>&nbsp;&nbsp;await Account.update(balance, { transaction });<br>&nbsp;&nbsp;await transaction.commit();<br>} catch (error) {<br>&nbsp;&nbsp;await transaction.rollback();<br>}</div><div><br></div><div><strong>Typy transakcí:</strong></div><ul><li><strong>Managed transactions</strong> - automatické commit/rollback</li><li><strong>Unmanaged transactions</strong> - manuální řízení</li><li><strong>Concurrent transactions</strong> - paralelní zpracování</li></ul><div><br></div><div><strong>Isolation levels:</strong></div><ul><li><strong>READ UNCOMMITTED</strong> - nejnižší izolace</li><li><strong>READ COMMITTED</strong> - výchozí pro většinu DB</li><li><strong>REPEATABLE READ</strong> - konzistentní čtení</li><li><strong>SERIALIZABLE</strong> - nejvyšší izolace</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Krátké transakce (minimize lock time)</li><li>Proper error handling</li><li>Vyhnutí se deadlock situacím</li><li>Connection pooling pro transactions</li></ul></div>"

4. Způsoby realizace backendu - API design a dokumentace	"<div><strong>API design a dokumentace</strong></div><div><br></div><div><strong>RESTful API design principy:</strong></div><ul><li><strong>Resource naming</strong> - jmenné konvence (/users, /orders)</li><li><strong>HTTP methods</strong> - správné použití GET, POST, PUT, DELETE</li><li><strong>Status codes</strong> - 2xx success, 4xx client error, 5xx server error</li><li><strong>Versioning</strong> - /v1/api, header-based</li></ul><div><br></div><div><strong>API dokumentace nástroje:</strong></div><ul><li><strong>Swagger/OpenAPI</strong> - standardní specifikace</li><li><strong>Postman</strong> - API testing a dokumentace</li><li><strong>Insomnia</strong> - API client a dokumentace</li><li><strong>Redoc</strong> - generování dokumentace</li></ul><div><br></div><div><strong>Response formáty:</strong></div><div>{<br>&nbsp;&nbsp;\"data\": { ... },<br>&nbsp;&nbsp;\"message\": \"Success\",<br>&nbsp;&nbsp;\"status\": 200,<br>&nbsp;&nbsp;\"timestamp\": \"2024-01-01T10:00:00Z\"<br>}</div><div><br></div><div><strong>Error handling:</strong></div><ul><li><strong>Consistent error format</strong> - jednotný formát chyb</li><li><strong>Error codes</strong> - specifické kódy pro různé chyby</li><li><strong>Validation errors</strong> - detailní informace o validačních chybách</li><li><strong>Logging</strong> - centralizované logování chyb</li></ul><div><br></div><div><strong>Security considerations:</strong></div><ul><li>Authentication (JWT, OAuth)</li><li>Authorization (role-based access)</li><li>Input validation</li><li>Rate limiting</li></ul></div>"

4. Způsoby realizace backendu - Testování a deployment	"<div><strong>Backend testování a nasazení</strong></div><div><br></div><div><strong>Typy testů:</strong></div><ul><li><strong>Unit testy</strong> - testování jednotlivých funkcí (Jest, Mocha)</li><li><strong>Integration testy</strong> - testování API endpoints</li><li><strong>E2E testy</strong> - end-to-end testování (Cypress, Playwright)</li><li><strong>Load testing</strong> - zátěžové testování (Artillery, k6)</li></ul><div><br></div><div><strong>Testovací nástroje Node.js:</strong></div><ul><li><strong>Jest</strong> - complete testing framework</li><li><strong>Supertest</strong> - HTTP testing</li><li><strong>Sinon</strong> - mocking a stubbing</li><li><strong>Chai</strong> - assertion library</li></ul><div><br></div><div><strong>CI/CD proces:</strong></div><ol><li><strong>Code commit</strong> - Git hooks, pre-commit checks</li><li><strong>Automated testing</strong> - GitHub Actions, GitLab CI</li><li><strong>Build process</strong> - compilation, bundling</li><li><strong>Deployment</strong> - staging → production</li></ol><div><br></div><div><strong>Deployment možnosti:</strong></div><ul><li><strong>Traditional servers</strong> - PM2, systemd</li><li><strong>Containers</strong> - Docker, Kubernetes</li><li><strong>Serverless</strong> - AWS Lambda, Vercel</li><li><strong>PaaS</strong> - Heroku, Railway</li></ul><div><br></div><div><strong>Production considerations:</strong></div><ul><li>Environment variables</li><li>Health checks</li><li>Monitoring (APM tools)</li><li>Logging strategy</li><li>Security updates</li></ul></div>"