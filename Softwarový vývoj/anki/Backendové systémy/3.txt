3. Dokumentace backendu - Typická struktura dokumentace	"<div><strong>Struktura dokumentace backendu</strong></div><div><br></div><div><strong>Hlavní sekce:</strong></div><ol><li><strong>API Reference</strong> - detailní popis všech endpoints</li><li><strong>Architecture Overview</strong> - celková architektura systému</li><li><strong>Data Models</strong> - struktura entit a vazeb</li><li><strong>Authentication & Authorization</strong> - zabezpečení API</li><li><strong>Error Handling</strong> - kódy chyb a jejich zpracování</li></ol><div><br></div><div><strong>Formáty dokumentace:</strong></div><ul><li><strong>OpenAPI/Swagger</strong> - standardizovaná API dokumentace</li><li><strong>Markdown</strong> - README, guides, tutorials</li><li><strong>JavaDoc/JSDoc</strong> - inline dokumentace kódu</li><li><strong>Postman Collections</strong> - testovatelné API příklady</li></ul><div><br></div><div><strong>Výhody strukturované dokumentace:</strong></div><ul><li>Rychlejší onboarding nových vývojářů</li><li>Snížení chyb při integraci</li><li>Lepší komunikace mezi týmy</li><li>Automatické generování klientských knihoven</li></ul><div><br></div><div><strong>Nástroje:</strong> Swagger UI, Redoc, GitBook, Confluence</div>"

3. Dokumentace backendu - API dokumentace a specifikace	"<div><strong>API dokumentace a specifikace</strong></div><div><br></div><div><strong>OpenAPI (Swagger) specifikace:</strong></div><ul><li><strong>Endpoints</strong> - URL, HTTP metody, parametry</li><li><strong>Request/Response schemas</strong> - struktura dat</li><li><strong>Status codes</strong> - HTTP response kódy</li><li><strong>Authentication</strong> - typy autentizace (Bearer, API Key)</li></ul><div><br></div><div><strong>Klíčové informace v API docs:</strong></div><ol><li><strong>Base URL</strong> - základní adresa API</li><li><strong>Versioning</strong> - strategie verzování API</li><li><strong>Rate limiting</strong> - omezení počtu požadavků</li><li><strong>Examples</strong> - ukázkové požadavky a odpovědi</li><li><strong>Error codes</strong> - seznam možných chyb</li></ol><div><br></div><div><strong>Automatické generování:</strong></div><ul><li>Z anotací v kódu (Spring Boot, FastAPI)</li><li>Z TypeScript definic (NestJS)</li><li>Z schema-first přístupů</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Interaktivní testování API</li><li>Automatické generování klientů</li><li>Konzistence dokumentace s kódem</li><li>Snadná integrace třetích stran</li></ul><div><br></div><div><strong>Nástroje:</strong> Swagger UI, Postman, Insomnia, curl examples</div>"

3. Dokumentace backendu - Perzistentní vrstva dokumentace	"<div><strong>Dokumentace perzistentní vrsty</strong></div><div><br></div><div><strong>Database Schema Documentation:</strong></div><ul><li><strong>ER diagramy</strong> - vizuální reprezentace entit a vazeb</li><li><strong>Table definitions</strong> - struktura tabulek, datové typy</li><li><strong>Indexes</strong> - definice indexů pro optimalizaci</li><li><strong>Constraints</strong> - omezení integrity (PK, FK, unique)</li><li><strong>Migration scripts</strong> - evoluce databázového schématu</li></ul><div><br></div><div><strong>ORM/ODM dokumentace:</strong></div><ul><li><strong>Entity models</strong> - mapování objektů na tabulky</li><li><strong>Relationships</strong> - One-to-One, One-to-Many, Many-to-Many</li><li><strong>Query examples</strong> - typické dotazy a jejich optimalizace</li><li><strong>Custom queries</strong> - raw SQL nebo NoSQL dotazy</li></ul><div><br></div><div><strong>Performance dokumentace:</strong></div><ul><li>Query performance guidelines</li><li>Indexing strategies</li><li>Connection pooling settings</li><li>Caching mechanisms</li></ul><div><br></div><div><strong>Nástroje:</strong></div><div>dbdocs, MySQL Workbench, pgAdmin, Liquibase docs</div><div><br></div><div><strong>Příklad technologií:</strong> Hibernate (JPA), Sequelize, TypeORM, Prisma</div>"

3. Dokumentace backendu - DAO pattern dokumentace	"<div><strong>Data Access Object (DAO) Pattern</strong></div><div><br></div><div><strong>Definice DAO:</strong></div><div>Návrhový vzor poskytující abstraktní rozhraní pro přístup k datům, skrývající komplexitu databázových operací</div><div><br></div><div><strong>Struktura DAO:</strong></div><ul><li><strong>Interface</strong> - definuje kontakt (CRUD operace)</li><li><strong>Implementation</strong> - konkrétní implementace pro databázi</li><li><strong>Entity/Model</strong> - reprezentace dat</li><li><strong>Exception handling</strong> - zpracování databázových chyb</li></ul><div><br></div><div><strong>Typické DAO operace:</strong></div><ol><li><strong>Create</strong> - save(), insert()</li><li><strong>Read</strong> - findById(), findAll(), findBy...()</li><li><strong>Update</strong> - update(), merge()</li><li><strong>Delete</strong> - delete(), remove()</li></ol><div><br></div><div><strong>Výhody DAO pattern:</strong></div><ul><li>Oddělení business logiky od data access logiky</li><li>Testovatelnost - mock DAO implementace</li><li>Flexibilita - změna databáze bez změny business kódu</li><li>Znovupoužitelnost</li></ul><div><br></div><div><strong>Příklady implementace:</strong> Spring Data JPA, MyBatis, JOOQ</div>"

3. Dokumentace backendu - Repository pattern	"<div><strong>Repository Pattern</strong></div><div><br></div><div><strong>Definice Repository:</strong></div><div>Návrhový vzor zapouzdřující logiku potřebnou k přístupu ke zdrojům dat. Centralizuje běžnou funkcionalitu přístupu k datům a poskytuje lepší udržitelnost</div><div><br></div><div><strong>Rozdíl DAO vs Repository:</strong></div><ul><li><strong>DAO</strong> - více zaměřený na databázové operace</li><li><strong>Repository</strong> - více doménově orientovaný, může kombinovat více DAO</li><li><strong>Repository</strong> - může implementovat in-memory kolekce rozhraní</li></ul><div><br></div><div><strong>Repository metody:</strong></div><ul><li><strong>Query methods</strong> - findByUsername(), findByDateRange()</li><li><strong>Custom queries</strong> - @Query anotace</li><li><strong>Derived queries</strong> - automatické generování z názvu metody</li><li><strong>Paging & Sorting</strong> - Pageable parametry</li></ul><div><br></div><div><strong>Výhody:</strong></div><ul><li>Domain-driven design podpora</li><li>Testovatelnost s mock repositories</li><li>Centralizace query logiky</li><li>Type-safe queries</li></ul><div><br></div><div><strong>Příklady:</strong> Spring Data JPA Repository, Entity Framework Repository</div>"

3. Dokumentace backendu - Služby a API endpoints	"<div><strong>Dokumentace služeb (Services)</strong></div><div><br></div><div><strong>Service Layer charakteristiky:</strong></div><ul><li><strong>Business logic</strong> - implementace obchodních pravidel</li><li><strong>Transaction management</strong> - správa databázových transakcí</li><li><strong>Orchestrace</strong> - koordinace více DAO/Repository</li><li><strong>Validace</strong> - kontrola vstupních dat</li></ul><div><br></div><div><strong>Typy služeb:</strong></div><ol><li><strong>Application Services</strong> - use case implementace</li><li><strong>Domain Services</strong> - doménová logika</li><li><strong>Infrastructure Services</strong> - external APIs, email, atd.</li></ol><div><br></div><div><strong>Dokumentace služeb:</strong></div><ul><li>Popis zodpovědností jednotlivých služeb</li><li>Input/Output specifikace</li><li>Exception handling strategie</li><li>Transaction boundaries</li><li>Dependencies mezi službami</li></ul><div><br></div><div><strong>Service Documentation Patterns:</strong></div><ul><li>JavaDoc/JSDoc komentáře</li><li>Unit test jako dokumentace</li><li>Architecture Decision Records (ADR)</li></ul><div><br></div><div><strong>Příklady frameworků:</strong> Spring Service, NestJS Providers, .NET Services</div>"

3. Dokumentace backendu - REST API endpoints	"<div><strong>REST API Endpoints dokumentace</strong></div><div><br></div><div><strong>HTTP Methods mapping:</strong></div><ul><li><strong>GET</strong> - čtení dat (/users, /users/{id})</li><li><strong>POST</strong> - vytváření nových zdrojů (/users)</li><li><strong>PUT</strong> - úplná aktualizace (/users/{id})</li><li><strong>PATCH</strong> - částečná aktualizace (/users/{id})</li><li><strong>DELETE</strong> - mazání zdrojů (/users/{id})</li></ul><div><br></div><div><strong>Endpoint dokumentace obsahuje:</strong></div><ol><li><strong>URL pattern</strong> - cesta a parametry</li><li><strong>HTTP method</strong> - GET, POST, PUT, DELETE</li><li><strong>Request parameters</strong> - query, path, body</li><li><strong>Response format</strong> - JSON schema</li><li><strong>Status codes</strong> - 200, 201, 400, 401, 404, 500</li><li><strong>Authentication</strong> - required headers, tokens</li></ol><div><br></div><div><strong>RESTful naming conventions:</strong></div><ul><li>Používání podstatných jmen (ne sloves)</li><li>Plurál pro kolekce (/users, ne /user)</li><li>Hierarchické vztahy (/users/{id}/posts)</li><li>Query parametry pro filtrování, stránkování</li></ul><div><br></div><div><strong>Příklady tools:</strong> Postman, Swagger UI, HTTPie, curl</div>"

3. Dokumentace backendu - GraphQL API dokumentace	"<div><strong>GraphQL API dokumentace</strong></div><div><br></div><div><strong>GraphQL specifika:</strong></div><ul><li><strong>Schema-first</strong> - dokumentace je část schema definice</li><li><strong>Type system</strong> - silné typování všech dat</li><li><strong>Introspection</strong> - self-documenting API</li><li><strong>Single endpoint</strong> - většinou /graphql</li></ul><div><br></div><div><strong>Schema documentation:</strong></div><ol><li><strong>Types</strong> - objekty, skaláry, enums</li><li><strong>Queries</strong> - čtení dat</li><li><strong>Mutations</strong> - modifikace dat</li><li><strong>Subscriptions</strong> - real-time data</li><li><strong>Fields</strong> - popis jednotlivých polí</li></ol><div><br></div><div><strong>Výhody GraphQL docs:</strong></div><ul><li>Automatické generování z schema</li><li>Interactive playground (GraphiQL)</li><li>Type safety</li><li>Přesná specifikace dat</li></ul><div><br></div><div><strong>GraphQL dokumentační nástroje:</strong></div><ul><li><strong>GraphiQL</strong> - interaktivní query editor</li><li><strong>Apollo Studio</strong> - cloud-based docs</li><li><strong>GraphQL Playground</strong> - pokročilý IDE</li><li><strong>Spectacle</strong> - statická dokumentace</li></ul><div><br></div><div><strong>Příklad technologií:</strong> Apollo Server, GraphQL-Java, Hasura</div>"