13. Správa a revize zdrojových kódů - Source code repository (GIT)	"<div><strong>Source code repository a GIT</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Systém pro ukládání a správu verzí zdrojového kódu s komplexní historií všech změn</div><div><br></div><div><strong>Základní koncepty GIT:</strong></div><ul><li><strong>Repository</strong> - úložiště kódu s kompletní historií</li><li><strong>Commit</strong> - snímek změn s unikátním hashem</li><li><strong>Branch</strong> - paralelní vývojová větev</li><li><strong>Working Directory</strong> - aktuální pracovní prostor</li><li><strong>Staging Area</strong> - připravené změny pro commit</li></ul><div><br></div><div><strong>Výhody GIT:</strong></div><ul><li>Distribuovaný systém</li><li>Offline práce</li><li>Rychlé operace</li><li>Komplexní branching/merging</li><li>Kryptografická integrita</li></ul><div><br></div><div><strong>Základní příkazy:</strong></div><ul><li>git init, clone, add, commit</li><li>git push, pull, fetch</li><li>git branch, checkout, merge</li></ul>"

13. Správa a revize zdrojových kódů - Verzování a branching strategie	"<div><strong>Verzování a branching strategie</strong></div><div><br></div><div><strong>Význam verzování:</strong></div><ul><li>Sledování změn v čase</li><li>Možnost návratu k předchozím verzím</li><li>Paralelní vývoj funkcí</li><li>Koordinace týmové práce</li></ul><div><br></div><div><strong>Typy branchů:</strong></div><ol><li><strong>Main/Master</strong> - produkční kód</li><li><strong>Development</strong> - vývojová větev</li><li><strong>Feature branches</strong> - nové funkce</li><li><strong>Hotfix branches</strong> - kritické opravy</li><li><strong>Release branches</strong> - příprava release</li></ol><div><br></div><div><strong>Výhody branchování:</strong></div><ul><li>Izolace změn</li><li>Paralelní vývoj</li><li>Experimentování bez rizika</li><li>Code review workflow</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Možnost merge konfliktů</li><li>Složitější správa mnoha branchů</li><li>Potřeba disciplíny v týmu</li><li>Long-lived branches mohou způsobit problémy</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Krátké názvy branchů</li><li>Pravidelné mergování</li><li>Clean history pomocí rebase</li></ul>"

13. Správa a revize zdrojových kódů - GitFlow workflow	"<div><strong>GitFlow workflow model</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Robustní branching model definující specifické role pro různé typy branchů a jejich interakce</div><div><br></div><div><strong>Hlavní branche:</strong></div><ul><li><strong>master</strong> - produkční kód, vždy stabilní</li><li><strong>develop</strong> - hlavní vývojová větev</li></ul><div><br></div><div><strong>Pomocné branche:</strong></div><ol><li><strong>feature/*</strong> - nové funkce (z develop → do develop)</li><li><strong>release/*</strong> - příprava nových verzí</li><li><strong>hotfix/*</strong> - kritické opravy (z master)</li></ol><div><br></div><div><strong>Workflow proces:</strong></div><ol><li>Feature branch z develop</li><li>Merge feature do develop</li><li>Release branch z develop</li><li>Release merge do master a develop</li><li>Hotfix přímo z master</li></ol><div><br></div><div><strong>Výhody:</strong></div><ul><li>Jasná struktura a proces</li><li>Oddělení vývoje od produkce</li><li>Podpora paralelního vývoje</li><li>Snadná správa release</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Může být příliš komplex pro malé týmy</li><li>Long-lived branches</li><li>Pomalší release cyklus</li></ul>"

13. Správa a revize zdrojových kódů - GitHub Flow a další modely	"<div><strong>GitHub Flow a alternativní modely</strong></div><div><br></div><div><strong>GitHub Flow:</strong></div><ol><li>Vytvoř branch z main</li><li>Přidej commits</li><li>Otevři Pull Request</li><li>Diskutuj a review</li><li>Merge do main</li><li>Deploy</li></ol><div><br></div><div><strong>GitLab Flow:</strong></div><ul><li>Kombinuje Git flow a GitHub flow</li><li>Environment branches (staging, production)</li><li>Upstream first policy</li></ul><div><br></div><div><strong>Trunk-based development:</strong></div><ul><li>Všichni commitují do main/trunk</li><li>Krátké feature branches (max 2 dny)</li><li>Feature flags pro nehotové funkce</li><li>Časté integrace</li></ul><div><br></div><div><strong>Výběr modelu podle:</strong></div><ul><li>Velikost týmu</li><li>Frekvence deploymentů</li><li>Složitost produktu</li><li>Úroveň zkušeností týmu</li></ul><div><br></div><div><strong>Výhody jednoduchých modelů:</strong></div><ul><li>Rychlejší development cyklus</li><li>Méně overhead</li><li>Continuous deployment friendly</li></ul>"

13. Správa a revize zdrojových kódů - Code review proces	"<div><strong>Code review proces</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Systematické hodnocení zdrojového kódu před jeho začleněním do hlavní větve</div><div><br></div><div><strong>Typy review:</strong></div><ul><li><strong>Pull/Merge Request</strong> - před mergem</li><li><strong>Pre-commit review</strong> - před commitem</li><li><strong>Post-commit review</strong> - po commitu</li><li><strong>Formal inspection</strong> - strukturovaný proces</li></ul><div><br></div><div><strong>Co kontrolovat:</strong></div><ol><li>Funkčnost a správnost kódu</li><li>Dodržování coding standards</li><li>Výkon a bezpečnost</li><li>Testovatelnost</li><li>Dokumentace a komentáře</li><li>Architecture a design patterns</li></ol><div><br></div><div><strong>Výhody:</strong></div><ul><li>Kvalitnější kód</li><li>Sdílení znalostí v týmu</li><li>Odhalení bugů před nasazením</li><li>Mentoring mladších vývojářů</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>Časově náročný proces</li><li>Možné zdržení developmentu</li><li>Subjektivní hodnocení</li><li>Riziko konfliktů v týmu</li></ul><div><br></div><div><strong>Nástroje:</strong> GitHub, GitLab, Bitbucket, Azure DevOps, Gerrit</div>"

13. Správa a revize zdrojových kódů - Statická analýza kódu	"<div><strong>Statická analýza kódu</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Automatizovaná analýza zdrojového kódu bez jeho spuštění za účelem odhalení potenciálních problémů</div><div><br></div><div><strong>Typy kontrol:</strong></div><ul><li><strong>Syntax errors</strong> - syntaktické chyby</li><li><strong>Code smells</strong> - problematické vzory</li><li><strong>Security vulnerabilities</strong> - bezpečnostní díry</li><li><strong>Performance issues</strong> - výkonnostní problémy</li><li><strong>Coding standards</strong> - dodržování konvencí</li></ul><div><br></div><div><strong>Kategorie nástrojů:</strong></div><ol><li><strong>Linters</strong> - ESLint, JSHint, PyLint</li><li><strong>Security scanners</strong> - SonarQube, Checkmarx</li><li><strong>Code quality</strong> - CodeClimate, DeepCode</li><li><strong>IDE plugins</strong> - integrované do vývojových prostředí</li></ol><div><br></div><div><strong>Výhody:</strong></div><ul><li>Rychlé odhalení problémů</li><li>Konzistentní kvalita kódu</li><li>Bezpečnostní kontroly</li><li>Automatizace v CI/CD</li></ul><div><br></div><div><strong>Nevýhody:</strong></div><ul><li>False positive výsledky</li><li>Nemůže odhalit logické chyby</li><li>Potřeba konfigurace pravidel</li><li>Možnost ignorování výstražných hlášení</li></ul>"

13. Správa a revize zdrojových kódů - CI/CD integrace a automatizace	"<div><strong>CI/CD integrace pro správu kódu</strong></div><div><br></div><div><strong>Continuous Integration:</strong></div><ul><li>Automatické buildování při každém commitu</li><li>Spouštění testů</li><li>Statická analýza kódu</li><li>Notifikace o chybách</li></ul><div><br></div><div><strong>Automatizované kontroly:</strong></div><ol><li><strong>Pre-commit hooks</strong> - před commitem</li><li><strong>Pre-push hooks</strong> - před pushom</li><li><strong>CI pipeline checks</strong> - v CI/CD systému</li><li><strong>Quality gates</strong> - blokování merge při problémech</li></ol><div><br></div><div><strong>Typický CI/CD workflow:</strong></div><ol><li>Developer push → CI trigger</li><li>Build & compile</li><li>Run unit tests</li><li>Static analysis</li><li>Security scan</li><li>Deploy to staging</li><li>Integration tests</li><li>Deploy to production</li></ol><div><br></div><div><strong>Výhody automatizace:</strong></div><ul><li>Konzistentní proces</li><li>Rychlá zpětná vazba</li><li>Redukce lidských chyb</li><li>Rychlejší time-to-market</li></ul><div><br></div><div><strong>Nástroje:</strong> Jenkins, GitHub Actions, GitLab CI, Azure Pipelines, CircleCI</div>"

13. Správa a revize zdrojových kódů - Správa závislostí a artefaktů	"<div><strong>Správa závislostí a artefaktů</strong></div><div><br></div><div><strong>Package management:</strong></div><ul><li><strong>JavaScript:</strong> npm, Yarn</li><li><strong>Java:</strong> Maven, Gradle</li><li><strong>Python:</strong> pip, poetry</li><li><strong>.NET:</strong> NuGet</li><li><strong>PHP:</strong> Composer</li></ul><div><br></div><div><strong>Artifact repositories:</strong></div><ul><li><strong>Public:</strong> Maven Central, npm registry</li><li><strong>Private:</strong> Nexus, Artifactory, Azure Artifacts</li><li><strong>Container registries:</strong> Docker Hub, ECR, ACR</li></ul><div><br></div><div><strong>Dependency management problémy:</strong></div><ol><li><strong>Version conflicts</strong> - konfliktní verze</li><li><strong>Transitive dependencies</strong> - nepřímé závislosti</li><li><strong>Security vulnerabilities</strong> - zranitelné balíčky</li><li><strong>License compliance</strong> - licenční kompatibilita</li></ol><div><br></div><div><strong>Best practices:</strong></div><ul><li>Lock files pro přesné verze</li><li>Pravidelné aktualizace</li><li>Security scanning</li><li>Minimal dependencies</li></ul><div><br></div><div><strong>Nástroje pro analýzu:</strong></div><ul><li>Snyk, WhiteSource</li><li>OWASP Dependency Check</li><li>npm audit, pip-audit</li></ul>"