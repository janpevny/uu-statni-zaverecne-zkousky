5. Vybrané architektonické koncepty backendů - Autentizace	"<div><strong>Autentizace (Authentication)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Proces ověření identity uživatele - "kdo jste?"</div><div><br></div><div><strong>Základní metody:</strong></div><ul><li><strong>Session-based</strong> - server si udržuje session store</li><li><strong>Token-based</strong> - JWT, API keys</li><li><strong>OAuth/OpenID Connect</strong> - delegovaná autentizace</li><li><strong>Multi-factor (MFA)</strong> - kombinace více faktorů</li></ul><div><br></div><div><strong>Výhody JWT:</strong></div><ul><li>Stateless - neukládá se na serveru</li><li>Škálovatelnost</li><li>Cross-domain fungování</li><li>Obsahuje payload s claims</li></ul><div><br></div><div><strong>Nevýhody JWT:</strong></div><ul><li>Velikost tokenu</li><li>Nelze jednoduše revoknout</li><li>Složitější refresh mechanismus</li></ul><div><br></div><div><strong>Implementace:</strong> Spring Security, Passport.js, Auth0, Firebase Auth</div></div>"

5. Vybrané architektonické koncepty backendů - Autorizace	"<div><strong>Autorizace (Authorization)</strong></div><div><br></div><div><strong>Definice:</strong></div><div>Proces kontroly oprávnění - "co smíte dělat?"</div><div><br></div><div><strong>Modely přístupových práv:</strong></div><ul><li><strong>RBAC</strong> (Role-Based Access Control) - založené na rolích</li><li><strong>ABAC</strong> (Attribute-Based Access Control) - založené na atributech</li><li><strong>ACL</strong> (Access Control Lists) - seznamy oprávnění</li><li><strong>PBAC</strong> (Policy-Based Access Control) - založené na policies</li></ul><div><br></div><div><strong>Implementace v kódu:</strong></div><ul><li>Middleware/Interceptory</li><li>Dekorátory/Anotace (@PreAuthorize)</li><li>Guards v routách</li><li>Policy engines</li></ul><div><br></div><div><strong>Výhody RBAC:</strong></div><ul><li>Jednoduchost implementace</li><li>Snadná správa</li><li>Přehlednost</li></ul><div><br></div><div><strong>Nevýhody RBAC:</strong></div><ul><li>Rigidnost</li><li>Exploze rolí</li><li>Složitost u komplexních scénářů</li></ul><div><br></div><div><strong>Nástroje:</strong> Spring Security, Casbin, Open Policy Agent (OPA)</div></div>"

5. Vybrané architektonické koncepty backendů - Error Handling	"<div><strong>Error Handling</strong></div><div><br></div><div><strong>Typy chyb:</strong></div><ul><li><strong>Client errors (4xx)</strong> - chyby na straně klienta</li><li><strong>Server errors (5xx)</strong> - chyby na straně serveru</li><li><strong>Business logic errors</strong> - porušení obchodních pravidel</li><li><strong>System errors</strong> - databáze, síť, externí služby</li></ul><div><br></div><div><strong>Strategie zpracování:</strong></div><ul><li><strong>Exception handling</strong> - try-catch bloky</li><li><strong>Global error handlers</strong> - centralizované zpracování</li><li><strong>Circuit breaker pattern</strong> - ochrana před kaskádovými chybami</li><li><strong>Retry mechanisms</strong> - opakování neúspěšných operací</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Nezobrazovat stacktrace klientovi</li><li>Vracet konzistentní error objekty</li><li>Logování všech chyb</li><li>Graceful degradation</li></ul><div><br></div><div><strong>Návrhové vzory:</strong></div><ul><li>Result pattern</li><li>Exception translation</li><li>Error codes vs exceptions</li></ul><div><br></div><div><strong>Nástroje:</strong> Sentry, Bugsnag, Rollbar, Elastic APM</div></div>"

5. Vybrané architektonické koncepty backendů - Validace	"<div><strong>Validace dat</strong></div><div><br></div><div><strong>Úrovně validace:</strong></div><ol><li><strong>Client-side</strong> - rychlá zpětná vazba uživateli</li><li><strong>Server-side</strong> - bezpečnostní validace (nutná!)</li><li><strong>Database level</strong> - constraints, triggers</li></ol><div><br></div><div><strong>Typy validace:</strong></div><ul><li><strong>Syntaktická</strong> - formát dat (email, telefon)</li><li><strong>Sémantická</strong> - význam dat (věk > 0)</li><li><strong>Business rules</strong> - obchodní pravidla</li><li><strong>Cross-field</strong> - vztahy mezi poli</li></ul><div><br></div><div><strong>Implementační přístupy:</strong></div><ul><li><strong>Schema validation</strong> - JSON Schema, Joi</li><li><strong>Annotation-based</strong> - Bean Validation (JSR 380)</li><li><strong>Fluent validation</strong> - programatické API</li><li><strong>Custom validators</strong> - specifická pravidla</li></ul><div><br></div><div><strong>Best practices:</strong></div><ul><li>Fail fast - včasné odhalení chyb</li><li>Clear error messages</li><li>Sanitizace vstupů</li><li>Validace na hranicích systému</li></ul><div><br></div><div><strong>Nástroje:</strong> Joi, Yup, class-validator, Bean Validation, Express Validator</div></div>"

5. Vybrané architektonické koncepty backendů - Logování základy	"<div><strong>Logování - základy</strong></div><div><br></div><div><strong>Log levels:</strong></div><ol><li><strong>TRACE</strong> - nejdetailnější informace</li><li><strong>DEBUG</strong> - debugging informace</li><li><strong>INFO</strong> - obecné informační zprávy</li><li><strong>WARN</strong> - varování, neočekávané situace</li><li><strong>ERROR</strong> - chyby, které nezastavují aplikaci</li><li><strong>FATAL</strong> - kritické chyby vedoucí k ukončení</li></ol><div><br></div><div><strong>Co logovat:</strong></div><ul><li>Začátek a konec operací</li><li>Chyby a výjimky</li><li>Bezpečnostní události</li><li>Performance metriky</li><li>User actions (audit trail)</li></ul><div><br></div><div><strong>Co NElogovat:</strong></div><ul><li>Hesla a sensitive data</li><li>Personal identifiable information (PII)</li><li>Tokeny a API keys</li><li>Credit card numbers</li></ul><div><br></div><div><strong>Formát logů:</strong></div><ul><li><strong>Structured logging</strong> - JSON formát</li><li><strong>Correlation IDs</strong> - sledování requestů</li><li><strong>Timestamps</strong> - ISO 8601 formát</li><li><strong>Context information</strong> - user ID, session</li></ul><div><br></div><div><strong>Nástroje:</strong> Logback, Winston, Serilog, Log4j</div></div>"

5. Vybrané architektonické koncepty backendů - Logování pokročilé	"<div><strong>Logování - pokročilé koncepty</strong></div><div><br></div><div><strong>Centralizované logování:</strong></div><ul><li><strong>Log aggregation</strong> - shromažďování z více zdrojů</li><li><strong>ELK Stack</strong> - Elasticsearch, Logstash, Kibana</li><li><strong>Fluentd/Fluent Bit</strong> - log shipping</li><li><strong>Grafana Loki</strong> - log agregace pro Prometheus</li></ul><div><br></div><div><strong>Structured logging:</strong></div><ul><li>JSON format pro lepší parsování</li><li>Konzistentní schéma</li><li>Metadata a kontextové informace</li><li>Query-friendly formát</li></ul><div><br></div><div><strong>Performance considerations:</strong></div><ul><li><strong>Asynchronous logging</strong> - neblokující operace</li><li><strong>Log rotation</strong> - správa velikosti souborů</li><li><strong>Sampling</strong> - logování jen vzorku dat</li><li><strong>Buffering</strong> - batch zpracování</li></ul><div><br></div><div><strong>Monitoring a alerting:</strong></div><ul><li>Error rate monitoring</li><li>Log-based metrics</li><li>Anomaly detection</li><li>Real-time alerting</li></ul><div><br></div><div><strong>Compliance:</strong></div><ul><li>GDPR - anonymizace PII</li><li>Retention policies</li><li>Audit requirements</li></ul><div><br></div><div><strong>Nástroje:</strong> ELK Stack, Splunk, Datadog, New Relic</div></div>"

5. Vybrané architektonické koncepty backendů - Bezpečnostní aspekty	"<div><strong>Bezpečnostní aspekty backendů</strong></div><div><br></div><div><strong>Input Security:</strong></div><ul><li><strong>SQL Injection</strong> - prepared statements, ORM</li><li><strong>XSS</strong> - input sanitization, output encoding</li><li><strong>CSRF</strong> - tokens, SameSite cookies</li><li><strong>Path traversal</strong> - validace cest k souborům</li></ul><div><br></div><div><strong>API Security:</strong></div><ul><li><strong>Rate limiting</strong> - ochrana před abuse</li><li><strong>API versioning</strong> - zpětná kompatibilita</li><li><strong>CORS</strong> - cross-origin kontrola</li><li><strong>Content-Type validation</strong></li></ul><div><br></div><div><strong>Data Protection:</strong></div><ul><li><strong>Encryption at rest</strong> - databáze, file systém</li><li><strong>Encryption in transit</strong> - HTTPS, TLS</li><li><strong>Key management</strong> - rotace, storage</li><li><strong>Hashing passwords</strong> - bcrypt, scrypt</li></ul><div><br></div><div><strong>Security Headers:</strong></div><ul><li>Content-Security-Policy</li><li>X-Frame-Options</li><li>X-Content-Type-Options</li><li>Strict-Transport-Security</li></ul><div><br></div><div><strong>Monitoring:</strong></div><ul><li>Security logging</li><li>Intrusion detection</li><li>Vulnerability scanning</li></ul><div><br></div><div><strong>Nástroje:</strong> OWASP ZAP, Snyk, SonarQube, Helmet.js</div></div>"

5. Vybrané architektonické koncepty backendů - Performance a optimalizace	"<div><strong>Performance a optimalizace</strong></div><div><br></div><div><strong>Caching strategie:</strong></div><ul><li><strong>In-memory cache</strong> - Redis, Memcached</li><li><strong>Database query cache</strong> - výsledky dotazů</li><li><strong>Application-level cache</strong> - objekty, výpočty</li><li><strong>CDN</strong> - statické assety</li></ul><div><br></div><div><strong>Database optimalizace:</strong></div><ul><li><strong>Indexy</strong> - rychlejší vyhledávání</li><li><strong>Query optimization</strong> - EXPLAIN plans</li><li><strong>Connection pooling</strong> - efektivní správa spojení</li><li><strong>Read replicas</strong> - škálování čtení</li></ul><div><br></div><div><strong>API optimalizace:</strong></div><ul><li><strong>Pagination</strong> - omezení velikosti odpovědí</li><li><strong>Field selection</strong> - GraphQL, sparse fieldsets</li><li><strong>Compression</strong> - gzip, brotli</li><li><strong>HTTP caching</strong> - ETag, Cache-Control</li></ul><div><br></div><div><strong>Asynchronní zpracování:</strong></div><ul><li><strong>Message queues</strong> - RabbitMQ, AWS SQS</li><li><strong>Event-driven architecture</strong></li><li><strong>Background jobs</strong> - Celery, Bull</li></ul><div><br></div><div><strong>Monitoring:</strong></div><ul><li>Response time metrics</li><li>Throughput monitoring</li><li>Resource utilization</li><li>APM tools</li></ul><div><br></div><div><strong>Nástroje:</strong> Redis, New Relic, Prometheus, Grafana</div></div>"